id,title,content,lang,account_id,created_at,updated_at,
1,文字列操作 in Haskell,文字列csに含まれる行に対して、行ごとに先頭末尾にある空白類文字を削除するプログラム___NEXT_LINE_______NEXT_LINE____    import Data.Char___NEXT_LINE____    ___NEXT_LINE____    main = do___NEXT_LINE____      cs <- getContents___NEXT_LINE____       putStr $ unlines $ map (strip) $ lines cs___NEXT_LINE____    ___NEXT_LINE____    strip = rstrip.lstrip___NEXT_LINE____    ___NEXT_LINE____    lstrip :: String -> String___NEXT_LINE____    lstrip = dropWhile (isSpace)___NEXT_LINE____    ___NEXT_LINE____    rstrip :: String -> String___NEXT_LINE____    rstrip = reverse.lstrip.reverse,jp,2,2014-10-27 21:44:26,2014-10-29 15:37:24,
7,Hello world!,Hello world___NEXT_LINE_______NEXT_LINE____    #include<stdio.h>___NEXT_LINE____    ___NEXT_LINE____      int main()___NEXT_LINE____     {___NEXT_LINE____     printf("hello world!");___NEXT_LINE____     return 0;___NEXT_LINE____     },jp,3,2014-10-28 10:56:00,2014-10-28 10:56:28,
8,Hello World!!,「Hello World!!」を出力する，C++のコードです。___NEXT_LINE_______NEXT_LINE____    #include <iostream>___NEXT_LINE____     using namespace std;___NEXT_LINE____     int main(void){___NEXT_LINE____     cout << "Hello World!!\n";___NEXT_LINE____     return 0;___NEXT_LINE____     }___NEXT_LINE____あるいは___NEXT_LINE_______NEXT_LINE____    #include <iostream>___NEXT_LINE____    int main(void){___NEXT_LINE____    std::cout << "Hello World!!";___NEXT_LINE____    return 0;___NEXT_LINE____    },jp,4,2014-10-28 11:13:59,2014-11-10 09:19:14,
10,数字を文字として並べたときの、n番目の要素,無限の数値のリストを文字列にして結合し、n番目を返す___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    main = putStrLn $ show $ decimalDigit 10___NEXT_LINE____    ___NEXT_LINE____    decimalDigit = (!!) $ concatMap (show) [0,1..]___NEXT_LINE____    ___NEXT_LINE____,jp,2,2014-10-29 14:14:01,2014-10-29 14:14:01,
11,Git Stashの使い方,git stashはGitコミットの一時的に保管する機能です。branchの切り替えの時よく使う機能です。___NEXT_LINE_______NEXT_LINE____保管する場合は___NEXT_LINE_______NEXT_LINE____    git stash ___NEXT_LINE_______NEXT_LINE____保管したものをリリースする場合は___NEXT_LINE_______NEXT_LINE____    git stash pop,jp,1,2014-10-29 15:27:10,2014-10-29 15:27:10,
12,C++からFortranのサブルーチンを呼び出す,Fortranにしかライブラリが存在しない場合（LAPACKなど）に，活用してください。___NEXT_LINE_______NEXT_LINE____まず，Fortranでサブルーチンを組みます(test_f.f90)。___NEXT_LINE_______NEXT_LINE____    subroutine sumsum( a, b)___NEXT_LINE____        integer a___NEXT_LINE____        double precision b___NEXT_LINE____        a = a + 5___NEXT_LINE____        b = b * 5.0d0___NEXT_LINE____        return___NEXT_LINE____    end subroutine sumsum___NEXT_LINE____そして，C++から呼び出します(test.cpp)。___NEXT_LINE_______NEXT_LINE____    #include <iostream>___NEXT_LINE____    using namespace std;___NEXT_LINE____    extern "C" void sumsum_( int *a, double *b);___NEXT_LINE____    int main() {___NEXT_LINE____        int a = 100;___NEXT_LINE____        double b = 5.0;___NEXT_LINE____        cout << "(int)a:100 b:5.0:";___NEXT_LINE____        sumsum_( &a, &b);___NEXT_LINE____        cout << "a+=5,   b*=5.0";___NEXT_LINE____        cout << a << '\t' << b;___NEXT_LINE____        return 0;___NEXT_LINE____    }___NEXT_LINE____コンパイルの際に，ターミナルで___NEXT_LINE_______NEXT_LINE____    g++ test.cpp test_f.f90___NEXT_LINE_______NEXT_LINE____と打てば，実行ファイルが生成されます。___NEXT_LINE_______NEXT_LINE____追記：一部のMacではコンパイルできないようです。原因不明。,jp,4,2014-10-30 15:49:10,2014-11-06 16:06:20,
14,DateTimeにより時間差の取得,時間の差を出したい時に使うコード___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____   private function convertToUserView($timestamp){___NEXT_LINE____     $d1 = new DateTime($timestamp);___NEXT_LINE____     $n = new DateTime("now");___NEXT_LINE____       $diff = $d1->diff($n);___NEXT_LINE_______NEXT_LINE____      if($diff->y > 0) { ___NEXT_LINE____         return $diff->format("%y年前");___NEXT_LINE____       } ___NEXT_LINE____      if($diff->m > 0) { ___NEXT_LINE____         return $diff->format("%m月前");___NEXT_LINE____       } ___NEXT_LINE____      if($diff->d > 0) { ___NEXT_LINE____         return $diff->format("%d日前");___NEXT_LINE____       } ___NEXT_LINE____      if($diff->h > 0) { ___NEXT_LINE____         return $diff->format("%h時間前");___NEXT_LINE____      } ___NEXT_LINE____      if($diff->i > 0) { ___NEXT_LINE____         return $diff->format("%i分前");___NEXT_LINE____       } ___NEXT_LINE____      ___NEXT_LINE____        return "１分前";___NEXT_LINE____   }___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE____[DateIntervalのDocs](http://php.net/manual/en/dateinterval.format.php),jp,1,2014-11-01 14:26:36,2014-11-01 14:26:36,
15,Git ブランチの基本操作,Checkoutする先にブランチが存在しなければブランチ作成を作成___NEXT_LINE_______NEXT_LINE____    git checkout -b new_branch___NEXT_LINE_______NEXT_LINE____ブランチ名を変更___NEXT_LINE____```___NEXT_LINE____git branch -m new_current_branch_name___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____Branchを削除___NEXT_LINE_______NEXT_LINE____    git branch -D my_branch_to_delete,jp,1,2014-11-01 15:37:54,2015-05-11 09:33:01,
16,前回のコミットメーセッジを編集,前回にコミットしたメーセッジを編集する場合は___NEXT_LINE_______NEXT_LINE____     git commit --amend -m "新しいメーセッジ",jp,1,2014-11-01 15:40:05,2014-11-01 15:40:05,
17,screenコマンドの使い方,___NEXT_LINE____    ls /dev/cu.*___NEXT_LINE____    screen [device_path] [baudrate]___NEXT_LINE____    ___NEXT_LINE____    ___NEXT_LINE____メモ:___NEXT_LINE_______NEXT_LINE____--コマンド___NEXT_LINE_______NEXT_LINE____Ctrl+a->b:ブレーク送信___NEXT_LINE_______NEXT_LINE____Ctrl+a->k or \ or ':quit' 終了___NEXT_LINE_______NEXT_LINE____Ctrl+a->d:デタッチ___NEXT_LINE_______NEXT_LINE____screen -r でリタッチ___NEXT_LINE_______NEXT_LINE____--よく使うエスケープシーケンスは___NEXT_LINE_______NEXT_LINE____カーソル位置 \e[0;0H___NEXT_LINE_______NEXT_LINE____カーソル1行上移動 \e[1A___NEXT_LINE_______NEXT_LINE____カーソル1桁目移動 \e[1G___NEXT_LINE_______NEXT_LINE____行全体消去 \e[2K(0:カーソル位置から/1:カーソル位置まで)___NEXT_LINE_______NEXT_LINE____画面消去 \e[2J___NEXT_LINE____,jp,2,2014-11-02 04:35:41,2014-11-02 04:51:23,
18,C++で計算して、データをgnuplotで描画する。,___NEXT_LINE____    #include <iostream>___NEXT_LINE_______NEXT_LINE____    #include <fstream>___NEXT_LINE____    void mk_graph(char *f);___NEXT_LINE____    using namespace std;___NEXT_LINE____    int main(void){___NEXT_LINE____        ofs ofstream("test.dat");___NEXT_LINE____        for(int i=0;i<10;i++){___NEXT_LINE____            ofs << i << i*2 << endl;___NEXT_LINE____        }___NEXT_LINE____        ofs.close();___NEXT_LINE____        mk_graph("test.dat");___NEXT_LINE____        return 0;___NEXT_LINE____    }___NEXT_LINE____    void mk_graph(char *f){___NEXT_LINE____        FILE *gp;___NEXT_LINE____        gp = popen("gnuplot -persist", "w");___NEXT_LINE____        fprintf(gp, "reset");___NEXT_LINE____        fprintf(gp, "set terminal postscript eps color ");___NEXT_LINE____        fprintf(gp, "set xlabel \"x\"");___NEXT_LINE____        fprintf(gp, "set ylabel \"y\"");___NEXT_LINE____        fprintf(gp, "set grid");___NEXT_LINE____        fprintf(gp, "plot\"%s\" using 1:2 title \"x-y\" ", f);___NEXT_LINE____        pclose(gp);___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____windows環境で行う場合は、___NEXT_LINE_______NEXT_LINE____    popen,pclose -> _popen,_pclose___NEXT_LINE_______NEXT_LINE____とすると、できます。,jp,4,2014-11-04 11:07:16,2014-11-04 11:09:33,
19,test,あ\n___NEXT_LINE____あ,jp,2,2014-11-05 18:19:10,2014-11-05 18:19:10,
20,Gitの使い方,自分用のGitの使い方です。(How to use Git.)___NEXT_LINE_______NEXT_LINE_______NEXT_LINE_______NEXT_LINE____更新されたファイルを持ってくる場合：___NEXT_LINE_______NEXT_LINE____    git pull origin develop___NEXT_LINE____更新したファイルをアップロードする場合：___NEXT_LINE_______NEXT_LINE____    git push origin develop___NEXT_LINE____更新ログを見る場合：___NEXT_LINE_______NEXT_LINE____    git log -a___NEXT_LINE____コミットを追加する場合：___NEXT_LINE_______NEXT_LINE____    git add -A___NEXT_LINE____    git commit -m "comment"___NEXT_LINE____変更点を確認する場合___NEXT_LINE_______NEXT_LINE____    git show commitID //確認するコミットIDを打ってください。___NEXT_LINE____消す場合___NEXT_LINE_______NEXT_LINE____    git reset --hard commitID,jp,4,2014-11-06 20:23:35,2014-11-06 20:23:38,
21,文字列から数字だけを取得する（数字抽出）。,文字列の末尾に___NEXT_LINE_______NEXT_LINE____    .match(/\d/g).join("");___NEXT_LINE_______NEXT_LINE____と付ければ，数字を抽出することができます。___NEXT_LINE_______NEXT_LINE____例） "100px"というデータから"100"という数字を抽出したい場合：___NEXT_LINE_______NEXT_LINE____    var test = element.style.top;               //このデータが"100px"だとする___NEXT_LINE____    var num = test.match(/\d/g).join("");    //"100px"から数字だけを抽出する___NEXT_LINE____    console.log(num);                               //"100"が出力されます___NEXT_LINE_______NEXT_LINE____その他，javascriptで利用できる正規表現は各自調べてください。___NEXT_LINE_______NEXT_LINE____参考URL:___NEXT_LINE_______NEXT_LINE____http://yut.hatenablog.com/entry/20110305/1299318337,jp,4,2014-11-07 15:55:17,2014-11-12 17:27:35,
22,SwiftMailerでSMTPメール送信,LaravelフレームワークはSwiftMailerを利用しているため、すでにインストールされています。___NEXT_LINE_______NEXT_LINE____    $transport = Swift_SmtpTransport::newInstance(Config::get('mail.host'), Config::get('mail.port'), Config::get('mail.encryption'))___NEXT_LINE____          ->setUsername(Config::get('mail.username'))___NEXT_LINE____          ->setPassword(Config::get('mail.password'));___NEXT_LINE____    ___NEXT_LINE____    $mailer = Swift_Mailer::newInstance($transport);___NEXT_LINE____    $message = Swift_Message::newInstance($subject)___NEXT_LINE____        ->setContentType('text/plain')___NEXT_LINE____        ->setFrom(array($from => $from_name))___NEXT_LINE____        ->setTo(array( $to => $to_name))___NEXT_LINE____        ->setReplyTo(array( $to => $to_name ))___NEXT_LINE____        ->setBody($content);___NEXT_LINE____    ___NEXT_LINE____    // 返信先___NEXT_LINE____    $message->getHeaders()->addTextHeader("In-Reply-To",$reply_message_id);___NEXT_LINE____    $message->getHeaders()->addTextHeader("References",$reply_references);___NEXT_LINE____    ___NEXT_LINE____    // 文字コードを設定___NEXT_LINE____    $type = $message->getHeaders()->get('Content-Type');___NEXT_LINE____    $type->setValue('text/plain');___NEXT_LINE____    $type->setParameter('charset', 'UTF-8');___NEXT_LINE____    ___NEXT_LINE____    $message_id = $message->getHeaders()->get('Message-ID')->getFieldBody();___NEXT_LINE____    ___NEXT_LINE____    ___NEXT_LINE____    $result = $mailer->send($message);,jp,1,2014-11-07 16:31:50,2014-11-07 16:31:50,
23,MySQL Joins,INNER JOIN, LEFT JOIN, RIGHT JOINなどの使い方を図で表してくれます。___NEXT_LINE_______NEXT_LINE____![alt text](http://www.codeproject.com/KB/database/Visual_SQL_Joins/Visual_SQL_JOINS_orig.jpg)___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____**参考サイト**___NEXT_LINE_______NEXT_LINE____[http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins](http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins),jp,1,2014-11-07 19:55:56,2014-11-07 19:55:56,
24,Shell Scriptのforeach,セルスクリプトで配列の中身をiterateするforeachの書き方___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    params=( 0 4 12 20 )___NEXT_LINE____    for i in ${params[@]}___NEXT_LINE____    do___NEXT_LINE____        echo ${i}     ___NEXT_LINE____    done___NEXT_LINE____    ___NEXT_LINE____実行結果___NEXT_LINE_______NEXT_LINE____    0___NEXT_LINE____    4___NEXT_LINE____    12___NEXT_LINE____    20___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____ただし、shell scriptはスペースに非常に敏感なので、スペースの抜けを十分注意を払うこと,jp,1,2014-11-08 14:02:42,2014-11-08 14:02:42,
25,入力のイライラ解消(アルファベット/ローマ字),ローマ字/アルファベット入力を間違えたまま入力してもデリート連打練習にならない方法。\n___NEXT_LINE____例えばexampleを打ちたくて「えぁんｐれ」となった時は___NEXT_LINE____Windowsの場合___NEXT_LINE_______NEXT_LINE____    Shift+無変換キー___NEXT_LINE____    or___NEXT_LINE____    F10___NEXT_LINE_______NEXT_LINE____Macの場合は___NEXT_LINE_______NEXT_LINE____    英数キー２回押し___NEXT_LINE____    or___NEXT_LINE____    F10 (環境によってはFn+F10)___NEXT_LINE____で可能\n___NEXT_LINE____これでイライラ解消！みんなのキーボード入力の時間が無駄にならない！！,jp,2,2014-11-08 16:35:59,2014-11-08 16:35:59,
27,起動時に実行されるスクリプトを作成(for Ubuntu),Ubuntuの起動時にスクリプトを実行したいときは，ターミナルにて___NEXT_LINE_______NEXT_LINE____    sudo gedit /etc/rc.local___NEXT_LINE_______NEXT_LINE____と打ち，rc.localの中身にその内容を書くことで出来ます。___NEXT_LINE_______NEXT_LINE____例えば，起動時に画面のバックライトを設定したいときは（以下の場合は15段階中8の輝度），___NEXT_LINE_______NEXT_LINE____    #!/bin/sh -e___NEXT_LINE____    #___NEXT_LINE____    # rc.local___NEXT_LINE____    #___NEXT_LINE____    # This script is executed at the end of each multiuser runlevel.___NEXT_LINE____    # Make sure that the script will "exit 0" on success or any other___NEXT_LINE____    # value on error.___NEXT_LINE____    #___NEXT_LINE____    # In order to enable or disable this script just change the execution___NEXT_LINE____    # bits.___NEXT_LINE____    #___NEXT_LINE____    # By default this script does nothing.___NEXT_LINE____    ___NEXT_LINE____    exit 0 ___NEXT_LINE____のexit 0の前に，___NEXT_LINE_______NEXT_LINE____    sleep 2___NEXT_LINE____    sudo sh -c "echo '8' > /sys/class/backlight/acpi_video0/brightness"___NEXT_LINE_______NEXT_LINE____を書き加えることで可能です。自分の環境(Ubuntu 14.04 LTS)では無事に実行されました。___NEXT_LINE_______NEXT_LINE____参考サイト：___NEXT_LINE_______NEXT_LINE____http://sukohi.blogspot.jp/2013/10/ubuntu-1304.html___NEXT_LINE_______NEXT_LINE____https://gist.github.com/shunirr/7510857,jp,4,2014-11-12 17:35:31,2014-11-13 18:03:55,
28,Opencvで透明画像と背景画像の合成,透明画像と背景画像を合成する関数___NEXT_LINE_______NEXT_LINE____    void overlayImage(const cv::Mat &background, const cv::Mat &foreground, cv::Mat &output, cv::Point2i location)___NEXT_LINE____    {___NEXT_LINE____      background.copyTo(output);___NEXT_LINE____    ___NEXT_LINE____    ___NEXT_LINE____      // start at the row indicated by location, or at row 0 if location.y is negative.___NEXT_LINE____      for(int y = std::max(location.y , 0); y < background.rows; ++y)___NEXT_LINE____      {___NEXT_LINE____        int fY = y - location.y; // because of the translation___NEXT_LINE____    ___NEXT_LINE____        // we are done of we have processed all rows of the foreground image.___NEXT_LINE____        if(fY >= foreground.rows)___NEXT_LINE____          break;___NEXT_LINE____    ___NEXT_LINE____        // start at the column indicated by location, ___NEXT_LINE____    ___NEXT_LINE____        // or at column 0 if location.x is negative.___NEXT_LINE____        for(int x = std::max(location.x, 0); x < background.cols; ++x)___NEXT_LINE____        {___NEXT_LINE____          int fX = x - location.x; // because of the translation.___NEXT_LINE____    ___NEXT_LINE____          // we are done with this row if the column is outside of the foreground image.___NEXT_LINE____          if(fX >= foreground.cols)___NEXT_LINE____            break;___NEXT_LINE____    ___NEXT_LINE____          // determine the opacity of the foregrond pixel, using its fourth (alpha) channel.___NEXT_LINE____          double opacity =___NEXT_LINE____            ((double)foreground.data[fY * foreground.step + fX * foreground.channels() + 3])___NEXT_LINE____    ___NEXT_LINE____            / 255.;___NEXT_LINE____    ___NEXT_LINE____    ___NEXT_LINE____          // and now combine the background and foreground pixel, using the opacity, ___NEXT_LINE____    ___NEXT_LINE____          // but only if opacity > 0.___NEXT_LINE____          for(int c = 0; opacity > 0 && c < output.channels(); ++c)___NEXT_LINE____          {___NEXT_LINE____            unsigned char foregroundPx =___NEXT_LINE____              foreground.data[fY * foreground.step + fX * foreground.channels() + c];___NEXT_LINE____            unsigned char backgroundPx =___NEXT_LINE____              background.data[y * background.step + x * background.channels() + c];___NEXT_LINE____            output.data[y*output.step + output.channels()*x + c] =___NEXT_LINE____              backgroundPx * (1.-opacity) + foregroundPx * opacity;___NEXT_LINE____          }___NEXT_LINE____        }___NEXT_LINE____      }___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____使用例___NEXT_LINE_______NEXT_LINE____    int main(int argc, char *argv[])___NEXT_LINE____    {___NEXT_LINE____      // add the second parameter "-1" as flag, to make sure the transparancy channel is read!___NEXT_LINE____      cv::Mat foreground = imread("D:/images/foreground.png", -1);___NEXT_LINE____      cv::Mat background = imread("D:/images/background.jpg");___NEXT_LINE____      cv::Mat result;___NEXT_LINE____    ___NEXT_LINE____      overlayImage(background, foreground, result, cv::Point(0,0));___NEXT_LINE____      cv::imshow("result", result);___NEXT_LINE____    },jp,1,2014-11-19 19:54:22,2014-11-19 19:54:22,
29,タイマーで周期的にコールバック　in Windows OS,Windowsで一定時間に関数を呼び出す方法___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    #include <Windows.h>___NEXT_LINE____    #include <stdio.h>___NEXT_LINE____    #include <time.h>___NEXT_LINE____    ___NEXT_LINE____    void CALLBACK TimerProc(HWND hWnd, UINT nMsg, UINT nIDEvent, DWORD dwTime)___NEXT_LINE____    {___NEXT_LINE____       printf("hello\n");___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    int main(int argc, const char *argv[]) {___NEXT_LINE____           ___NEXT_LINE____      // timer___NEXT_LINE____        UINT TimerId = SetTimer(NULL, 0, 1000, &TimerProc); //2000 milliseconds___NEXT_LINE____     if (!TimerId)___NEXT_LINE____           return 0;___NEXT_LINE____    }___NEXT_LINE____,jp,1,2014-11-21 20:54:40,2014-11-21 20:54:40,
30,テキストを挿入,Opencv2のテキスト挿入。**ascii以外の文字は対応しません**。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    std::string backgroundText = "Hello world";  // ascii 以外の文字は対応しません___NEXT_LINE____    int baseline = 0;___NEXT_LINE____    int fontFace = CV_FONT_HERSHEY_DUPLEX;___NEXT_LINE____    double fontScale = 2;___NEXT_LINE____    int thickness = 3;___NEXT_LINE____    Size textSize = getTextSize(backgroundText, fontFace, fontScale, thickness, &baseline);___NEXT_LINE____    Point textPoint(textSize.width,textSize.height);___NEXT_LINE____    putText(background, backgroundText, textPoint, fontFace, fontScale, Scalar::all(255), thickness, 8);___NEXT_LINE____,jp,1,2014-11-22 01:51:00,2014-11-22 01:51:00,
31,リンクから画像を保存する,リンクから画像をダウンロードし、ローカルに保存する___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    $url = 'http://example.com/image.php';___NEXT_LINE____    $img = '/my/folder/flower.gif';___NEXT_LINE____    file_put_contents($img, file_get_contents($url));___NEXT_LINE____,jp,1,2014-11-26 11:26:13,2014-11-26 11:26:13,
32,拡張子を取得,$urlはリンク___NEXT_LINE_______NEXT_LINE____    $ext = pathinfo($url, PATHINFO_EXTENSION);,jp,1,2014-11-26 11:49:23,2014-11-26 11:49:23,
33,画像ファイルをdata:mime_type;base64 形で出力,画像ファイルを`data:mime_type;base64,FSQ24fF#`の形で出力するのにまず画像の拡張子からmime_typeを取得して、ファイルを読み込んでbase64にエンコードする。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    $ext = pathinfo($this->profile_path, PATHINFO_EXTENSION);___NEXT_LINE____    ___NEXT_LINE____    $mime_type = array(___NEXT_LINE____     'png' => 'image/png',___NEXT_LINE____        'jpe' => 'image/jpeg',___NEXT_LINE____        'jpeg' => 'image/jpeg',___NEXT_LINE____        'jpg' => 'image/jpeg',___NEXT_LINE____        'gif' => 'image/gif',___NEXT_LINE____        'bmp' => 'image/bmp',___NEXT_LINE____        'ico' => 'image/vnd.microsoft.icon',___NEXT_LINE____        'tiff' => 'image/tiff',___NEXT_LINE____        'tif' => 'image/tiff',___NEXT_LINE____        'svg' => 'image/svg+xml',___NEXT_LINE____        'svgz' => 'image/svg+xml' );___NEXT_LINE____    ___NEXT_LINE____    $src = "data:".$mime_type[$ext].";base64,".base64_encode(file_get_contents(storage_path().$this->profile_path));___NEXT_LINE____,jp,1,2014-11-26 12:03:27,2014-11-26 12:03:27,
34,MySQLのデータベースをエクスポート・インポート,エクスポート___NEXT_LINE_______NEXT_LINE____     mysqldump -u mysql_user -p DATABASE_NAME > backup.sql___NEXT_LINE_______NEXT_LINE____インポート___NEXT_LINE____    ___NEXT_LINE____      mysql -u mysql_user -p DATABASE < backup.sql___NEXT_LINE_______NEXT_LINE_______NEXT_LINE_______NEXT_LINE____参照リンクはこちらです___NEXT_LINE_______NEXT_LINE____[http://stackoverflow.com/a/7423680/1799322](http://stackoverflow.com/a/7423680/1799322),jp,1,2014-11-29 19:51:58,2014-11-29 19:51:58,
37,Laravelにおけるリレーション,*リレーション：データベースのテーブルの関係。主に1対1、1対多、多対多の三つがある。*___NEXT_LINE_______NEXT_LINE____1対1___NEXT_LINE_______NEXT_LINE____    ・AモデルがBモデルを持つ(hasOne)___NEXT_LINE____   class A extends Eloquent {___NEXT_LINE____      public function B(){___NEXT_LINE____            return $this->hasOne('B');___NEXT_LINE____      }___NEXT_LINE____   }___NEXT_LINE____   ・BモデルがAモデルに属する(belongsTo)___NEXT_LINE____   class B extends Eloquent {___NEXT_LINE____      public function A(){___NEXT_LINE____            return $this->belongsTo('A');___NEXT_LINE____       }___NEXT_LINE____   }___NEXT_LINE____   ___NEXT_LINE____1対多___NEXT_LINE_______NEXT_LINE____ ・Aモデルが沢山のBモデルを持つ(hasMany)___NEXT_LINE____   class A extends Eloquent {___NEXT_LINE____      public function B(){___NEXT_LINE____            return $this->hasMany('Bs');___NEXT_LINE____        }___NEXT_LINE____   }___NEXT_LINE____   ・沢山のBモデルがAモデルに属する(belongsTo)___NEXT_LINE____    class B extends Eloquent {___NEXT_LINE____      public function A(){___NEXT_LINE____            return $this->belongsTo('A');___NEXT_LINE____       }___NEXT_LINE____   }___NEXT_LINE____   ___NEXT_LINE____多対多___NEXT_LINE_______NEXT_LINE____belongsToの引数は順に(相手のモデル、ピボットテーブルC、Aのキー、Bのキー)で、第3，4引数はオーバーライドするため___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    ・沢山のAモデルが沢山のBモデルを持つ（沢山のBモデルが沢山のAモデルに属する）(belongsToMany)___NEXT_LINE____   class A extends Eloquent {___NEXT_LINE____      public function B(){___NEXT_LINE____            return $this->belongsToMany('B', 'C', 'a', 'b');___NEXT_LINE____        }___NEXT_LINE____ ___NEXT_LINE____  },jp,5,2014-11-30 16:11:02,2014-11-30 16:14:37,
38,正確なタイマーWin32API,timeBeginPeriod(1)とtimeEndPeriod(1)が要です。___NEXT_LINE_______NEXT_LINE____これを使うことで時間測定が正確になります。___NEXT_LINE_______NEXT_LINE____副作用としては、消費電力増加、他のプログラムにも迷惑がかかることです。WMPやDxLibは常にこれ使ってます。___NEXT_LINE_______NEXT_LINE____下のソースコードはdoubleとfloatの速度を比較するプログラムです。___NEXT_LINE_______NEXT_LINE____    #include <windows.h>___NEXT_LINE____    #include <stdio.h>___NEXT_LINE____    #include <time.h>___NEXT_LINE____    #ifndef __GNUC_____NEXT_LINE____    # pragma comment(lib, "setupapi.lib")___NEXT_LINE____    # pragma comment(lib, "hid.lib")___NEXT_LINE____    # pragma comment(lib, "winmm.lib")___NEXT_LINE____    #endif___NEXT_LINE____    void floatloop(void){___NEXT_LINE____        int     i;___NEXT_LINE____        float   r = 0.0;___NEXT_LINE____     ___NEXT_LINE____        for (i = 0; i<1000000000; ++i)___NEXT_LINE____            r += (float)0.1;___NEXT_LINE____        printf("r=%g\n", r);___NEXT_LINE____    }___NEXT_LINE____    void doubleloop(void){___NEXT_LINE____        int     i;___NEXT_LINE____        double  r = 0.0;___NEXT_LINE____     ___NEXT_LINE____        for (i = 0; i<1000000000; ++i)___NEXT_LINE____            r += 0.1;___NEXT_LINE____        printf("r=%g\n", r);___NEXT_LINE____    }___NEXT_LINE____    int main(void){___NEXT_LINE____        clock_t startTimef, startTimed, endTimef, endTimed;___NEXT_LINE____        timeBeginPeriod(1);// タイマーの最小精度を1msecにする___NEXT_LINE____        //なんか時間に関するプロセス___NEXT_LINE____        startTimef = clock();___NEXT_LINE____        floatloop();___NEXT_LINE____        endTimef = clock();___NEXT_LINE____     ___NEXT_LINE____        startTimed = clock();___NEXT_LINE____        doubleloop();___NEXT_LINE____        endTimed = clock();___NEXT_LINE____     ___NEXT_LINE____        timeEndPeriod(1);// タイマーの最小精度を戻す___NEXT_LINE____        printf("float:%d\ndouble:%d\n", endTimef - startTimef, endTimed - startTimed);___NEXT_LINE____        printf("float:%lf[sec.]\ndouble:%lf[sec.]\n", (double)(endTimef - startTimef) / CLOCKS_PER_SEC, (double)(endTimed - startTimed) / CLOCKS_PER_SEC);___NEXT_LINE____        return 0;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____参考サイト___NEXT_LINE_______NEXT_LINE____Windows, C++ で処理時間を計測。そしてtimeBeginPeriod()。|涼の成長記録  ___NEXT_LINE____[http://ryo021021.hatenablog.com/entry/2013/10/22/154551](http://ryo021021.hatenablog.com/entry/2013/10/22/154551)___NEXT_LINE_______NEXT_LINE____C言語で キッチンタイマーを作りたいのですが どういう順にやればできるでしょう...|Yahoo!知恵袋  ___NEXT_LINE____[http://detail.chiebukuro.yahoo.co.jp/qa/questiondetail/q12104676477](http://detail.chiebukuro.yahoo.co.jp/qa/questiondetail/q12104676477),jp,7,2014-11-30 19:08:32,2015-04-05 03:47:48,
39,C言語で標準入力から数値を習得,C言語で標準入力から数値を習得するというと普通はscanf関数が用いられますが、気をつけないと改行文字を入力ストリームに残したり（標準入力のバッファクリアの方法に fflush(stdin)や rewind(stdin)を使用する方法は、ANSI規格ではこれらの動作は未定義です。どっかの誰かさん）するくらいならともかく、オーバーフローした時のチェック機構がないという致命的欠陥があります。___NEXT_LINE_______NEXT_LINE____[http://www.kijineko.co.jp/tech/superstitions/buffer-overrun-of-scanf.html](http://www.kijineko.co.jp/tech/superstitions/buffer-overrun-of-scanf.html)___NEXT_LINE_______NEXT_LINE____そのために数値習得に特化した関数を作ります。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____int get_integer_num(const int max, const int min){___NEXT_LINE____    //機能：標準入力を数字に変換する。___NEXT_LINE____    //引数：戻り値の最大値,戻り値の最小値___NEXT_LINE____    //戻り値：入力した数字、エラー時はINT_MIN, EOFのときはEOF___NEXT_LINE____    char s[100];___NEXT_LINE_______NEXT_LINE____    if (NULL == fgets(s, 100, stdin)){___NEXT_LINE____        if (feof(stdin)){//エラーの原因がEOFか切り分け___NEXT_LINE____            return EOF;___NEXT_LINE____        }___NEXT_LINE____        //改行文字が入力を受けた配列にない場合、入力ストリームにごみがある___NEXT_LINE____        size_t i;___NEXT_LINE____        for(i = 0; i < 100 && '\0' == s[i]; i++);//strlenもどき___NEXT_LINE____        if('\n' != s[i - 1]) while(getchar() != '\n');//入力ストリームを掃除___NEXT_LINE____        return INT_MIN;___NEXT_LINE____    }___NEXT_LINE____    if ('\n' == s[0]) return INT_MIN;___NEXT_LINE____    errno = 0;___NEXT_LINE____    const long t = strtol(s, NULL, 10);___NEXT_LINE____    if (0 != errno || t < min || max < t)___NEXT_LINE____        return INT_MIN;___NEXT_LINE____    return (int)t;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____小数を受ける場合は___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____#include<stdlib.h>___NEXT_LINE____#include<limits.h>//in gcc___NEXT_LINE____#include<errno.h>//in gcc___NEXT_LINE____double get_double_num(const double max, const double min){___NEXT_LINE____    //機能：標準入力を数字に変換する。___NEXT_LINE____    //引数：戻り値の最大値,戻り値の最小値___NEXT_LINE____    //戻り値：入力した数字、エラー時は-2, EOFのときはEOF___NEXT_LINE____    char s[200];___NEXT_LINE_______NEXT_LINE____    if (NULL == fgets(s, 200, stdin)){___NEXT_LINE____        if (feof(stdin)){//エラーの原因がEOFか切り分け___NEXT_LINE____            return EOF;___NEXT_LINE____        }___NEXT_LINE____        //改行文字が入力を受けた配列にない場合、入力ストリームにごみがある___NEXT_LINE____        size_t i;___NEXT_LINE____        for(i = 0; i < 100 && '\0' == s[i]; i++);//strlenもどき___NEXT_LINE____        if('\n' != s[i - 1]) while(getchar() != '\n');//入力ストリームを掃除___NEXT_LINE____        return -2;___NEXT_LINE____    }___NEXT_LINE____    errno = 0;___NEXT_LINE____    const double t = strtod(s, NULL);___NEXT_LINE____    if (0 != errno || t < min || max < t)___NEXT_LINE____        return -2;___NEXT_LINE____    return t;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____C++の場合はオーバーロードできるのでstrtol系の関数の部分と引数を書き換えてオーバーロードさせてもいいかもしれません。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<cstdio>___NEXT_LINE____#include<cstdlib>___NEXT_LINE____#include<climits>___NEXT_LINE____#include<cstdint>___NEXT_LINE____#include<cerrno>//in gcc___NEXT_LINE____uint64_t getnum(uint64_t max = UINT64_MAX, uint64_t min = 0){___NEXT_LINE____    //機能：標準入力を数字に変換する。___NEXT_LINE____    //引数：戻り値の型の最大値,戻り値の型の最小値___NEXT_LINE____    //戻り値：入力した数字、エラー時はINT_MIN, EOFのときはEOF___NEXT_LINE____    char s[100];___NEXT_LINE_______NEXT_LINE____    if (NULL == fgets(s, 100, stdin)){___NEXT_LINE____        if (feof(stdin)){//エラーの原因がEOFか切り分け___NEXT_LINE____            return EOF;___NEXT_LINE____        }___NEXT_LINE____        //改行文字が入力を受けた配列にない場合、入力ストリームにごみがある___NEXT_LINE____        size_t i;___NEXT_LINE____        for(i = 0; i < 100 && '\0' == s[i]; i++);//strlenもどき___NEXT_LINE____        if('\n' != s[i - 1]) while(getchar() != '\n');//入力ストリームを掃除___NEXT_LINE____        return INT_MIN;___NEXT_LINE____    }___NEXT_LINE____    errno = 0;___NEXT_LINE____    const auto t = strtoll(s, nullptr, 10);___NEXT_LINE____    if (errno != 0 || t < min || max < t)___NEXT_LINE____     return INT_MIN;___NEXT_LINE____    return t;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____がしかしC++の標準入力系は優秀ですから、lambdaを使って___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <iostream>___NEXT_LINE____int main(){___NEXT_LINE____    const auto in_num = [](){___NEXT_LINE____        int tmp;___NEXT_LINE____        std::cin >> tmp;___NEXT_LINE____        return tmp;___NEXT_LINE____    }();___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____で十分でしょう。MSVCのiostreamの実装は実は上と全く同じことをしています。,jp,7,2014-11-30 19:20:23,2015-06-11 07:43:01,
40,preg_match_all,正規表現___NEXT_LINE_______NEXT_LINE____    preg_match_all($pattern,$string,$output,$flags);___NEXT_LINE_______NEXT_LINE____$pattern="検索したい正規表現のパターン";___NEXT_LINE_______NEXT_LINE____$string="検索対象の文字列";___NEXT_LINE_______NEXT_LINE____$output=array();___NEXT_LINE_______NEXT_LINE____$flags=配列への格納順序の指定;,jp,5,2014-12-01 22:23:37,2014-12-01 22:23:37,
41,累乗の関数,簡単な関数をテスト___NEXT_LINE____ただしnは自然数,kは0以上の整数___NEXT_LINE_______NEXT_LINE____二乗関数___NEXT_LINE_______NEXT_LINE____    int dbl (int n){___NEXT_LINE____          return n*n;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____任意の累乗関数___NEXT_LINE_______NEXT_LINE____    int pow(int n,int k){___NEXT_LINE____     int res=1;___NEXT_LINE____     for(int i=0;i<k;i++) res*=n;___NEXT_LINE____     return res;___NEXT_LINE____    },jp,8,2014-12-02 18:24:54,2014-12-02 18:24:54,
42,干支表示プログラム,ポインタの知識を使い文字列の配列を使っています。___NEXT_LINE____西暦を入れると干支が表示されます。___NEXT_LINE____ ___NEXT_LINE____   ___NEXT_LINE____        #include<stdio.h>___NEXT_LINE____        int main(){___NEXT_LINE____        char* x[]={"ネズミ","ウシ","トラ","ウサギ","タツ","ヘビ","ウマ","ヒツジ","サル","トリ","イヌ","イノシシ"};___NEXT_LINE____        int i;___NEXT_LINE____        scanf("%d",&i);___NEXT_LINE____        printf("%s年\n",*(x+(i-3)%12-1));___NEXT_LINE____        getchar();___NEXT_LINE____  getchar();___NEXT_LINE____        return 0;___NEXT_LINE____        },jp,8,2014-12-02 18:50:13,2014-12-02 18:50:13,
43,C言語でKVSライクなコーディング,C言語で手軽にKVSライクな静的なデータ管理を実装する方法___NEXT_LINE_______NEXT_LINE____パラメータの管理などに適していると思います。___NEXT_LINE_______NEXT_LINE____        #include <stdio.h>___NEXT_LINE____        ___NEXT_LINE____        typedef enum {___NEXT_LINE____            Debug,___NEXT_LINE____          Hard,___NEXT_LINE____           Easy,___NEXT_LINE____           Normal,___NEXT_LINE____         Extreme___NEXT_LINE____        }diff_mode_t;___NEXT_LINE____        ___NEXT_LINE____        typedef enum {___NEXT_LINE____          Apple, Orange, Lemon,Human___NEXT_LINE____        }fruit_t;___NEXT_LINE____        ___NEXT_LINE____        typedef struct {___NEXT_LINE____         const char *label;___NEXT_LINE____          fruit_t fruit;___NEXT_LINE____          double speed;___NEXT_LINE____           int norma;___NEXT_LINE____        }difficulty_t;___NEXT_LINE____        ___NEXT_LINE____        const char *fruit_name[] = {[Apple]="Apple",[Lemon]="Lemon",[Orange]="Orange",[Human]="Human?"};___NEXT_LINE____        difficulty_t diffs[]={___NEXT_LINE____          [Easy]  = {"Easy",Lemon,1.0,5},___NEXT_LINE____         [Normal]    = {"Normal",Lemon,10.0,10},___NEXT_LINE____         [Hard]  = {"Hard",Human,20.0,20},___NEXT_LINE____           [Extreme]   = {"Are you serious?",Human,1e100,100},___NEXT_LINE____         [Debug] = {"Debug",Human,1,10}___NEXT_LINE____        };___NEXT_LINE____        ___NEXT_LINE____        int main(int argc, char *argv[])___NEXT_LINE____        {___NEXT_LINE____           diff_mode_t mode = argc;___NEXT_LINE____            difficulty_t vals = diffs[mode];___NEXT_LINE____            printf("You choice [%s] (speed:%g)\n", vals.label, vals.speed);___NEXT_LINE____         printf("Take %d %s\n", vals.norma, fruit_name[vals.fruit]);___NEXT_LINE____         return 0;___NEXT_LINE____        }___NEXT_LINE____        ___NEXT_LINE____C++などの場合は列挙型からintなどへのキャストは明らかではないので、mainの頭を___NEXT_LINE_______NEXT_LINE____    diff_mode_t mode = static_cast< diff_mode_t >(argc);___NEXT_LINE_______NEXT_LINE____などとしてください。(そのかわりtypedefはしなくても大丈夫です)___NEXT_LINE_______NEXT_LINE____※これは列挙型が0から始まることに頼っているので変にいじると超巨大な配列サイズが確保される可能性があります。___NEXT_LINE____配列宣言のときのインデックス指定があると、順番が異なっていてもいいのであったほうがいいです。,jp,2,2014-12-02 22:40:47,2014-12-03 00:11:56,
44,フラグ管理(列挙型/enum),フラグ管理を列挙型で行うと１つの変数で同じ系統のフラグをまとめて管理できます。___NEXT_LINE_______NEXT_LINE____以下は文字列"xy"などを入力してフラグマスクに応じた文字列を表示します。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    #include <stdio.h>___NEXT_LINE____    ___NEXT_LINE____    #define _BV(X) (1<<X)___NEXT_LINE____    typedef enum {___NEXT_LINE____        None = 0,___NEXT_LINE____       X = _BV(0), Y = _BV(1), Z = _BV(2),___NEXT_LINE____     XY = X|Y, YZ = Y|Z, XZ = X|Z,___NEXT_LINE____       XYZ = X|Y|Z___NEXT_LINE____    }enable_flag_t;___NEXT_LINE____    ___NEXT_LINE____    int get_dimension(enable_flag_t flag){___NEXT_LINE____        switch (flag) {___NEXT_LINE____         case X: case Y: case Z:___NEXT_LINE____             return 1;___NEXT_LINE____           case XY: case YZ: case XZ:___NEXT_LINE____              return 2;___NEXT_LINE____           case XYZ:___NEXT_LINE____               return 3;___NEXT_LINE____           case None: default:___NEXT_LINE____             return 0;___NEXT_LINE____       }___NEXT_LINE____    }___NEXT_LINE____    int main(int argc, char *argv[])___NEXT_LINE____    {___NEXT_LINE____     char str[10];___NEXT_LINE____       enable_flag_t axis = None, mask = YZ;___NEXT_LINE____    ___NEXT_LINE____       scanf("%s",str);___NEXT_LINE____        for (int i=0; str[i]!='\0'; i++) {___NEXT_LINE____          switch (str[i]) {___NEXT_LINE____               case 'x': case 'X':___NEXT_LINE____                 axis |= X; break;___NEXT_LINE____               case 'y': case 'Y':___NEXT_LINE____                 axis |= Y; break;___NEXT_LINE____               case 'z': case 'Z':___NEXT_LINE____                 axis |= Z; break;___NEXT_LINE____           }___NEXT_LINE____       }___NEXT_LINE____    ___NEXT_LINE____       printf("Axis (int)%d -> %d dimension\n", axis, get_dimension(axis));___NEXT_LINE____        if (mask == axis) {___NEXT_LINE____         printf("All Match!\n");___NEXT_LINE____     }else if (mask & axis){___NEXT_LINE____         printf("Partially Match\n");___NEXT_LINE____        }else{___NEXT_LINE____          printf("Not Match\n");___NEXT_LINE____      }___NEXT_LINE____       return 0;___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____列挙型でビットフラグを使うとフラグチェックに論理演算も使えるため非常に便利です。___NEXT_LINE____また、switchcaseとの相性が非常に良く、関数化すればreturnで抜けるのでbreak忘れも行数も減って幸せです。___NEXT_LINE_______NEXT_LINE____※scanfのオーバーフローなどのエラー処理は未実装ですので注意してください。___NEXT_LINE____列挙の名前が衝突しやすいので変更 もしくは、名前空間をうまく使ってください。,jp,2,2014-12-02 23:55:43,2014-12-02 23:55:43,
45,Laravelのtimestampsの日時フォーマット,LaravelのtimestampsフォーマットはCarbonライブラリーに沿って決まっています。___NEXT_LINE_______NEXT_LINE____    Y-m-d H:i:s___NEXT_LINE_______NEXT_LINE____Carbonライブラリーについてはこちらです。___NEXT_LINE____[https://github.com/briannesbitt/Carbon](https://github.com/briannesbitt/Carbon),jp,1,2014-12-04 01:14:26,2014-12-04 01:14:26,
46,getchar乱立防止,getcharを使わないと動きが止まらないということがあります。___NEXT_LINE____これはプログラムは基本止める処理がないと次に進むからです。___NEXT_LINE____簡単な例として以下があります。___NEXT_LINE_______NEXT_LINE____    #include<stdio.h>___NEXT_LINE____    int main(){___NEXT_LINE____     printf("HelloWorld!\n");___NEXT_LINE____        getchar();___NEXT_LINE____      return 0;___NEXT_LINE____    }___NEXT_LINE____このgetcharがないと次のreturn 0で終わってしまいます。そもそもgetcharとは文字の取得ということなので入力待ちしているだけです。特定の時間止める場合はsleepなどを使いましょう。___NEXT_LINE_______NEXT_LINE____次に文字入力する関数scanfを使った例です。___NEXT_LINE_______NEXT_LINE____    #include<stdio.h>___NEXT_LINE____    int main(){___NEXT_LINE____        char c[16];___NEXT_LINE____     printf("what's your name?\n");___NEXT_LINE____      scanf("%s",c);___NEXT_LINE____      printf("%s! nice to meet you!",c);___NEXT_LINE____      getchar();___NEXT_LINE____      getchar();  ___NEXT_LINE____        return 0;___NEXT_LINE____    }___NEXT_LINE____これは相手の名前を返すものですが、getcharが2つ必要になってしまいます。これはscanfを使うことによって文字入力を受け付けるのですが、enterキーを押して入力が終わったときに改行文字が残ってしまうかららしいです。今回はまだよいのですが、ループでscanfを使う場合はその使った回数だけgetcharを書く必要があります。___NEXT_LINE_______NEXT_LINE____そこでgetcharをscanfの直後に書くのも良いのですが。文字入力待ちまでにその都度getcharを書くのももったいないです。そこでrewind(stdin)を使います。rewindは引数内をクリアすることができ、改行が残りません。それを止めたいgetchar前に一回書くだけでよくなります。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    #include<stdio.h>___NEXT_LINE____    int main(){___NEXT_LINE____     char c[14];___NEXT_LINE____     printf("名前はなんていうの？\n");___NEXT_LINE____     scanf("%s",c);___NEXT_LINE____      ___NEXT_LINE____        for(int i=0;i<4;i++){___NEXT_LINE____       printf("何だって?");___NEXT_LINE____        scanf("%s",c);___NEXT_LINE____      }___NEXT_LINE____    ___NEXT_LINE____       printf("%s!よろしくね!",c);___NEXT_LINE____      rewind(stdin);___NEXT_LINE____      getchar();___NEXT_LINE____      ___NEXT_LINE____        return 0;___NEXT_LINE____    },jp,8,2014-12-04 12:19:58,2014-12-04 12:19:58,
47,.coffeeファイルのコンパイルコマンド,コンパイルしたいファイルを監視するコマンドを実行するときは以下を実行します：___NEXT_LINE_______NEXT_LINE____    coffee -o js/  -w coffee/___NEXT_LINE_______NEXT_LINE____実行するとcoffee/内のファイルが変更されたら再コンパイルしてjs/に出力します___NEXT_LINE_______NEXT_LINE____詳細は coffee -h または　http://memo.sappari.org/coffeescript/coffee-command___NEXT_LINE____　を参照してください,jp,6,2014-12-04 21:21:32,2014-12-04 21:21:32,
48,高速な累乗計算関数の自作,単純な累乗計算より、この方法の方がO(n)→O(log2(n))になるから速いらしい。そもそもmath.h使え、とか車輪の再発明するな、とかは置いといて。___NEXT_LINE_______NEXT_LINE____    int pow_kai(int _x, int _n)___NEXT_LINE____    {___NEXT_LINE____       int ret = 1;___NEXT_LINE____        while(0 < _n)___NEXT_LINE____       {___NEXT_LINE____           if((_n % 2) == 0)___NEXT_LINE____           {___NEXT_LINE____               _x *= _x;___NEXT_LINE____               _n >>= 1;___NEXT_LINE____           }___NEXT_LINE____           else___NEXT_LINE____            {___NEXT_LINE____               ret *= _x;___NEXT_LINE____              --_n;___NEXT_LINE____           }___NEXT_LINE____       }___NEXT_LINE____       return ret;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____な感じ。単純な実装が___NEXT_LINE_______NEXT_LINE____    int pow(const int n, const int k){___NEXT_LINE____     int res=1;___NEXT_LINE____     for(int i=0;i<k;i++) res*=n;___NEXT_LINE____     return res;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____だけどこれより速いらしい。,jp,7,2014-12-05 04:11:41,2014-12-05 04:11:41,
49,Gitで指定したファイルを管理下から外す,## ファイルを管理下から外す___NEXT_LINE_______NEXT_LINE____コミット後もコミット前も同じコマンドで管理下から外すことができます。___NEXT_LINE_______NEXT_LINE____例えばテストディレクトリや、キャッシュファイルがごっそり置かれるようなディレクトリやファイルはバージョン管理下に置きたくありません。___NEXT_LINE_______NEXT_LINE____    git rm --cached [ファイル名],jp,9,2014-12-05 13:52:48,2014-12-05 13:52:48,
50,git remote情報の閲覧と編集,remoteの情報を閲覧___NEXT_LINE____    ___NEXT_LINE____    git remote -v___NEXT_LINE_______NEXT_LINE____remoteの情報を編集___NEXT_LINE_______NEXT_LINE____    git remote set-url origin https://github.com/USERNAME/REPOSITORY_2.git,jp,1,2014-12-06 12:22:21,2014-12-06 12:22:21,
51,laravelプロジェクトのtravis.ymlサンプル,Laravelプロジェクトでtravis ciを利用する際に、まずprojectのルートで.travis.ymlというファイルを作成し、中身は次になります。___NEXT_LINE_______NEXT_LINE____    language: php___NEXT_LINE____    php:___NEXT_LINE____      - 5.4___NEXT_LINE____      - 5.5___NEXT_LINE____      - 5.6___NEXT_LINE____      - hhvm___NEXT_LINE____    ___NEXT_LINE____    before_script:___NEXT_LINE____      - composer self-update___NEXT_LINE____      - composer install___NEXT_LINE____      - chmod -R 777 app/storage___NEXT_LINE____    ___NEXT_LINE____    script:___NEXT_LINE____      - phpunit,jp,1,2014-12-07 20:07:26,2014-12-07 20:07:26,
52,C言語で多次元配列の動的確保,C言語はC99から多次元配列の動的確保をサポートしましたが、ヒープから大量に確保したい場合に(free()1回で解放,人間が)使いやすい多次元配列のようなものを確保する関数を作ってみました。___NEXT_LINE____ ___NEXT_LINE____ 関数は(可変引数マクロが使えないときは関数本体を使用)___NEXT_LINE____ ___NEXT_LINE____ void *malloc_e(型名 , 次元数 , ..各次元..)/*double[15][10][5]なら(double, 3, 15,10,5)*/___NEXT_LINE____void *malloc_a(型名 , 次元数 , 各次元の要素数int配列)___NEXT_LINE_______NEXT_LINE____*使い方*___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    double **********array = malloc_e(double, 10, 2,2,2,2,2,2,2,2,2,2);___NEXT_LINE____    if(NULL == array) exit(EXIT_FAILURE);___NEXT_LINE____    array[0][0][0][0][0][0][0][0][0][0] = 100.0;___NEXT_LINE____    free(array);___NEXT_LINE____    ___NEXT_LINE____で使えます。型のサイズがsizeofで取得できるものなら構造体なども確保できます。___NEXT_LINE____(malloc\_e()とmalloc\_a()とは要素数の渡し方が異なるだけで、主な実装はmalloc_ArrayExtension()です。)___NEXT_LINE_______NEXT_LINE____*malloc_ex.h(ヘッダー)*___NEXT_LINE_______NEXT_LINE____    #include <stdlib.h> /* for using free()*/___NEXT_LINE____    #include <stddef.h> /* for size_t*/___NEXT_LINE____    #define malloc_e(S,D,...) malloc_Extension( sizeof(S),  D, __VA_ARGS__)___NEXT_LINE____    void *malloc_Extension(const size_t , const size_t ,...);___NEXT_LINE____    ___NEXT_LINE____    #define malloc_a(S,D,X) malloc_ArrayExtension(sizeof(S),D,X)___NEXT_LINE____    void *malloc_ArrayExtension(const size_t, const size_t,const int *const);___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE____*malloc_ex.c(実装)*___NEXT_LINE_______NEXT_LINE____    #include <stdarg.h>___NEXT_LINE____    #include "malloc_ex.h"___NEXT_LINE____    ___NEXT_LINE____    static void attach(void **const source, size_t d, const int *const dims,size_t size,size_t n)___NEXT_LINE____    {___NEXT_LINE____     int i;___NEXT_LINE____      size_t block;___NEXT_LINE____       size_t shift;___NEXT_LINE____       char **a;___NEXT_LINE____       char *b;___NEXT_LINE____        ___NEXT_LINE____        n *= *dims;___NEXT_LINE____     block = (2==d)?size:sizeof(void*);___NEXT_LINE____      shift = dims[1]*block;___NEXT_LINE____      a = (char**)source;___NEXT_LINE____     b = (char*)(source+n);___NEXT_LINE____      ___NEXT_LINE____        for (i=0; i<n; i++) {___NEXT_LINE____           a[i] = b;___NEXT_LINE____           b += shift;___NEXT_LINE____     }___NEXT_LINE____       ___NEXT_LINE____        if (2<d) {___NEXT_LINE____          attach(*source, d-1, dims+1, size, n);___NEXT_LINE____      }___NEXT_LINE____       return;___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    void *malloc_ArrayExtension(const size_t size, const size_t d, const int *const ds)___NEXT_LINE____    {___NEXT_LINE____        ___NEXT_LINE____        int i,j;___NEXT_LINE____        size_t alloc_size,temp;___NEXT_LINE____     void *a;___NEXT_LINE____        ___NEXT_LINE____        /* return */___NEXT_LINE____        if (0==d)___NEXT_LINE____           return malloc(size);___NEXT_LINE____        else if (1==d)___NEXT_LINE____          return malloc(size * *ds);___NEXT_LINE____      for (i=0; i<d; i++)___NEXT_LINE____         if (0==ds[i])___NEXT_LINE____               return NULL;___NEXT_LINE____        ___NEXT_LINE____        /* alloc_size */___NEXT_LINE____        alloc_size=0;___NEXT_LINE____       for (i=0; i<d; i++) {___NEXT_LINE____           temp = 1;___NEXT_LINE____           for (j=0; j<=i; j++)___NEXT_LINE____                temp *= ds[j];___NEXT_LINE____          temp *= ((d-1==i)?size:sizeof(void*));___NEXT_LINE____          alloc_size += temp;___NEXT_LINE____     }___NEXT_LINE____       ___NEXT_LINE____        /* malloc */___NEXT_LINE____        a = malloc(alloc_size);___NEXT_LINE____     if ( NULL!=a ) {___NEXT_LINE____            attach(a, d, ds, size, 1);___NEXT_LINE____      }___NEXT_LINE____       return a;___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    #ifndef alloca___NEXT_LINE____    #define AVAILABLE_MALLOC_DIMENSION (20)___NEXT_LINE____    #endif___NEXT_LINE____    void *malloc_Extension(const size_t size, const size_t dimension,...)___NEXT_LINE____    {___NEXT_LINE____     int i;___NEXT_LINE____      va_list list;___NEXT_LINE____    #ifdef alloca___NEXT_LINE____      int *length;___NEXT_LINE____        length = alloca(sizeof(int)*dimension);___NEXT_LINE____    #else___NEXT_LINE____        int length[AVAILABLE_MALLOC_DIMENSION];___NEXT_LINE____     if (AVAILABLE_MALLOC_DIMENSION < dimension)___NEXT_LINE____         return NULL;___NEXT_LINE____    #endif___NEXT_LINE____      ___NEXT_LINE____        va_start(list, dimension);___NEXT_LINE____      for (i = 0; i < dimension; i++)___NEXT_LINE____         length[i]= va_arg(list, int);___NEXT_LINE____       va_end(list);___NEXT_LINE____       return malloc_ArrayExtension(size, dimension,length);___NEXT_LINE____    }___NEXT_LINE____    #undef AVAILABLE_MALLOC_DIMENSION___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____※allocaを使用する環境の場合は気をつけてください。___NEXT_LINE_______NEXT_LINE____"メリット" : ヒープから確保できる + 人間が分かりやすい + 解放が1回で済む。ポインタを芋づる式にアクセスするだけなので外部関数に渡すときに少し楽。___NEXT_LINE_______NEXT_LINE____"デメリット" : 無駄に確保されるメモリが多い(芋づるは芋より長い)___NEXT_LINE_______NEXT_LINE____速度的にはmalloc一発でインデックス操作を工夫する(乗算計算のアクセス)に比べて確保、アクセスともにほんの少し遅いです。(「int[50][50][50][50][50]確保+全要素2回アクセス(代入とチェック)+解放」でCore2Duo/2.5GHz,8GB(1067MHzDDR3)OSXYosemite,で8sと7.7sで0.3s遅い)___NEXT_LINE_______NEXT_LINE____※gcc4.8.2(ubuntu14.04_64bit)とOSX10.9にて、-std=c11/-std=c99 -pedantic/-ansiで動作確認しましたが、保証はありません。,jp,2,2014-12-09 19:37:04,2014-12-10 13:24:39,
53,HTML5のシンプルテンプレート,最低限に必要なHTML___NEXT_LINE_______NEXT_LINE____    <!doctype html>___NEXT_LINE____    <html lang="jp">___NEXT_LINE____    <head>___NEXT_LINE____      <meta charset="utf-8">___NEXT_LINE____      <title></title>___NEXT_LINE____      <meta name="description" content="">___NEXT_LINE____    </head>___NEXT_LINE____    ___NEXT_LINE____    <body>___NEXT_LINE____      ___NEXT_LINE____    </body>___NEXT_LINE____    </html>___NEXT_LINE____,jp,1,2014-12-10 18:04:46,2014-12-10 18:04:46,
54,CSSのフルスクリーン,___NEXT_LINE____    html, body {___NEXT_LINE____     min-width: 100%;___NEXT_LINE____        height: 100%;___NEXT_LINE____       min-height: 100%;___NEXT_LINE____    }___NEXT_LINE____,jp,1,2014-12-10 18:09:06,2014-12-10 18:09:06,
55,モバイル端末用のviewport,モバイルブラウザでフルスクリーンや縮小拡大しないようなviewportになります___NEXT_LINE_______NEXT_LINE____      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0,user-scalable=no">,jp,1,2014-12-10 18:16:19,2014-12-10 18:16:19,
56,mbedデバッグマクロ,mbedのC++言語のprintfデバックマクロ___NEXT_LINE_______NEXT_LINE____    #define DEBUG_LEVEL 0___NEXT_LINE____    #define VT100_ESCAPE_ENABLE 1___NEXT_LINE____    ___NEXT_LINE____    #if VT100_ESCAPE_ENABLE___NEXT_LINE____    # define VT_GREEN "\e[32m"___NEXT_LINE____    # define VT_RED "\e[31m"___NEXT_LINE____    # define VT_BLUE "\e[33m"___NEXT_LINE____    # define VT_DEFAULT "\e[0m"___NEXT_LINE____    #else___NEXT_LINE____    # define VT_GREEN___NEXT_LINE____    # define VT_RED___NEXT_LINE____    # define VT_BLUE___NEXT_LINE____    # define VT_DEFAULT___NEXT_LINE____    #endif___NEXT_LINE____    ___NEXT_LINE____    #if DEBUG_LEVEL >= 3___NEXT_LINE____    # define log_debug(fmt, ...) std::printf("[%s: DBG]"fmt"\r\n", __func__,##__VA_ARGS__);___NEXT_LINE____    #elif DEBUG_LEVEL >= 2___NEXT_LINE____    # define log_info(fmt, ...)  std::printf("[%s: INFO]"fmt"\r\n", __func__, ##__VA_ARGS__);___NEXT_LINE____    #elif DEBUG_LEVEL >= 1___NEXT_LINE____    # define log_info(fmt, ...)  std::printf("[%s: INFO]"VT_GREEN fmt VT_DEFAULT"\r\n", __func__, ##__VA_ARGS__);___NEXT_LINE____    # define log_error(fmt, ...) std::printf("[%s: ERROR@line:%d]"VT_RED fmt VT_DEFAULT"\r\n",__func__,__LINE__, ##__VA_ARGS__);___NEXT_LINE____    #endif___NEXT_LINE____    ___NEXT_LINE____    #ifndef log_debug___NEXT_LINE____    # define log_debug(x, ...)___NEXT_LINE____    #endif___NEXT_LINE____    #ifndef log_info___NEXT_LINE____    # define log_info(x, ...)___NEXT_LINE____    #endif___NEXT_LINE____    #ifndef log_error___NEXT_LINE____    # define log_error(x, ...)___NEXT_LINE____    #endif___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____DEBUG_LEVELはデバックレベル(log、info、error)を0,1,2,3で___NEXT_LINE____VT100_ESCAPE_ENABLEはVT100の制御シーケンスが使える環境の場合は色を変化を___NEXT_LINE____printfデバッグは手軽なので…,jp,2,2014-12-10 23:28:52,2014-12-10 23:28:52,
58,printfで任意変数を2進数表示,フラグの中身やレジスタの値を2進数で見たいとき___NEXT_LINE_______NEXT_LINE____printf標準フォーマットでは見られない値(特殊な浮動小数型など)を見たいとき___NEXT_LINE_______NEXT_LINE____2進数に変換した文字列の先頭ポインタを返す関数___NEXT_LINE_______NEXT_LINE____    #include <stdlib.h>/* define NULL*/___NEXT_LINE____    #include <limits.h>/* define CHAR_BIT*/___NEXT_LINE____    #include <stdint.h>/* typedef uintxx_t*/___NEXT_LINE____    ___NEXT_LINE____    template <typename T, typename U>___NEXT_LINE____    static void _print_binary(T val,char *buff)___NEXT_LINE____    {___NEXT_LINE____      union sam_t {U tar;T value;}temp;___NEXT_LINE____       temp.value = val;___NEXT_LINE____       int shift = (CHAR_BIT*sizeof(T)-1);___NEXT_LINE____     int i;___NEXT_LINE____      U v;___NEXT_LINE____        for (i=0,v = (U)1<<shift; v!=0; v>>=1,i++) {___NEXT_LINE____            buff[i] = (v&temp.tar)?'1':'0';___NEXT_LINE____     }___NEXT_LINE____       buff[i] = '\0';___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    char binary_buff[CHAR_BIT*sizeof(uintmax_t)+1];___NEXT_LINE____    template <typename T>___NEXT_LINE____    char *sbinary(T value,char *buff=NULL)___NEXT_LINE____    {___NEXT_LINE____     char *temp = (NULL==buff)?binary_buff:buff;___NEXT_LINE____     switch (sizeof(T)) {___NEXT_LINE____            case sizeof(uint8_t):{___NEXT_LINE____              _print_binary<T,uint8_t>(value,temp);___NEXT_LINE____               break;___NEXT_LINE____          }___NEXT_LINE____           case sizeof(uint16_t):{___NEXT_LINE____             _print_binary<T,uint16_t>(value,temp);___NEXT_LINE____              break;___NEXT_LINE____          }___NEXT_LINE____           case sizeof(uint32_t):{___NEXT_LINE____             _print_binary<T,uint32_t>(value,temp);___NEXT_LINE____              break;___NEXT_LINE____          }___NEXT_LINE____           case sizeof(uint64_t):{___NEXT_LINE____             _print_binary<T,uint64_t>(value,temp);___NEXT_LINE____              break;___NEXT_LINE____          }___NEXT_LINE____           default:___NEXT_LINE____                *temp = '\0';___NEXT_LINE____               break;___NEXT_LINE____      }___NEXT_LINE____       return temp;___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____使い方  3通り___NEXT_LINE_______NEXT_LINE____       int integer = 0xAAAA;___NEXT_LINE____       char buff[64+1];___NEXT_LINE____        sbinary(++integer,buff);___NEXT_LINE____        printf("%s\n",buff);___NEXT_LINE____        printf("%s\n",sbinary(++integer,buff));___NEXT_LINE____     printf("%s\n",sbinary(++integer));,jp,2,2014-12-11 19:43:41,2014-12-11 19:44:04,
59,MySQLクエリでデータベースの新規、ユーザの作成、権限の追加,データベースの新規___NEXT_LINE_______NEXT_LINE____    create database <MYDATABASE> character set utf8 collate utf8_general_ci;___NEXT_LINE_______NEXT_LINE____MySQLユーザの作成___NEXT_LINE_______NEXT_LINE____    create user <MYUSER>@localhost identified by <MY_PW>;___NEXT_LINE_______NEXT_LINE____ユーザにデータベースの権限を与え___NEXT_LINE_______NEXT_LINE____    grant all privileges on <MYDATABASE>.* to <MYUSER>@localhost identified by <MY_PW>;,jp,1,2014-12-12 20:28:26,2014-12-12 20:28:26,
60,CSSとHTMLでタブの作成,CSS___NEXT_LINE_______NEXT_LINE____    .tabs {___NEXT_LINE____        display: table;___NEXT_LINE____    }___NEXT_LINE____    .tabs li {___NEXT_LINE____      width: 55px;___NEXT_LINE____        height: 43px;___NEXT_LINE____       display: table-cell;___NEXT_LINE____        text-align: center;___NEXT_LINE____     vertical-align: middle;___NEXT_LINE____     word-wrap: break-word;___NEXT_LINE____      padding: 0 10px;___NEXT_LINE____        font-weight: bold;___NEXT_LINE____    }___NEXT_LINE____    .tabs li p{___NEXT_LINE____      font-size: 12px;___NEXT_LINE____        display: block;___NEXT_LINE____    }___NEXT_LINE____    .tabs li.selected {___NEXT_LINE____     background-color: white;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____HTML___NEXT_LINE_______NEXT_LINE____    <ul class="tabs">___NEXT_LINE____        <li class="tab selected"><p>フリーワード</p></li>___NEXT_LINE____        <li class="tab"><p>駅名</p></li>___NEXT_LINE____        <li class="tab"><p>路線</p></li>___NEXT_LINE____        <li class="tab"><p>現在地</p></li>___NEXT_LINE____    </ul>___NEXT_LINE____,jp,1,2014-12-13 11:29:33,2014-12-13 11:29:33,
61,Unixで環境変数の設定,OS XやUnix環境で例として、`~/opt/bin`を環境変数に追加した場合は___NEXT_LINE_______NEXT_LINE____    PATH=$PATH:~/opt/bin___NEXT_LINE____    export PATH___NEXT_LINE_______NEXT_LINE____表示___NEXT_LINE____   ___NEXT_LINE____    echo $PATH___NEXT_LINE_______NEXT_LINE____削除の場合は___NEXT_LINE_______NEXT_LINE____    1. 標準な方法がないので、正しいPATHをコピーして___NEXT_LINE____    2. PATH=<貼付け>,jp,1,2014-12-13 16:48:12,2014-12-13 17:00:24,
62,OS Xにsublimeテキストのコマンド追加方法,ターミナルを開いて次のコマンドを実行___NEXT_LINE_______NEXT_LINE____    sudo ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" /usr/bin/subl,jp,1,2014-12-13 17:02:07,2014-12-13 17:02:07,
63,Responsiveの時のCSS,___NEXT_LINE____    /* Large desktop */___NEXT_LINE____    @media (min-width: 1200px) { ___NEXT_LINE____    ___NEXT_LINE____    }___NEXT_LINE____     ___NEXT_LINE____    /* Portrait tablet to landscape and desktop */___NEXT_LINE____    @media (min-width: 768px) and (max-width: 979px) { ___NEXT_LINE____    ___NEXT_LINE____    }___NEXT_LINE____     ___NEXT_LINE____    /* Landscape phone to portrait tablet */___NEXT_LINE____    @media (max-width: 767px) { ___NEXT_LINE____    ___NEXT_LINE____    }___NEXT_LINE____     ___NEXT_LINE____    /* Landscape phones and down */___NEXT_LINE____    @media (max-width: 480px) {  ___NEXT_LINE____    ___NEXT_LINE____    }___NEXT_LINE____,jp,1,2014-12-13 21:24:10,2014-12-13 21:24:10,
64,均一一様分布[0,1],___NEXT_LINE____    rand() / (RAND_MAX + 1.0)___NEXT_LINE____,jp,12,2014-12-14 17:14:56,2014-12-14 17:14:56,
65,Google AnalyticsをAngularJSに適応,まず、GoogleAnalyticsのタグをbodyに追加します。___NEXT_LINE_______NEXT_LINE____そして、`controllers`に次のスニペットを追加すればオーケーです。___NEXT_LINE____    ___NEXT_LINE____    $scope.$on("$includeContentLoaded", function () {___NEXT_LINE____       $window.ga('send', 'pageview', { page: $location.path() });___NEXT_LINE____    }),jp,1,2014-12-14 18:16:29,2014-12-14 18:16:29,
66,擬似乱数の生成,擬似乱数を得る方法として，簡単なものが二通りあります。___NEXT_LINE_______NEXT_LINE____乱数の範囲を[min, max]とすると，___NEXT_LINE_______NEXT_LINE____      min + (int)(rand()*(max-min+1.0)/(1.0+RAND_MAX));___NEXT_LINE_______NEXT_LINE____と___NEXT_LINE_______NEXT_LINE____      rand() % (max-min) + min;___NEXT_LINE_______NEXT_LINE____です。ただし，上記の例では整数の乱数が得られることに注意してください。___NEXT_LINE_______NEXT_LINE____実数の乱数を得るには，___NEXT_LINE_______NEXT_LINE____      min + (rand()*(max-min+1.0)/(1.0+RAND_MAX));___NEXT_LINE_______NEXT_LINE____とすれば良いです。最後に，簡単な例を載せておきます（実行確認済み）。___NEXT_LINE_______NEXT_LINE____    #include <iostream>___NEXT_LINE____    #include <cstdlib>___NEXT_LINE____    #include <time.h>___NEXT_LINE____    using namespace std;___NEXT_LINE____    ___NEXT_LINE____    int main(void){___NEXT_LINE____      int min, max; //範囲指定___NEXT_LINE____      int randum, randum2;___NEXT_LINE____      srand((unsigned int)time(NULL));___NEXT_LINE____      cout << "二通りの乱数計算をします。\n";___NEXT_LINE____      cout << "乱数の範囲："; cin >> min >> max;___NEXT_LINE____    ___NEXT_LINE____      randum  = min + (int)(rand()*(max-min+1.0)/(1.0+RAND_MAX));___NEXT_LINE____      randum2 = rand() % (max-min) + min;___NEXT_LINE____    ___NEXT_LINE____      cout << "乱数：" << randum << " と " << randum2 << '\n';___NEXT_LINE____    ___NEXT_LINE____      return 0;___NEXT_LINE____    },jp,4,2014-12-15 09:43:45,2014-12-15 12:49:55,
68,Amazon LinuxでRedisを始めよう,インストール___NEXT_LINE_______NEXT_LINE____    wget http://download.redis.io/redis-stable.tar.gz___NEXT_LINE____    tar xvzf redis-stable.tar.gz___NEXT_LINE____    cd redis-stable___NEXT_LINE____    make___NEXT_LINE_______NEXT_LINE____ログイン___NEXT_LINE_______NEXT_LINE____    src/redis-cli -h localhost -p 6379___NEXT_LINE_______NEXT_LINE____参照ページ___NEXT_LINE____[http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/GettingStarted.html](http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/GettingStarted.html),jp,1,2014-12-19 12:44:32,2014-12-19 12:51:05,
69,C/C++で円周率を使う,GCCでは、___NEXT_LINE_______NEXT_LINE____    #include <math.h>___NEXT_LINE_______NEXT_LINE____とすればM_PIという円周率を表す定数が使えますが、C言語の標準仕様ではないので環境によっては使えないことがあります。___NEXT_LINE____例えば、mbedのコンパイラでは使えません。___NEXT_LINE_______NEXT_LINE____また、Visual C++でM_PIを使うには___NEXT_LINE_______NEXT_LINE____    #define _USE_MATH_DEFINES___NEXT_LINE____    #include <cmath>___NEXT_LINE____とする必要があります。___NEXT_LINE_______NEXT_LINE____M\_PIが使えない環境や、移植性を高めたい場合には、___NEXT_LINE_______NEXT_LINE____    #define PI 3.14159265___NEXT_LINE_______NEXT_LINE____としたり、arctan(1)=π/4を利用して、___NEXT_LINE_______NEXT_LINE____    #include <math.h>___NEXT_LINE____    ___NEXT_LINE____    const double pi = 4.0 * atan(1.0);___NEXT_LINE____とするのが良いでしょう。,jp,14,2014-12-19 19:13:27,2014-12-19 19:13:27,
70,PHPUnitのインストール,___NEXT_LINE____        ___NEXT_LINE____        wget https://phar.phpunit.de/phpunit.phar___NEXT_LINE____        chmod +x phpunit.phar___NEXT_LINE____        sudo mv phpunit.phar /usr/local/bin/phpunit___NEXT_LINE____        phpunit --version___NEXT_LINE____    ___NEXT_LINE____,jp,1,2014-12-21 02:31:23,2014-12-21 02:31:23,
71,ターミナルで言語を変更 Ubuntu,現在の言語を確認コマンド___NEXT_LINE_______NEXT_LINE____     locale___NEXT_LINE_______NEXT_LINE____/etc/default/localeファイルを変更すれば言語が変わります___NEXT_LINE_______NEXT_LINE____    sudo gedit /etc/default/locale___NEXT_LINE_______NEXT_LINE____そして、次のように変えます___NEXT_LINE_______NEXT_LINE____    LANG="en_US"___NEXT_LINE____    LANGUAGE="en_US:en",jp,1,2014-12-21 18:42:25,2014-12-21 18:42:25,
72,Linuxの権限編集,### `chmod` 読み書きの権限編集___NEXT_LINE_______NEXT_LINE____* パラメータ１は変更したい権限___NEXT_LINE____* パラメータ２は変更したファイル名___NEXT_LINE_______NEXT_LINE____使用例___NEXT_LINE_______NEXT_LINE____    sudo chmod u+w myfile.txt___NEXT_LINE_______NEXT_LINE____パラメータ１についての詳細___NEXT_LINE_______NEXT_LINE____    u+w　ユーザに書き込み権限___NEXT_LINE____    g+x    グループにデバック権限___NEXT_LINE____    o+r     他のユーザに読み取り権限___NEXT_LINE____   ___NEXT_LINE____    u    はuserの略でユーザという意味です___NEXT_LINE____    g    はgroupの略でグループという意味です___NEXT_LINE____    o    はothersの略で他のユーザという意味です___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____### `chown` ファイル所有者の編集___NEXT_LINE_______NEXT_LINE____* パラメータ１は変更するユーザ、グループ___NEXT_LINE____* パラメータ２はファイル名___NEXT_LINE_______NEXT_LINE____使用例___NEXT_LINE_______NEXT_LINE____    sudo chown myuser:mygroup myfile.txt,jp,1,2014-12-21 20:35:12,2014-12-21 20:35:25,
74,リストのn番目の要素を取得する,HaskellのPreludeには(!!)が定義されていますが、違うパターンで取得する関数___NEXT_LINE_______NEXT_LINE____    {- (!!) :: [a] -> Int -> a -}___NEXT_LINE____    get :: Int -> [a] -> a___NEXT_LINE____    get n xs = xs !! n___NEXT_LINE_______NEXT_LINE____実装するなら___NEXT_LINE_______NEXT_LINE____    get n _ | n<0  = error "get: negative index"___NEXT_LINE____    get n []           = error "get: index too large"___NEXT_LINE____    get 0 (x:_)      = x___NEXT_LINE____    get n (_:xs)    = get (n-1) xs___NEXT_LINE____    ___NEXT_LINE____に等しい(関数(!!)と同じ実装内容)___NEXT_LINE_______NEXT_LINE____n番目の要素は___NEXT_LINE_______NEXT_LINE____    (!!) [0,1..]  n___NEXT_LINE____    [0,1..] !! n___NEXT_LINE_______NEXT_LINE____で取得出来ますが、違いは___NEXT_LINE_______NEXT_LINE____    get n [0,1..]___NEXT_LINE____    n `get` [0,1..],jp,2,2014-12-22 20:12:09,2014-12-22 20:22:36,
75,Hakell用BuildSystem,デフォルトのBuildSystemではrunhaskell(runghc)で実行ファイルは作られないので___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____     {___NEXT_LINE____        "cmd": ["bash","-c","ghc '${file}' -o '${file_path}/${file_base_name}' && '${file_path}/${file_base_name}'"],___NEXT_LINE____       "file_regex": "^(...*?):([0-9]*):?([0-9]*)",___NEXT_LINE____        "selector": "source.haskell",___NEXT_LINE____       "variants":[{___NEXT_LINE____           "name": "Run",___NEXT_LINE____          "cmd": ["runhaskell", "$file"]___NEXT_LINE____      }]___NEXT_LINE____     }___NEXT_LINE____    ___NEXT_LINE____Build&Runは **Ctrl(Cmd) + 'B'**___NEXT_LINE_______NEXT_LINE____Runは**Ctrl(Cmd) + Shift + 'B'**,jp,2,2014-12-22 21:14:55,2014-12-22 21:22:34,
76,Sublime Textで日本語入力,**Linuxでテキストエディター"Sublime Text"で日本語入力する方法**___NEXT_LINE_______NEXT_LINE____　※Sublime TextとPackage Controlはインストール済みを前提___NEXT_LINE_______NEXT_LINE____　※Ubuntu14.04、Sublime Text 3で動作確認___NEXT_LINE_______NEXT_LINE____1.terminal（端末）でemacs-mozcのインストール___NEXT_LINE_______NEXT_LINE____    sudo apt-get install mozc emacs-mozc___NEXT_LINE_______NEXT_LINE____2.コマンドパレット(Ctrl+Shift+P)で`Package Control:Add Repository`を入力・選択し、`https://github.com/yasuyuky/SublimeMozcInput`と入力___NEXT_LINE____ ___NEXT_LINE_______NEXT_LINE____3.コマンドパレット(Ctrl+Shift+P)で`Package Control:Install Package`を入力・選択し、`SublimeMozcInput`と入力___NEXT_LINE_______NEXT_LINE____4."Ctrl+\"で切り替える___NEXT_LINE_______NEXT_LINE____cf. Sublime TextはUTF-8が標準なので、Shift-JIS等のファイルは文字化けする。これを編集時のみ自動でUTF-8に変更するPackageをインストールする___NEXT_LINE_______NEXT_LINE____コマンドパレット(Ctrl+Shift+P)で`Package Control:Install Package`を入力・選択し、`convertToUTF8`と入力,jp,5,2014-12-23 23:30:49,2015-01-12 06:13:45,
77,RFC3986定義の厳密なHTTP URIの正規表現,___NEXT_LINE____    https?:(//(([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,:;=])*@)?(\[(([0-9a-f]{1,4}:){6}([0-9a-f]{1,4}:[0-9a-f]{1,4}|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))|::([0-9a-f]{1,4}:){5}([0-9a-f]{1,4}:[0-9a-f]{1,4}|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))|([0-9a-f]{1,4})?::([0-9a-f]{1,4}:){4}([0-9a-f]{1,4}:[0-9a-f]{1,4}|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))|(([0-9a-f]{1,4}:)?[0-9a-f]{1,4})?::([0-9a-f]{1,4}:){3}([0-9a-f]{1,4}:[0-9a-f]{1,4}|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))|(([0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::([0-9a-f]{1,4}:){2}([0-9a-f]{1,4}:[0-9a-f]{1,4}|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))|(([0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:([0-9a-f]{1,4}:[0-9a-f]{1,4}|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))|(([0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::([0-9a-f]{1,4}:[0-9a-f]{1,4}|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]))|(([0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(([0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::|v[0-9a-f]+\.[!$&-.0-;=_a-z~]+)\]|(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])|([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,;=])*)(:\d*)?(/([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,:;=@])*)*|/(([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,:;=@])+(/([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,:;=@])*)*)?|([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,:;=@])+(/([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,:;=@])*)*)?(\?([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,/:;=?@])*)?(#([-.0-9_a-z~]|%[0-9a-f][0-9a-f]|[!$&-,/:;=?@])*)?___NEXT_LINE____,jp,6,2014-12-24 18:20:19,2014-12-24 18:20:19,
78,clearfix,___NEXT_LINE____    .clearfix:after {___NEXT_LINE____       content: "";___NEXT_LINE____        display: block;___NEXT_LINE____     clear: both;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____netscapeのとても古いバージョン（7.0以下？）とIE７以下に対応するには以下を推奨___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    .clearfix:after {___NEXT_LINE____      content: "."; ___NEXT_LINE____      display: block; ___NEXT_LINE____      height: 0; ___NEXT_LINE____      font-size:0;    ___NEXT_LINE____      clear: both; ___NEXT_LINE____      visibility:hidden;___NEXT_LINE____    }___NEXT_LINE____        ___NEXT_LINE____    .clearfix { display: inline-block; } ___NEXT_LINE____    ___NEXT_LINE____,jp,6,2014-12-26 18:00:35,2014-12-26 18:00:35,
79,C++クラス内メンバ関数のポインタ,C++のメンバ関数ポインタの取得___NEXT_LINE_______NEXT_LINE____        Test& operator=(int val){___NEXT_LINE____            return *this;___NEXT_LINE____        }___NEXT_LINE_______NEXT_LINE____というTestクラス内の非スタティックメンバ関数は___NEXT_LINE_______NEXT_LINE____        Test obj;___NEXT_LINE____        obj = 0;___NEXT_LINE____        ___NEXT_LINE____        Test& (Test::*ope)(int) = &Test::operator=;___NEXT_LINE____        (obj.*ope)(1);___NEXT_LINE____    ___NEXT_LINE____        (obj.*(static_cast<Test&(Test::*)(int)>(&Test::operator=)))(2);___NEXT_LINE_______NEXT_LINE____どうしても関数ポインタで処理したいとき。関数テーブルを作りたいとき。___NEXT_LINE_______NEXT_LINE____     「::」はスコープ解決演算子___NEXT_LINE____     「::*」はメンバのポインタ,jp,2,2014-12-26 21:39:34,2014-12-26 21:39:34,
80,別のサイトへ移動する際のイベント,他のタブもしくはウィンドウから自分のサイトに戻った時___NEXT_LINE_______NEXT_LINE____    window.onfocus = function(){___NEXT_LINE____        // イベント発生___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____自分のサイトから他のタブへ移動するとき___NEXT_LINE_______NEXT_LINE____    window.onblur = function(){___NEXT_LINE____        // イベント発生___NEXT_LINE____    },jp,1,2014-12-30 17:25:01,2014-12-30 17:25:01,
81,遅延タイプのリサイズイベント,sizingEventにサイズのイベントを加えるだけで良いです。___NEXT_LINE_______NEXT_LINE____documentがonloadのときにsizingEventが発生します。そして、リサイズされた場合はその2秒後にイベントが発生します。___NEXT_LINE_______NEXT_LINE____    var sizingEvent = function(){___NEXT_LINE____       // サイズを調整するイベント ___NEXT_LINE____    }___NEXT_LINE____    window.onload = function(){___NEXT_LINE____         sizingEvent();___NEXT_LINE____    }___NEXT_LINE____    var timeout_id;___NEXT_LINE____    window.onresize = function(){___NEXT_LINE____      clearTimeout(timeout_id);___NEXT_LINE____       timeout_id = setTimeout(function(){___NEXT_LINE____         sizingEvent();___NEXT_LINE____      }, 2000);___NEXT_LINE____    },jp,1,2014-12-30 17:59:06,2014-12-30 18:11:16,
82,LaravelのURL helpers,Laravelではurl、ドメインに関わるいくつの関数を用意しました。___NEXT_LINE_______NEXT_LINE____uriを取得、返り値は String "/snippet/23"___NEXT_LINE_______NEXT_LINE____    $uri = Request::path();___NEXT_LINE_______NEXT_LINE____urlを取得、返り値は String "http://localhost/snippet/23"___NEXT_LINE_______NEXT_LINE____    $url = Request::url();___NEXT_LINE_______NEXT_LINE____httpsリクエストの確認、返り値はbool___NEXT_LINE_______NEXT_LINE____    Request::secure()___NEXT_LINE_______NEXT_LINE____uriのパターンマッチ（ドメインのパターンマッチではありません）、返り値はbool___NEXT_LINE_______NEXT_LINE____    Request::is('admin/*')___NEXT_LINE_______NEXT_LINE____メソッドの確認、返り値はbool___NEXT_LINE_______NEXT_LINE____    Request::isMethod('post'),jp,1,2014-12-31 12:59:17,2014-12-31 13:11:21,
83,PHPUnitでundefined index  HTTP_HOSTエラーの対処法,phpunit.xmlに次のコードを加えてください___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    <php>___NEXT_LINE____         <server name='HTTP_HOST' value='http://localhost'>___NEXT_LINE____    </php>___NEXT_LINE____,jp,1,2015-01-03 14:11:25,2015-01-03 14:11:25,
84,reset.css,```___NEXT_LINE____/* v2.0 | 20110126___NEXT_LINE____  reset.css___NEXT_LINE____   http://meyerweb.com/eric/tools/css/reset/ ___NEXT_LINE____      License: none (public domain)___NEXT_LINE____*/___NEXT_LINE____html, body, div, span, applet, object, iframe,___NEXT_LINE____h1, h2, h3, h4, h5, h6, p, blockquote, pre,___NEXT_LINE____a, abbr, acronym, address, big, cite, code,___NEXT_LINE____del, dfn, em, img, ins, kbd, q, s, samp,___NEXT_LINE____small, strike, strong, sub, sup, tt, var,___NEXT_LINE____b, u, i, center,___NEXT_LINE____dl, dt, dd, ol, ul, li,___NEXT_LINE____fieldset, form, label, legend,___NEXT_LINE____table, caption, tbody, tfoot, thead, tr, th, td,___NEXT_LINE____article, aside, canvas, details, embed, ___NEXT_LINE____figure, figcaption, footer, header, hgroup, ___NEXT_LINE____menu, nav, output, ruby, section, summary,___NEXT_LINE____time, mark, audio, video {___NEXT_LINE____   margin: 0;___NEXT_LINE____  padding: 0;___NEXT_LINE____ border: 0;___NEXT_LINE____  font-size: 100%;___NEXT_LINE____    font: inherit;___NEXT_LINE____  vertical-align: baseline;___NEXT_LINE____}___NEXT_LINE____/* HTML5 display-role reset for older browsers */___NEXT_LINE____article, aside, details, figcaption, figure, ___NEXT_LINE____footer, header, hgroup, menu, nav, section {___NEXT_LINE____    display: block;___NEXT_LINE____}___NEXT_LINE____body {___NEXT_LINE____  line-height: 0;___NEXT_LINE____}___NEXT_LINE____ol, ul {___NEXT_LINE____    list-style: none;___NEXT_LINE____}___NEXT_LINE____blockquote, q {___NEXT_LINE____   quotes: none;___NEXT_LINE____}___NEXT_LINE____blockquote:before, blockquote:after,___NEXT_LINE____q:before, q:after {___NEXT_LINE____   content: '';___NEXT_LINE____    content: none;___NEXT_LINE____}___NEXT_LINE____table {___NEXT_LINE____  border-collapse: collapse;___NEXT_LINE____  border-spacing: 0;___NEXT_LINE____}___NEXT_LINE____a {___NEXT_LINE____  text-decoration: none;___NEXT_LINE____}___NEXT_LINE____div{ display: block;}___NEXT_LINE____h1,h3,h4,h5,th{font-weight:bold;}___NEXT_LINE____h1{padding:0;margin:20px 0 10px 0;text-align:left;}___NEXT_LINE____h2{font-size:30px;font-weight:200;margin:20px 0 11px;padding:0;padding-bottom:10px;}___NEXT_LINE____h1{font-size:36px;font-weight:200;}___NEXT_LINE____h3{font-size:24px;font-weight:normal;}___NEXT_LINE____h4{font-size:18px;}___NEXT_LINE____h5{font-size:14px;font-weight:bold;margin-bottom:2px;}___NEXT_LINE____h6{font-size:12px;font-weight:normal;}___NEXT_LINE____p{margin:0 0 10px;line-height: 1;}___NEXT_LINE____input[type="text"]:focus{outline: 0;}___NEXT_LINE____```,jp,1,2015-01-03 16:34:19,2015-01-07 11:06:56,
85,JSONレスポンスのテストURL,CodeGarageがJSONレスポンスのテスト用に次のURLを用意しました。___NEXT_LINE_______NEXT_LINE____GETメソッドのテストURL___NEXT_LINE_______NEXT_LINE____    http://codegarage.edisonthk.com/thisistest/json/get/___NEXT_LINE_______NEXT_LINE____POSTメソッドのテストURL___NEXT_LINE_______NEXT_LINE____    http://codegarage.edisonthk.com/thisistest/json/post/___NEXT_LINE_______NEXT_LINE____---___NEXT_LINE_______NEXT_LINE____パラメータのテストする際にリクエストに送ったパラメータがparamsキーに収納され、レスポンスします。たとえ、いまkey=valというパラメータがリクエストされました。___NEXT_LINE_______NEXT_LINE____    http://codegarage.edisonthk.com/thisistest/json/get/?key=val___NEXT_LINE_______NEXT_LINE____そして、次のようにサーバがレスポンスします。___NEXT_LINE_______NEXT_LINE____    {"thisistest":true,"method":"GET","params":{"key":"val"}}___NEXT_LINE_______NEXT_LINE____POSTメソッドも同様です。リクエストされたパラメータをそのままレスポンスします。,jp,1,2015-01-04 02:23:26,2015-01-04 13:33:53,
86,curlコマンドでPOSTメソッドのリクエスト,オプションdの次にパラメータになります。ただし、パラメータは自動にurlencodeに変換してくれません。つまり、自分でurlencodeを行わなければいけません。___NEXT_LINE_______NEXT_LINE____      curl -d "key=val" http://codegarage.edisonthk.com/thisistest/json/post?key=val,jp,1,2015-01-04 02:29:55,2015-01-04 02:29:55,
87,行儀良いjavascriptのテンプレ,___NEXT_LINE____    (function(global) {___NEXT_LINE____        "use strict";___NEXT_LINE____    ___NEXT_LINE____        // Class ------------------------------------------------___NEXT_LINE____        function YourModule() {___NEXT_LINE____        }___NEXT_LINE____    ___NEXT_LINE____        // Header -----------------------------------------------___NEXT_LINE____        YourModule["prototype"]["method"] = YourModule_method; // YourModule#method(someArg:any):void___NEXT_LINE____    ___NEXT_LINE____        // Implementation ---------------------------------------___NEXT_LINE____        function YourModule_method(someArg) {___NEXT_LINE____            // ...___NEXT_LINE____        }___NEXT_LINE____    ___NEXT_LINE____        // Exports ----------------------------------------------___NEXT_LINE____        if ("process" in global) {___NEXT_LINE____            module["exports"] = YourModule;___NEXT_LINE____        }___NEXT_LINE____        global["YourModule"] = YourModule;___NEXT_LINE____    ___NEXT_LINE____    })((this || 0).self || global);___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____参考と詳細：http://qiita.com/kaiinui/items/22a75d2adc56a40da7b7,jp,6,2015-01-04 20:30:02,2015-01-04 20:30:02,
88,配列をランダムな順序にする,乱数で重みをつけて並べ替える方法___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    var data = "qwertyuiop@[".split(""); // ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "@", "["]___NEXT_LINE____    data.map(function (a) { return [a, Math.random()] })___NEXT_LINE____        .sort(function (a, b) { return a[1] - b[1] })___NEXT_LINE____        .map(function (a) { return a[0] });___NEXT_LINE____    ___NEXT_LINE____   実は正確ではない方法↓　　|:3ミ___NEXT_LINE____    ___NEXT_LINE____    var data = "qwertyuiop@[".split(""); // ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "@", "["]___NEXT_LINE____    data.sort(function () { return Math.random() - 0.5 });___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____参考：https://www.softel.co.jp/blogs/tech/archives/2328/archives/2328,jp,6,2015-01-04 20:54:20,2015-01-04 20:54:20,
89,phpによるデータベースへのデータ挿入,phpによるデータベースへのデータ挿入___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    // データベースに接続___NEXT_LINE____    try {___NEXT_LINE____      $dbh = new PDO(DSN, DB_USER, DB_PASSWORD); // 定数は適当にdefineしておく___NEXT_LINE____    } catch (PDOException $e) {___NEXT_LINE____      echo $e->getMessage();___NEXT_LINE____      exit;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    /*___NEXT_LINE____    使用するテーブル：___NEXT_LINE____    * users ___NEXT_LINE____    - name : string___NEXT_LINE____    - email : string___NEXT_LINE____    - memo : string___NEXT_LINE____    */___NEXT_LINE_______NEXT_LINE_______NEXT_LINE_______NEXT_LINE____以上のコード、データベースが用意されていたとして、ここにデータの挿入を行うとき、以下のような記述をすれば良い___NEXT_LINE_______NEXT_LINE____    ___NEXT_LINE____    $sql = ___NEXT_LINE____      "insert into users___NEXT_LINE____      (name, email, memo)___NEXT_LINE____      values___NEXT_LINE____      (:name, :email, :memo)";___NEXT_LINE____    $stmt = $dbh->prepare($sql);___NEXT_LINE____    $params = array(___NEXT_LINE____      ":name" => "通行人A",___NEXT_LINE____      ":email" => "hogehoge@tekitou.com",___NEXT_LINE____      ":memo" => "めもめも"___NEXT_LINE____    );___NEXT_LINE____    $stmt->execute($params);,jp,6,2015-01-07 02:11:57,2015-01-07 02:11:57,
90,CSRF対策,CSRF(XSRF, Cross Site Request Forgerie)の概要▼<br>___NEXT_LINE____１．攻撃者が、攻撃用のWebページを作成して公開する<br>___NEXT_LINE____２．第三者が、攻撃用のWebページにアクセスする<br>___NEXT_LINE____３．第三者は、攻撃者が用意した任意のHTTPリクエストを送信させられる<br>___NEXT_LINE____４．送信させられた HTTP リクエストによって、攻撃者の意図した操作が行われる<br>___NEXT_LINE____<br>___NEXT_LINE____つまり、その攻撃用のWEBページからのリクエストをはじければ良い。<br>___NEXT_LINE____例えば、こちらのサーバからしか設置できない文字列（トークン）を用意して、<br>___NEXT_LINE____データが送信された時にちゃんとそのトークンが一致しているかをチェックすれば良い。<br>___NEXT_LINE_______NEXT_LINE____具体的に、phpの場合は以下のような関数を用意する___NEXT_LINE_______NEXT_LINE____    ___NEXT_LINE____    function setToken() {___NEXT_LINE____      if (!isset($_SESSION['token'])) {___NEXT_LINE____        $_SESSION['token'] = sha1(uniqid(mt_rand(), true));___NEXT_LINE____      }___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    function checkToken() {___NEXT_LINE____      if (empty($_POST['token']) || $_POST['token'] != $_SESSION['token']) {___NEXT_LINE____        echo "不正なアクセスです";___NEXT_LINE____        exit;___NEXT_LINE____      }___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____getの時はsetToken、postの時はcheckTokenを実行することで実装できる___NEXT_LINE____****___NEXT_LINE____これはワンタイムトークン方式と呼ばれ、多くの認証でこの方法が採用されているが、完璧に安全かどうかは保証することができない。<br>___NEXT_LINE____例えば、乱数の生成は簡単なものではないので、なんらかの処理によって乱数調整が行われる可能性を否定することはできない。<br>___NEXT_LINE____それでもRuby on Railsなどもこの方法を採用してるためとりあえずこの方法を取ることは間違えではないと言える<br>,jp,6,2015-01-07 03:14:57,2015-01-07 03:14:57,
91,HTTPリクエスト,CocoaアプリケーションでのHTTPリクエスト___NEXT_LINE_______NEXT_LINE____    let url = NSURL(string: "http://codegarage.edisonthk.com/thisistest/json/get/")___NEXT_LINE____    ___NEXT_LINE____    let task = NSURLSession.sharedSession().dataTaskWithURL(url!) {(data, response, error) in___NEXT_LINE____        // urlがオプションなので、urlの語尾に!（びっくりマーク）を付けなければ___NEXT_LINE____        // ここでコールバックの処理___NEXT_LINE____        println(NSString(data: data, encoding: NSUTF8StringEncoding))___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    task.resume(),jp,1,2015-01-08 19:00:45,2015-01-08 19:00:45,
92,端末の表示をカスタマイズ for Ubuntu,Ubuntuのデフォルトでは，ディレクトリを移動するたびに（ディレクトリツリーを表示するので）端末の一文が長くなります。___NEXT_LINE_______NEXT_LINE____それを煩わしいと思っている方**必見！！**___NEXT_LINE_______NEXT_LINE____端末をカスタマイズして，スッキリシンプルにしましょう。___NEXT_LINE_______NEXT_LINE____まずはホームにある隠しファイルを開きます。___NEXT_LINE_______NEXT_LINE____    sudo gedit .bashrc___NEXT_LINE_______NEXT_LINE____そして，プロンプトの文字列である"PS1"パラメータを以下のように編集します。___NEXT_LINE_______NEXT_LINE____    else___NEXT_LINE____        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '___NEXT_LINE____    fi___NEXT_LINE____↓↓↓↓↓↓↓↓↓___NEXT_LINE_______NEXT_LINE____    else___NEXT_LINE____        PS1='${debian_chroot:+($debian_chroot)}\W\$ '___NEXT_LINE____    fi___NEXT_LINE____こうすると，「\u」がユーザー名、「\h」がホスト名（コンピューター名）なので，「\u@\h:」の部分を削除すれば，「~$」だけのシンプルなものになります。また、「\w」を「\W」にすることでカレントディレクトリが表示されます。___NEXT_LINE_______NEXT_LINE____なお、さらなるカスタマイズをしたい方は以下のサイトを参照してください。___NEXT_LINE_______NEXT_LINE____https://jp.linux.com/news/linuxcom-exclusive/416957-lco20140519___NEXT_LINE_______NEXT_LINE____http://techracho.bpsinc.jp/yamasita-taisuke/2014_05_09/17140,jp,4,2015-01-12 06:10:29,2015-01-13 20:30:14,
93,c言語で現在の時刻を取得,`time.h`ヘッダーを追加しなければいけません。___NEXT_LINE_______NEXT_LINE____    struct tm *ptr;___NEXT_LINE____    time_t lt;___NEXT_LINE____    char* str;___NEXT_LINE____    ___NEXT_LINE____    str = (char*)malloc(sizeof(char)*20);___NEXT_LINE____    lt = time(NULL);___NEXT_LINE____    ptr = localtime(<);___NEXT_LINE____    strftime(str, sizeof(char)*20, "%m/%d %T", ptr);___NEXT_LINE____    printf("%s\n",str);,jp,1,2015-01-16 23:27:35,2015-01-16 23:27:35,
94,PHPでURLの取得,___NEXT_LINE____    "//".$_SERVER["HTTP_HOST"]$_SERVER["REQUEST_URI"]___NEXT_LINE____,jp,1,2015-01-16 23:28:43,2015-01-16 23:28:43,
95,カタガナの正規表現,```___NEXT_LINE____^[ァ-ヶー]+$___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____PHPのサンプル___NEXT_LINE_______NEXT_LINE____    mb_regex_encoding("UTF-8");___NEXT_LINE____    if (preg_match("/^[ぁ-ん]+$/u", $string)) {___NEXT_LINE____        echo "ひらがなのみ";___NEXT_LINE____    }___NEXT_LINE____    if (preg_match("/^[ァ-ヶー]+$/u", $string)) {___NEXT_LINE____        echo "カタカナのみ";___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE____,jp,1,2015-01-16 23:31:14,2015-01-16 23:31:14,
96,Java用のHttpクライアントクラス,Httpクライアントのリクエスト。次のリクエストを調整できます。___NEXT_LINE_______NEXT_LINE____* URL___NEXT_LINE____* メソッド___NEXT_LINE____* パラメータ___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____public class HttpRequest {___NEXT_LINE_______NEXT_LINE____    private static final String CHARSET = "UTF-8";___NEXT_LINE_______NEXT_LINE____    private static final int READ_TIMEOUT = 10000; // milliseconds___NEXT_LINE____    private static final int CONNECT_TIMEOUT = 15000; // milliseconds___NEXT_LINE_______NEXT_LINE____    private String mMethod;___NEXT_LINE____    private String mUrl;___NEXT_LINE____    private List<NameValuePair> mParams;___NEXT_LINE_______NEXT_LINE____    public HttpRequest(String method, String url){___NEXT_LINE____        mParams = null;___NEXT_LINE____        mMethod = method;___NEXT_LINE____        mUrl = url;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    public String send()  throws IOException {___NEXT_LINE____        return loadFromNetwork();___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    public void setParams(List<NameValuePair> params){___NEXT_LINE____        this.mParams = params;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    /** Initiates the fetch operation. */___NEXT_LINE____    private String loadFromNetwork() throws IOException {___NEXT_LINE____        InputStream stream = null;___NEXT_LINE____        String str ="";___NEXT_LINE_______NEXT_LINE____        try {___NEXT_LINE____            stream = sendHTTPRequest(mUrl,mParams);___NEXT_LINE____            str = readIt(stream, 500);___NEXT_LINE____        } finally {___NEXT_LINE____            if (stream != null) {___NEXT_LINE____                stream.close();___NEXT_LINE____            }___NEXT_LINE____        }___NEXT_LINE____        return str;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    private InputStream sendHTTPRequest(String urlString, List<NameValuePair> params) throws IOException {___NEXT_LINE_______NEXT_LINE____        URL url = new URL(urlString);___NEXT_LINE____        HttpURLConnection conn = (HttpURLConnection) url.openConnection();___NEXT_LINE____        conn.setReadTimeout(READ_TIMEOUT);___NEXT_LINE____        conn.setConnectTimeout(CONNECT_TIMEOUT);___NEXT_LINE____        conn.setRequestMethod(mMethod);___NEXT_LINE____        conn.setDoInput(true);___NEXT_LINE____        conn.setDoOutput(true);___NEXT_LINE_______NEXT_LINE____        if(params != null){___NEXT_LINE____            OutputStream os = conn.getOutputStream();___NEXT_LINE____            BufferedWriter writer = new BufferedWriter(___NEXT_LINE____                    new OutputStreamWriter(os, CHARSET));___NEXT_LINE____            writer.write(getQuery(params));___NEXT_LINE____            writer.flush();___NEXT_LINE____            writer.close();___NEXT_LINE____            os.close();___NEXT_LINE____        }___NEXT_LINE_______NEXT_LINE____        conn.connect();___NEXT_LINE_______NEXT_LINE____        InputStream stream = conn.getInputStream();___NEXT_LINE____        return stream;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    private String getQuery(List<NameValuePair> params) throws UnsupportedEncodingException___NEXT_LINE____    {___NEXT_LINE____        StringBuilder result = new StringBuilder();___NEXT_LINE____        boolean first = true;___NEXT_LINE_______NEXT_LINE____        for (NameValuePair pair : params)___NEXT_LINE____        {___NEXT_LINE____            if (first)___NEXT_LINE____                first = false;___NEXT_LINE____            else___NEXT_LINE____                result.append("&");___NEXT_LINE_______NEXT_LINE____            result.append(URLEncoder.encode(pair.getName(), "UTF-8"));___NEXT_LINE____            result.append("=");___NEXT_LINE____            result.append(URLEncoder.encode(pair.getValue(), "UTF-8"));___NEXT_LINE____        }___NEXT_LINE_______NEXT_LINE____        return result.toString();___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    private String readIt(InputStream stream, int len) throws IOException, UnsupportedEncodingException {___NEXT_LINE____        Reader reader = null;___NEXT_LINE____        reader = new InputStreamReader(stream, "UTF-8");___NEXT_LINE____        char[] buffer = new char[len];___NEXT_LINE____        reader.read(buffer);___NEXT_LINE____        return new String(buffer);___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____サンプル___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____String result = new HttpRequest("GET", "http://www.example.com").send();___NEXT_LINE____```,jp,1,2015-01-17 14:59:59,2015-01-17 15:09:35,
97,ゆるふわ系Makefile,C++用のMakefileのテンプレートを作りました。このMakefileの利点は___NEXT_LINE_______NEXT_LINE____* ソースファイルをワイルドカードで指定できる___NEXT_LINE____* 差分コンパイルされる___NEXT_LINE_______NEXT_LINE____です。ぜひ，使ってみてください。___NEXT_LINE_______NEXT_LINE____    COMPILER = g++___NEXT_LINE____    CFLAGS   = -Wextra -g -MMD -MP___NEXT_LINE____    LDFLAGS  =___NEXT_LINE____    LIBS     =___NEXT_LINE____    INCLUDE  = -I../include___NEXT_LINE____    TARGET   = ../bin/$(shell basename `readlink -f ..`)___NEXT_LINE____    OBJDIR   = ./obj___NEXT_LINE____    ifeq "$(strip $(OBJDIR))" ""___NEXT_LINE____      OBJDIR = .___NEXT_LINE____    endif___NEXT_LINE____    SOURCES  = $(wildcard *.cpp)___NEXT_LINE____    OBJECTS  = $(addprefix $(OBJDIR)/, $(SOURCES:.cpp=.o))___NEXT_LINE____    DEPENDS  = $(OBJECTS:.o=.d)___NEXT_LINE____    ___NEXT_LINE____    $(TARGET): $(OBJECTS) $(LIBS)___NEXT_LINE____     $(COMPILER) -o $@ $^ $(LDFLAGS)___NEXT_LINE____    ___NEXT_LINE____    $(OBJDIR)/%.o: %.cpp___NEXT_LINE____     @[ -d $(OBJDIR) ] || mkdir -p $(OBJDIR)___NEXT_LINE____     $(COMPILER) $(CFLAGS) $(INCLUDE) -o $@ -c $<___NEXT_LINE____    ___NEXT_LINE____    all: clean $(TARGET)___NEXT_LINE____    ___NEXT_LINE____    clean:___NEXT_LINE____      rm -f $(OBJECTS) $(DEPENDS) $(TARGET)___NEXT_LINE____       @rmdir --ignore-fail-on-non-empty `readlink -f $(OBJDIR)`___NEXT_LINE____    ___NEXT_LINE____    -include $(DEPENDS)___NEXT_LINE_______NEXT_LINE____なお，フォルダ構造としては，___NEXT_LINE_______NEXT_LINE____* binに実行ファイル___NEXT_LINE____* includeにヘッダファイル___NEXT_LINE____* sourceに.cppファイル，Makefile，そしてその中にobjフォルダを作り，中間ファイル___NEXT_LINE_______NEXT_LINE____を置くようにしてください。___NEXT_LINE_______NEXT_LINE____COMPILERやCFLAGSなどの説明は，後日書き加えます。,jp,4,2015-01-17 16:07:04,2015-01-17 16:07:04,
98,Date -> String への変換,`date`変数はDateクラスの変数___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____Format formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");___NEXT_LINE____String result = formatter.format(date);___NEXT_LINE____```,jp,1,2015-01-17 17:43:04,2015-01-17 17:43:04,
99,String型 -> Date型 への変換,String型のstring変数は`string = "2015/04/03;"`になります。そして、Date型のresultが出力結果になります。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____DateFormat format = new SimpleDateFormat("yyyy/MM/dd");___NEXT_LINE____Date result = format.parse(string);___NEXT_LINE____```,jp,1,2015-01-17 17:47:46,2015-01-17 17:47:46,
100,タブとタブグループの制作 - HTMLとCSSのみで作成,シンプルのタブ、activeクラスは選ばれたタブに付けるやつ___NEXT_LINE_______NEXT_LINE____htmlコード___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<div class="tabs">___NEXT_LINE____      <a href="#">個人情報</a>___NEXT_LINE____      <a href="#">ヒアリングシート</a>___NEXT_LINE____</div>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____cssコード___NEXT_LINE_______NEXT_LINE____    .tabs {___NEXT_LINE____       margin-top: 15px;___NEXT_LINE____       font-size: 0;___NEXT_LINE____       border-bottom: 1px solid #ccc;___NEXT_LINE____    }___NEXT_LINE____    .tabs a {___NEXT_LINE____        display:inline-block;___NEXT_LINE____       width: 150px;___NEXT_LINE____       height: 30px;___NEXT_LINE____       vertical-align: middle;___NEXT_LINE____     line-height: 30px;___NEXT_LINE____      text-align: center;___NEXT_LINE____     background-color: white;___NEXT_LINE____        position: relative;___NEXT_LINE____    } ___NEXT_LINE____    .tabs a.active {___NEXT_LINE____       top:1px;___NEXT_LINE____        border-bottom: 0;___NEXT_LINE____       border-left:1px solid #ccc;___NEXT_LINE____     border-top:1px solid #ccc;___NEXT_LINE____      border-right: 1px solid #ccc;___NEXT_LINE____    },jp,1,2015-01-17 18:46:58,2015-01-17 18:46:58,
101,Fragmentの置き換え,次の例はMyFragmentというfragmentとR.id.containerというFragmentLayoutのビューに置き換えるスニペット。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____FragmentManager fragmentManager = getFragmentManager();___NEXT_LINE____fragmentManager.beginTransaction()___NEXT_LINE____                .replace(R.id.container, new MyFragment())___NEXT_LINE____                .commit();___NEXT_LINE____```,jp,1,2015-01-18 13:40:18,2015-01-18 13:40:57,
102,MongoDB Shellのコマンド,MongoDBのShellコマンドはJavaScriptに似ているので、JavaScriptのようにコマンドの操作ができます。___NEXT_LINE_______NEXT_LINE____Shellの起動___NEXT_LINE____```___NEXT_LINE____mongo___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____全データベースを表示___NEXT_LINE____```___NEXT_LINE____show dbs___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____データベースを選択___NEXT_LINE____```___NEXT_LINE____use <databasename>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____データベース内のすべてのコレクションを一覧に表示___NEXT_LINE____```___NEXT_LINE____show collections___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____collectionの中身を表示___NEXT_LINE____```___NEXT_LINE____db.<collection_name>.find()___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____collectionの中身を奇麗に表示___NEXT_LINE____```___NEXT_LINE____db.<collection_name>.find().pretty()___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____とあるcollectionのfieldを型チェック___NEXT_LINE____```___NEXT_LINE____typeof db.<collection_name>.find()["<field_name>"]___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____promptの記号を変換（遊び）___NEXT_LINE____```___NEXT_LINE____cmdCount = 0;___NEXT_LINE____prompt = function() {___NEXT_LINE____      return (cmdCount++) + ">";___NEXT_LINE____};___NEXT_LINE____```,jp,1,2015-01-20 09:27:07,2015-01-21 10:35:11,
103,MongoDBのCRUD,### Delete___NEXT_LINE____すべてを削除___NEXT_LINE____```___NEXT_LINE____db.<mycollection>.remove({})___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____条件付き削除。次の例ではIDを基に削除___NEXT_LINE____```___NEXT_LINE____db.<mycollection>.remove({_id:<myid>})___NEXT_LINE____```,jp,1,2015-01-20 11:46:26,2015-01-20 11:47:33,
104,MongoDBのpopulation,CustomerSchemaのhearingsheetフィルドをpopulationします。___NEXT_LINE____```___NEXT_LINE____CustomerSchema.statics.load = function(id, cb) {___NEXT_LINE____  this.findOne({___NEXT_LINE____    _id: id___NEXT_LINE____  }).populate({___NEXT_LINE____    path: 'hearingsheet',___NEXT_LINE____    select: '-_id -customer -__v',  // _idとcustomerフィルドを除外___NEXT_LINE____  }).exec(cb);___NEXT_LINE____};___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____使用例。この例では、populateしたdocumentが返されます。___NEXT_LINE____```___NEXT_LINE____Customer.load(customerId, function(err){ ... });___NEXT_LINE____```,jp,1,2015-01-20 12:11:14,2015-01-20 12:17:15,
105,attributeのdirectiveサンプル,Attributeのdirectiveを作成する際に参考用のサンプルコード___NEXT_LINE_______NEXT_LINE____    .directive('specialDisabled',function() {___NEXT_LINE____        return {___NEXT_LINE____          restrict: 'A',___NEXT_LINE____          scope:{specialDisabled: '='},___NEXT_LINE____          link: function(scope, element, attrs) {___NEXT_LINE____            scope.$watch(function(){return scope.specialDisabled}, function(){___NEXT_LINE____              // set disabled attribute here___NEXT_LINE____              element[0].disabled = !scope.specialDisabled;  ___NEXT_LINE____            });___NEXT_LINE____          }___NEXT_LINE____        }___NEXT_LINE____      });___NEXT_LINE_______NEXT_LINE____使用例___NEXT_LINE_______NEXT_LINE____     <input type="checkbox" ng-model="chk">___NEXT_LINE____     <button special-disabled="chk">My Button</button>,jp,1,2015-01-20 20:24:51,2015-01-20 20:24:51,
106,OS Xでのnetstat -ntlp,Linuxでは`netstat -ntlp`を利用してポート解放の確認しますが、`OS X`では`lsof`コマンドを利用。___NEXT_LINE____```___NEXT_LINE____lsof -nP -iTCP -sTCP:LISTEN___NEXT_LINE____```,jp,1,2015-01-21 16:40:06,2015-01-21 16:40:06,
107,普通のfont-family,mspゴシックを避ける風潮且つ見慣れなくてよくわからない游ゴシックを使わないスタイルなfont-familyです___NEXT_LINE_______NEXT_LINE____    font-family: "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, Osaka, "ＭＳ Ｐゴシック", "MS PGothic", sans-serif;,jp,6,2015-01-22 22:21:23,2015-01-22 22:21:23,
108,ローカルファイルの読み込み,```___NEXT_LINE____    BufferedReader reader = new BufferedReader(new FileReader("sample.txt"));___NEXT_LINE____          ___NEXT_LINE____    String read = reader.readLine();___NEXT_LINE____    while(read!= null){___NEXT_LINE____     System.out.println(read);___NEXT_LINE____       read = reader.readLine();___NEXT_LINE____    }___NEXT_LINE____              ___NEXT_LINE____    reader.close();     //fileをクローズ___NEXT_LINE____```,jp,1,2015-01-23 00:07:54,2015-01-23 00:07:54,
109,Macで非表示ファイルを表示させる方法,ターミナルで次のコマンドを貼付ければオーケーです。___NEXT_LINE_______NEXT_LINE____    defaults write com.apple.finder AppleShowAllFiles TRUE && killall Finder,jp,1,2015-01-23 14:22:36,2015-01-23 14:22:36,
110,gitのtrackファイルの一覧表示,`git add `で追加したファイルを全部表示します___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____git ls-files___NEXT_LINE____```,jp,1,2015-01-23 19:36:00,2015-01-23 19:37:18,
111,BaseAdapterを利用して複数のitemレイアウトを構築,ListViewに複数のリストアイテムレイアウトが存在しているときのBaseAdapterのサンプルコード___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____     @Override___NEXT_LINE____        public int getViewTypeCount() {___NEXT_LINE____            return 2;___NEXT_LINE____        }___NEXT_LINE_______NEXT_LINE____        @Override___NEXT_LINE____        public int getItemViewType(int position) {___NEXT_LINE____            return (contactList.get(position).getContactType() == ContactType.CONTACT_WITH_IMAGE) ? 0 : 1;___NEXT_LINE____        }___NEXT_LINE____```,jp,1,2015-01-24 04:14:53,2015-01-24 04:14:53,
112,BaseAdapterのサンプルコード,```___NEXT_LINE____public class MyBaseAdapter extends BaseAdapter{___NEXT_LINE____      ___NEXT_LINE____        private Activity mContext;___NEXT_LINE____  private ArrayList<Map<String, String>> mList;___NEXT_LINE_______NEXT_LINE____   MyBaseAdapter(Activity context){___NEXT_LINE____        this.mContext = context;    ___NEXT_LINE____        mList = new ArrayList<Map<String,String>>();___NEXT_LINE____    }___NEXT_LINE____   ___NEXT_LINE____    @Override___NEXT_LINE____   public int getCount() {___NEXT_LINE____     return mList.size();        ___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____   @Override___NEXT_LINE____   public Object getItem(int position) {       ___NEXT_LINE____        return mList.get(position);___NEXT_LINE____ }___NEXT_LINE_______NEXT_LINE____   @Override___NEXT_LINE____   public long getItemId(int position) {       ___NEXT_LINE____        return position;___NEXT_LINE____    }___NEXT_LINE____   ___NEXT_LINE____        ___NEXT_LINE____    private static class ViewHolder {___NEXT_LINE____       public final TextView mName, mJob;___NEXT_LINE____      ___NEXT_LINE____        public ViewHolder(TextView name, TextView job){___NEXT_LINE____         this.mName = name;___NEXT_LINE____          this.mJob = job;___NEXT_LINE____            ___NEXT_LINE____        }___NEXT_LINE____   }___NEXT_LINE____   ___NEXT_LINE____    @Override___NEXT_LINE____   public View getView(int position, View convertView, ViewGroup parent){___NEXT_LINE_______NEXT_LINE____                  ___NEXT_LINE____        TextView Name, Job;___NEXT_LINE____     /*___NEXT_LINE____       * If convertView is not null, tried reuse it___NEXT_LINE____        * else create LayoutInflater to pack up the row view___NEXT_LINE____        */___NEXT_LINE____     if(convertView == null){            ___NEXT_LINE____            convertView = LayoutInflater.from(mContext).inflate(R.layout.row, parent,false);___NEXT_LINE____            Name = (TextView)convertView.findViewById(R.id.name);___NEXT_LINE____           Job = (TextView)convertView.findViewById(R.id.job);     ___NEXT_LINE____            ___NEXT_LINE____            convertView.setTag(new ViewHolder(Name,Job));___NEXT_LINE____           ___NEXT_LINE____        } else{___NEXT_LINE____         ViewHolder holder = (ViewHolder)convertView.getTag();___NEXT_LINE____           Name = holder.mName;___NEXT_LINE____            Job = holder.mJob;___NEXT_LINE____          ___NEXT_LINE____        }___NEXT_LINE____       ___NEXT_LINE____        ___NEXT_LINE____        @SuppressWarnings("unchecked")___NEXT_LINE____      Map<String,String> rowItem = (Map<String,String>)getItem(position);___NEXT_LINE____     ___NEXT_LINE____        Name.setText(rowItem.get(MainActivity.NAME_KEY));___NEXT_LINE____       Job.setText(rowItem.get(MainActivity.JOB_KEY));     ___NEXT_LINE_______NEXT_LINE____        return convertView;___NEXT_LINE____ }___NEXT_LINE____   ___NEXT_LINE____```,jp,1,2015-01-24 04:15:41,2015-01-24 04:15:41,
113,Androidで画像をリサイズ,画像のサイズを変更したい場合は、必ずDrawableとして取得しなければいけません。___NEXT_LINE_______NEXT_LINE____まず、resourcesからDrawable画像を取得し___NEXT_LINE____```___NEXT_LINE____getActivity().getResources().getDrawable(R.drawable.myicon)___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____次にリサイズを行う___NEXT_LINE____```___NEXT_LINE____// resize image___NEXT_LINE____    private Drawable scaleDrawable(Drawable drawable, int width, int___NEXT_LINE____            height)___NEXT_LINE____    {___NEXT_LINE____        int wi = drawable.getIntrinsicWidth();___NEXT_LINE____        int hi = drawable.getIntrinsicHeight();___NEXT_LINE____        int dimDiff = Math.abs(wi - width) - Math.abs(hi - height);___NEXT_LINE____        float scale = (dimDiff > 0) ? width/(float)wi : height/___NEXT_LINE____                (float)hi;___NEXT_LINE____        Rect bounds = new Rect(0, 0, (int)(scale*wi), (int)(scale*hi));___NEXT_LINE____        drawable.setBounds(bounds);___NEXT_LINE____        return drawable;___NEXT_LINE____    }___NEXT_LINE____```,jp,1,2015-01-24 05:20:40,2015-01-24 05:20:40,
114,TextViewの横にアイコンを差し入れ,TextView一つでアイコンのあるテキストビューが作れます。___NEXT_LINE_______NEXT_LINE____アイコンはDrawableの場合は___NEXT_LINE____```___NEXT_LINE____textView.setCompoundDrawables(myDrawable, null, null, null);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____アイコンはIDの場合は___NEXT_LINE____```___NEXT_LINE____textView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.myicon, 0,0,0);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____XMLレイアウトの場合は___NEXT_LINE____```___NEXT_LINE____<TextView android:text="@string/txtUserName" ___NEXT_LINE____android:id="@+id/txtUserName"___NEXT_LINE____android:layout_width="160dip"___NEXT_LINE____android:layout_height="60dip"___NEXT_LINE____android:gravity="center_vertical"___NEXT_LINE____android:drawableLeft="@drawable/button_icon"___NEXT_LINE____android:drawablePadding="2dip"___NEXT_LINE____/> ___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____**注意！**アイコンに合わせてテキストを縦中央に配置したい場合はandroid:layout_gravityではなく、android:gravityを使うこと。詳細は次のリンクにて___NEXT_LINE_______NEXT_LINE____[http://stackoverflow.com/a/25790843/1799322](http://stackoverflow.com/a/25790843/1799322),jp,1,2015-01-24 05:23:51,2015-01-24 05:55:46,
115,複数画像のロードのサンプルコード,次のイベントを___NEXT_LINE_______NEXT_LINE____* single\_img\_loaded\_callback - 一枚の画像がロードされたとき___NEXT_LINE____* all\_imgs\_loaded\_callback - すべての画像がロードされたとき___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____  // アプリケーション層___NEXT_LINE____    var img_to_loaded = ["http://somewhere/j.png","http://somewhere/e.png"];___NEXT_LINE____    var single_img_loaded_callback = function(){___NEXT_LINE____        // １枚の画像がロードしたら発生するイベント___NEXT_LINE____     console.log("one image loaded");___NEXT_LINE____    };___NEXT_LINE____  var all_imgs_loaded_callback = function() {___NEXT_LINE____     // 全部の画像がロードしたら発生するイベント___NEXT_LINE____     console.log("all image loaded");___NEXT_LINE____    };___NEXT_LINE_______NEXT_LINE____  // components 層___NEXT_LINE____ var imgs = [];___NEXT_LINE____  var flag_img_loaded = 0;___NEXT_LINE____    for (var i=0;i<70;i++) {___NEXT_LINE____        var img = new Image();___NEXT_LINE____      img.src = "_a.jpg";___NEXT_LINE____     img.onload = function(){___NEXT_LINE____            flag_img_loaded ++ ;___NEXT_LINE____            if(imgs.length <= flag_img_loaded){___NEXT_LINE____             if(typeof all_imgs_loaded_callback === "function"){___NEXT_LINE____                 all_imgs_loaded_callback();___NEXT_LINE____             }___NEXT_LINE____           }else{___NEXT_LINE____              if(typeof single_img_loaded_callback === "function"){___NEXT_LINE____                   single_img_loaded_callback();___NEXT_LINE____               }___NEXT_LINE____           }___NEXT_LINE____       }___NEXT_LINE____       imgs.push(img);___NEXT_LINE____ };___NEXT_LINE____```,jp,1,2015-01-26 02:35:36,2015-01-26 02:35:36,
116,スクロールアニメーション,スクロールすると、フレームが変わるアルゴリズム___NEXT_LINE_______NEXT_LINE____ * declaring layerはアルゴリズムを実行する際に使う変数___NEXT_LINE____ * components layerはアルゴリズムのコード___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____   // declaring layer___NEXT_LINE____  // * 指定のpixelをスクロールしたら1フレームを流す___NEXT_LINE____  var pixel_per_frame = 20;___NEXT_LINE____   // * アニメーションを行うcanvas要素___NEXT_LINE____ var animator = document.getElementsByClassName("animator")[0];___NEXT_LINE____  // * Image tagの配列, imgs[0].srcはアニメーションに使うフレーム___NEXT_LINE____   var imgs = [.....]___NEXT_LINE____  // * 次をTRUEにすると、アニメーションスタート。用途としては、画像のロード___NEXT_LINE____   var trigger_to_play = true;___NEXT_LINE_______NEXT_LINE____ // components layer___NEXT_LINE____ var last_changed_val = 0;___NEXT_LINE____   var interval_event = function(){___NEXT_LINE____        // 周期的に発生するイベント___NEXT_LINE____     if(trigger_to_play){___NEXT_LINE____            var _t = s1[0].getBoundingClientRect().top;___NEXT_LINE____         if(last_changed_val != _t){___NEXT_LINE____             last_changed_val = _t;___NEXT_LINE_______NEXT_LINE____              var frame_play = parseInt(((0-_t) % (imgs.length * pixel_per_frame))/pixel_per_frame);___NEXT_LINE____              if(frame_play >= 0){___NEXT_LINE____animator.getContext("2d").drawImage(imgs[frame_play],0,0,300,300);  ___NEXT_LINE____                }___NEXT_LINE____               ___NEXT_LINE____            }___NEXT_LINE____       }___NEXT_LINE____   };___NEXT_LINE____```,jp,1,2015-01-26 02:51:34,2015-01-26 02:51:34,
117,ネットワークの再接続 for Ubuntu,Ubuntuを使っていて，ネットワークに繋がらなくなり，Network-Managerが表示されない場合に活用してください。___NEXT_LINE_______NEXT_LINE____まずは，/etc/NetworkManager/NetworkManager.confを開きます（もちろん，sudoで）。___NEXT_LINE_______NEXT_LINE____    sudo gedit NetworkManager.conf___NEXT_LINE_______NEXT_LINE____その中のmanagedの値をfalseからtrueにします。___NEXT_LINE_______NEXT_LINE____そして，Network-Managerサービスを再起動します。___NEXT_LINE_______NEXT_LINE____    sudo service network-manager restart___NEXT_LINE_______NEXT_LINE____これにより，ネットワークにつながることができます。,jp,4,2015-01-26 09:37:15,2015-01-26 09:37:15,
118,Route-UIのログイン済み確認,AngularJSのroute-uiで使う、ログインしたかどうかを確認するスニペット___NEXT_LINE____```___NEXT_LINE____// Check if the user is connected___NEXT_LINE____var checkLoggedin = function($q, $timeout, $http, $location) {___NEXT_LINE____  // Initialize a new promise___NEXT_LINE____  var deferred = $q.defer();___NEXT_LINE_______NEXT_LINE____  // Make an AJAX call to check if the user is logged in___NEXT_LINE____  $http.get('/loggedin').success(function(user) {___NEXT_LINE____    // Authenticated___NEXT_LINE____    if (user !== '0') $timeout(deferred.resolve);___NEXT_LINE_______NEXT_LINE____    // Not Authenticated___NEXT_LINE____    else {___NEXT_LINE____      $timeout(deferred.reject);___NEXT_LINE____      $location.url('/login');___NEXT_LINE____    }___NEXT_LINE____  });___NEXT_LINE_______NEXT_LINE____  return deferred.promise;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____利用サンプル、`/auth`はプライベートページなので、ログイン済みか確認する必要がある___NEXT_LINE____```___NEXT_LINE____$meanStateProvider___NEXT_LINE____  .state('auth', {___NEXT_LINE____    url: '/auth',___NEXT_LINE____    templateUrl: 'users/views/index.html',___NEXT_LINE____    resolve: {___NEXT_LINE____      loggedin: checkLoggedin___NEXT_LINE____    }___NEXT_LINE____  })___NEXT_LINE____```,jp,1,2015-01-26 14:07:11,2015-01-26 14:08:51,
119,新しい配列を作成し、その中身を同時に設定する,javascriptで、例えば、[0, 1, 2, 3, 4]を作成したいときは以下のように書きます___NEXT_LINE_______NEXT_LINE____    Array.apply(null, {length: 5}).map(function (e, i) {___NEXT_LINE____        return i;___NEXT_LINE____    });___NEXT_LINE_______NEXT_LINE____まあいろいろできますね___NEXT_LINE_______NEXT_LINE____    function rand(m, n) {___NEXT_LINE____        return Array.apply(null, {length: m}).map(function() {___NEXT_LINE____            return Array.apply(null, {length: n}).map(function () {___NEXT_LINE____                return Math.random() < 0.5 ? 0 : 1;___NEXT_LINE____            });___NEXT_LINE____        });___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____ちなみにArray(5).map(function () { console.log("called"); });みたいな書き方は動きません。.forEachも同様です<br>___NEXT_LINE____動かない理由は、新しく作ったArray(5)の中身が空だからですね<br>___NEXT_LINE____<script>___NEXT_LINE____    function rand(m, n) {___NEXT_LINE____        return Array.apply(null, {length: m}).map(function() {___NEXT_LINE____            return Array.apply(null, {length: n}).map(function () {___NEXT_LINE____                return Math.random() < 0.5 ? 0 : 1;___NEXT_LINE____            });___NEXT_LINE____        });___NEXT_LINE____    }___NEXT_LINE____    console.log(rand(10, 10));___NEXT_LINE____</script>,jp,6,2015-01-26 17:02:07,2015-01-26 17:02:07,
120,一定時間ごとにメソッドを呼ぶ,一つ以下の実装のようなloopメソッドを作成してしまえば、<br>___NEXT_LINE____どのような関数もループできるので楽です<br>___NEXT_LINE_______NEXT_LINE____    function loop(func, args) { // func: 関数, args: funcの引数を入れた配列___NEXT_LINE____        setTimeout(function () {___NEXT_LINE____            func.apply(null, args);___NEXT_LINE____            loop(func, args);___NEXT_LINE____        }, 1000); // 1000ミリ秒___NEXT_LINE____    };    ___NEXT_LINE_______NEXT_LINE____    var sayHi = function () {___NEXT_LINE____        console.log("Hi");___NEXT_LINE____    };___NEXT_LINE____    var greet = function (firstName, lastName) {___NEXT_LINE____        console.log("Hello, " + firstName + " " + lastName + ".");___NEXT_LINE____    };___NEXT_LINE____    ___NEXT_LINE____    loop(sayHi); // 引数なしの時はこう___NEXT_LINE____    loop(greet, ["Yuya", "Sato"]); // 引数ありの時は配列にして第二引数に入れてあげてください___NEXT_LINE_______NEXT_LINE____実行すると、一秒毎に Hi と Hello, Yuya Sato.　が表示されます,jp,6,2015-01-26 17:38:34,2015-01-26 17:38:34,
121,AngularJSの$resourceサンプル,queryのサンプル___NEXT_LINE____```___NEXT_LINE____Customer.query(); // すべて___NEXT_LINE____Customer.query({customerId: someoneId }); // customerIdを指定___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____updateサンプル___NEXT_LINE____```___NEXT_LINE____Customer.update({customerId: someoneId }, {name: 'tanaka'}, success_callback, error_callback);___NEXT_LINE____// parameter1　customerの指定___NEXT_LINE____// parameter2　postするクエリ___NEXT_LINE____// parameter3　成功したコールバック___NEXT_LINE____// parameter4　失敗したコールバック___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____Factoryのサンプル___NEXT_LINE____```___NEXT_LINE____angular.module('mean.teluruadmin').factory('Customer', [ '$resource', ___NEXT_LINE____  function($resource) {___NEXT_LINE____    return $resource('/json/customers/:customerId', {}, {___NEXT_LINE____       query:  {method: 'GET', params:{customerId:''},isArray: true},___NEXT_LINE____          update: {method: 'PUT'},___NEXT_LINE____        create: {method: 'POST', url: '/json/customers/'},___NEXT_LINE____    });___NEXT_LINE____  }___NEXT_LINE____])___NEXT_LINE____```,jp,1,2015-01-27 10:08:20,2015-01-27 11:34:36,
122,AngularJSの$httpのサンプル,```___NEXT_LINE____$http.get('/article/'+$stateParams.articleId).success(function(data) {___NEXT_LINE____  $scope.article = data;___NEXT_LINE____});___NEXT_LINE____```,jp,1,2015-01-27 11:58:08,2015-01-27 11:58:08,
123,Laravelのファイル認証のサンプル,Laravelのファイル認証のサンプル___NEXT_LINE____```___NEXT_LINE____// Validate Images___NEXT_LINE____$rules = ['profile' => 'max:20000|mimes:jpeg'];___NEXT_LINE____$validate = Validator::make(Input::all(),$rules);___NEXT_LINE____// process the form___NEXT_LINE____if ($validator->fails()) {___NEXT_LINE____    var_dump($validator->errors());  // it will print the error logs for you.___NEXT_LINE____} else {___NEXT_LINE____    return 'success';___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-01-28 10:57:41,2015-01-28 10:57:41,
124,JavaでURLをUTF8にエンコード,java.net.URIクラスは日本語をパーツごとに自動的にエンコードをしてくれる便利なクラスです。___NEXT_LINE_______NEXT_LINE____サンプルコードの結果は`http://example.com/a/%E3%81%82?a=%E3%81%82`___NEXT_LINE____```___NEXT_LINE____URI uri = new URI(___NEXT_LINE____    "http",___NEXT_LINE____    "example.com",___NEXT_LINE____    "/a/あ",___NEXT_LINE____    "a=あ",___NEXT_LINE____    null ___NEXT_LINE____);___NEXT_LINE____String url = uri.toASCIIString();___NEXT_LINE____```,jp,1,2015-01-29 22:17:27,2015-01-29 22:17:27,
125,express.jsでリクエストのクエリを取得,Node.JSのミドルウェアexpress.jsを使ってGETメソッドとPOSTメソッドのクエリパラメータを取得する方法は___NEXT_LINE_______NEXT_LINE____GETメソッドのクエリ___NEXT_LINE____```___NEXT_LINE____exports.search = function(req, res){___NEXT_LINE____  res.json(req.query);___NEXT_LINE____};___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____POSTメソッドのパラメータ___NEXT_LINE____```___NEXT_LINE____exports.search = function(req, res){___NEXT_LINE____  res.json(req.body);___NEXT_LINE____};___NEXT_LINE____```,jp,1,2015-01-30 03:00:08,2015-01-30 03:00:08,
126,AngularJSのスコープシンボル,`=`はtwo-way binding ___NEXT_LINE_______NEXT_LINE____`@`はone-way binding___NEXT_LINE_______NEXT_LINE____### two-way bindingとone-way bindingの定義___NEXT_LINE_______NEXT_LINE____two-way bindingはどの変数にもつながっています。次の例というと、directiveAとdirectiveBの変数personは同期されて、どっちを編集しても相手の変数は変わります。___NEXT_LINE____```___NEXT_LINE____<directive-a ng-model="person"></directive-a>___NEXT_LINE____<directive-b ng-model="person"></directive-b>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____一方、one-way bindingは隔離されているので、directiveAを編集してもdirectiveBには反映しません。directiveBを編集してもdirectiveAは反映しません。,jp,1,2015-01-30 15:48:46,2015-01-30 15:48:46,
127,MongoDBでフィルド一つのみ更新,`$set`を加えて更新すると、指定されたフィルドのみ更新されます。もし$setを加えず更新すると、documentsが上書きされます。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____db.myCollection.update({_id: ObjectId('mhwgr5pxz42')}, { $set: { dateField: new Date(2011, 0, 1)}}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____参照リンク - mongoDBの公式リファレンス___NEXT_LINE_______NEXT_LINE____[http://www.mongodb.org/display/DOCS/Updating#Updating-update%28%29](http://www.mongodb.org/display/DOCS/Updating#Updating-update%28%29),jp,1,2015-01-31 00:14:43,2015-01-31 00:14:43,
128,C++でプライベートな名前空間,C++で同一名前空間内からは参照したく、外部からは参照されたくない名前空間の実装___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    namespace uniq {___NEXT_LINE____        namespace {___NEXT_LINE____            namespace z{// private___NEXT_LINE____                int helper(int i){return i;}___NEXT_LINE____            }// namespace z___NEXT_LINE____        }// unnamed namespace___NEXT_LINE____    ___NEXT_LINE____        int func0(){return z::helper(0);}___NEXT_LINE____        namespace z{}___NEXT_LINE____    }//  namespace uniq___NEXT_LINE____    ___NEXT_LINE_______NEXT_LINE____    ___NEXT_LINE____名前空間zは未実装で上書きされ、外部から参照できない。___NEXT_LINE_______NEXT_LINE____    int main(int argc, char *argv[]){___NEXT_LINE____        printf("%d\n",uniq::func0());___NEXT_LINE____      //printf("%d\n",uniq::z::helper(0));___NEXT_LINE____      //printf("%d\n",::z::helper(0));___NEXT_LINE____        return 0;___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____仕様上では可能なのか(認められているか)不明,jp,2,2015-01-31 00:27:41,2015-01-31 00:30:10,
129,C++でコンパイル時定数配列,C++でコンパイル時に要素数を変える配列の生成___NEXT_LINE_______NEXT_LINE____    #include <array>      //std::array___NEXT_LINE____    #include <cstddef>    //std::size_t___NEXT_LINE____    #include <type_traits>//std::result_of___NEXT_LINE____    #include <utility>    //std::integer_sequence___NEXT_LINE____    ___NEXT_LINE____    namespace filled {___NEXT_LINE____        inline namespace {___NEXT_LINE____            namespace z{// private___NEXT_LINE____    #if (__cplusplus<=199711L)___NEXT_LINE____                static_assert(false,"not support.");___NEXT_LINE____    #elif (__cplusplus==201103L) // C++11___NEXT_LINE____                template <size_t ...>             struct index_sequence{};___NEXT_LINE____                template <size_t N, size_t ...Is> struct make_index_sequence          : make_index_sequence<N-1,N-1,Is...>{};___NEXT_LINE____                template <size_t ...Is>           struct make_index_sequence<0,Is...> : index_sequence<Is...>{};___NEXT_LINE____    #elif (__cplusplus==201305L)// C++14___NEXT_LINE____                using std::index_sequence;___NEXT_LINE____                using std::make_index_sequence;___NEXT_LINE____    #endif/* make_index_sequence */___NEXT_LINE____                using std::size_t;___NEXT_LINE____                template <typename _Typ, typename _Func, size_t ...Is >___NEXT_LINE____                constexpr std::array<_Typ,sizeof...(Is)> make_sequence(_Func f, index_sequence<Is...>){___NEXT_LINE____                    return {f(Is)...};___NEXT_LINE____                }___NEXT_LINE____                template <typename _Typ, size_t ...Is >___NEXT_LINE____                constexpr std::array<_Typ,sizeof...(Is)> make_array(_Typ val, index_sequence<Is...>){___NEXT_LINE____                    return {(static_cast<void>(Is),val)...};___NEXT_LINE____                }___NEXT_LINE____            }// namespace z___NEXT_LINE____            template <size_t _Size, typename _Func,typename _Typ = typename std::result_of<_Func(size_t)>::type>___NEXT_LINE____            constexpr  std::array<_Typ,_Size> sequence(_Func f){___NEXT_LINE____                return z::make_sequence<_Typ>(f, z::make_index_sequence<_Size>());___NEXT_LINE____            }___NEXT_LINE____            template <size_t _Size, typename _Typ >___NEXT_LINE____            constexpr std::array<_Typ,_Size> array(_Typ val){___NEXT_LINE____                return z::make_array(val, z::make_index_sequence<_Size>() );___NEXT_LINE____            }___NEXT_LINE____        }// unnamed namespace___NEXT_LINE____        namespace z{}___NEXT_LINE____    }//  namespace filled___NEXT_LINE_______NEXT_LINE____コンパイル時に生成される(constexpr)ならOK___NEXT_LINE____std::arrayならconstつけなくともコンパイル時定数を渡す。___NEXT_LINE____sequenceの場合、ラムダ式はC++の仕様上(関数ポインタへのキャストが自明でないので)constexprで受けることは不可,スタティックメンバ関数なら可、autoだけなら可___NEXT_LINE_______NEXT_LINE____    #include <iostream>___NEXT_LINE____    #define print_array(X) _print(#X,X)___NEXT_LINE____    template <class _Type>___NEXT_LINE____    void _print(const char *const name,_Type& v) {___NEXT_LINE____        cout << name;___NEXT_LINE____        for (int i=0; i<v.size(); i++) {___NEXT_LINE____            cout << "["<<i<<"]:"<< v[i] <<"\t";___NEXT_LINE____        }___NEXT_LINE____        cout << endl;___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    int main(int argc, const char *argv[]){___NEXT_LINE____        const int count = 3;___NEXT_LINE____        constexpr double v_d = 10.0;___NEXT_LINE____        constexpr auto a = filled::array<count>(v_d);___NEXT_LINE____        print_array(a);___NEXT_LINE_______NEXT_LINE____        struct inner{___NEXT_LINE____            static constexpr int func(int i){return 2*i;}___NEXT_LINE____        };___NEXT_LINE____        constexpr auto n = filled::sequence<2*count>(inner::func);___NEXT_LINE____        print_array(n);___NEXT_LINE____        return 0;___NEXT_LINE____    },jp,2,2015-01-31 01:06:38,2015-01-31 01:10:33,
130,C言語用数学定数,C言語で使う数学定数のコピー___NEXT_LINE_______NEXT_LINE____    #define M_E         2.71828182845904523536028747135266250   /* e              */___NEXT_LINE____    #define M_LOG2E     1.44269504088896340735992468100189214   /* log2(e)        */___NEXT_LINE____    #define M_LOG10E    0.434294481903251827651128918916605082  /* log10(e)       */___NEXT_LINE____    #define M_LN2       0.693147180559945309417232121458176568  /* loge(2)        */___NEXT_LINE____    #define M_LN10      2.30258509299404568401799145468436421   /* loge(10)       */___NEXT_LINE____    #define M_PI        3.14159265358979323846264338327950288   /* pi             */___NEXT_LINE____    #define M_PI_2      1.57079632679489661923132169163975144   /* pi/2           */___NEXT_LINE____    #define M_PI_4      0.785398163397448309615660845819875721  /* pi/4           */___NEXT_LINE____    #define M_1_PI      0.318309886183790671537767526745028724  /* 1/pi           */___NEXT_LINE____    #define M_2_PI      0.636619772367581343075535053490057448  /* 2/pi           */___NEXT_LINE____    #define M_2_SQRTPI  1.12837916709551257389615890312154517   /* 2/sqrt(pi)     */___NEXT_LINE____    #define M_SQRT2     1.41421356237309504880168872420969808   /* sqrt(2)        */___NEXT_LINE____    #define M_SQRT1_2   0.707106781186547524400844362104849039  /* 1/sqrt(2)      */,jp,2,2015-01-31 01:12:39,2015-01-31 01:12:39,
131,Mac OSXでMongoDBを起動するBash Script,dbpathを正しいパスに変更___NEXT_LINE____```___NEXT_LINE____#!/bin/bash___NEXT_LINE____dbpath="/Users/my_name/Documents/Vagrant/Mean/mongodb_storage/"___NEXT_LINE____result=$(lsof -i | grep mongod)___NEXT_LINE____if ${#result}>0___NEXT_LINE____then___NEXT_LINE____  killall mongod___NEXT_LINE____fi___NEXT_LINE____rm -fr ${dbpath}"mongod.lock"___NEXT_LINE_______NEXT_LINE____mongod --dbpath ${dbpath} &___NEXT_LINE____```,jp,1,2015-01-31 12:08:18,2015-01-31 12:08:31,
132,他のdirectoryからgruntを実行するコマンド,--baseオプションにプロジェクトのパス、--gruntfileオプションにプロジェクトのgruntfileのパス___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____grunt --base "/var/myproject" --gruntfile "/var/myproject/grunt.js" --force___NEXT_LINE____```,jp,1,2015-01-31 13:20:36,2015-01-31 13:21:46,
133,MongoDBのドキュメントシード,MongoDBにdocumentsをインポートするときに次のオプションは最低限です。___NEXT_LINE____```___NEXT_LINE____mongoimport --db mean-dev --collection users --file seed.js --jsonArray___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____また、ファイル構造によってjsonArrayを付ける必要性あるかないかも変わってきます。___NEXT_LINE_______NEXT_LINE____次のファイル構造は付ける必要があります。___NEXT_LINE____```___NEXT_LINE____{ ___NEXT_LINE____  "username" : "root", ___NEXT_LINE____   "nickname" : "高級管理者", ___NEXT_LINE____},___NEXT_LINE____{ ___NEXT_LINE____  "username" : "admin", ___NEXT_LINE____  "nickname" : "中級管理者", ___NEXT_LINE____},___NEXT_LINE____```,jp,1,2015-01-31 13:56:39,2015-01-31 13:56:57,
134,ブラウザの画面サイズを取得するMixin,このMixinは２つのstateを用意してくれます。それは`windowHeight`と`windowWidth`になります。機能としては___NEXT_LINE_______NEXT_LINE____* 遅延型リサイズ___NEXT_LINE____* Two-way-bindingの効果___NEXT_LINE_______NEXT_LINE____Mixinのコード___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____// This mixins is used as getting windowWidth and windowHeight as two-way-binding.___NEXT_LINE____// ___NEXT_LINE____// if component is rendered with `windowWidth` or `windowHeight` variable will be updated___NEXT_LINE____// when browser is resized. Due to windowWidth and windowHeight is two-way binding ___NEXT_LINE____// variable___NEXT_LINE_______NEXT_LINE____var DelayResizeMixin = {___NEXT_LINE____ delay: 700, // delay resizing, in terms of milliseconds___NEXT_LINE____ getInitialState: function(){___NEXT_LINE____        return {___NEXT_LINE____            windowWidth: window.innerWidth,___NEXT_LINE____         windowHeight: window.innerHeight___NEXT_LINE____        }___NEXT_LINE____   },___NEXT_LINE____  componentDidMount: function() {___NEXT_LINE____     window.addEventListener('resize', this.handleResize);___NEXT_LINE____   },___NEXT_LINE____  handleResize: function() {___NEXT_LINE____      var _this = this;___NEXT_LINE____       clearTimeout(_this.timeoutId);___NEXT_LINE____      _this.timeoutId = setTimeout(function(){___NEXT_LINE____            _this.setState({___NEXT_LINE____                windowWidth: window.innerWidth,___NEXT_LINE____             windowHeight: window.innerHeight___NEXT_LINE____            });___NEXT_LINE____     }, this.delay); ___NEXT_LINE____    },___NEXT_LINE____  componentDidUnmount: function() {___NEXT_LINE____       window.removeEventListener('resize', this.handleResize);___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____module.exports = DelayResizeMixin;___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____var Curtain = React.createClass({___NEXT_LINE____     mixins: [DelayResizeMixin],___NEXT_LINE____     render: (<div style={{width: this.state.windowWidth, height: this.state.windowHeight}} />);___NEXT_LINE____});___NEXT_LINE____```,jp,1,2015-02-08 04:08:44,2015-02-08 04:08:44,
135,Linuxユーザのパスワードを変更,一般ユーザの場合は___NEXT_LINE____```___NEXT_LINE____passwd___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____スーパーユーザーの場合はsudoを付けましょう___NEXT_LINE____```___NEXT_LINE____sudo passwd___NEXT_LINE____```,jp,1,2015-02-17 12:19:31,2015-02-17 12:19:31,
136,CentOSで起動時に実行するスクリプト /etc/profile.d,/etc/profile.dにshファイルを追加すれば、起動時にそのスクリプトが実行されます。___NEXT_LINE_______NEXT_LINE____例として、mypath.shを作って、内容は下記になります。___NEXT_LINE____```___NEXT_LINE____PATH=$PATH:/my/global/environemt/path___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____これを/etc/profile.d/mypath.shに追加すると、次回起動時にmypath.shが実行され、/my/global/environemt/pathという環境変数が自動に追加されます。,jp,1,2015-02-17 14:26:08,2015-02-17 14:26:08,
137,cssでdiv要素の背景をフルースクリン,```___NEXT_LINE____background: url(imgs/mybackground.png) no-repeat fixed center center / cover transparent;___NEXT_LINE____```,jp,1,2015-03-03 11:03:29,2015-03-03 11:03:29,
138,firefox osのforbid-certified-appsをfalseに設定,```___NEXT_LINE____adb shell___NEXT_LINE____stop b2g___NEXT_LINE____cd /data/b2g/mozilla/*.default/___NEXT_LINE____echo 'user_pref("devtools.debugger.forbid-certified-apps", false);' >> prefs.js___NEXT_LINE____start b2g___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____参照ページ___NEXT_LINE_______NEXT_LINE____[https://developer.mozilla.org/ja/Firefox\_OS/Using\_the\_App\_Manager](https://developer.mozilla.org/ja/Firefox\_OS/Using\_the\_App\_Manager),jp,1,2015-03-08 00:08:57,2015-03-08 00:11:52,
139,yum installが出来ない問題,mysqlサーバという定番のものをインストールしようとしたら、パーケッジが見つかりませんという問題が発生しました。___NEXT_LINE____```___NEXT_LINE____[edisonthk@Edisonthk ~]$ sudo yum install mysql-server___NEXT_LINE____読み込んだプラグイン:fastestmirror___NEXT_LINE____base                                                     | 3.6 kB     00:00     ___NEXT_LINE____epel/x86_64/metalink                                     |  14 kB     00:00     ___NEXT_LINE____extras                                                   | 3.4 kB     00:00     ___NEXT_LINE____openlogic                                                | 1.3 kB     00:00     ___NEXT_LINE____updates                                                  | 3.4 kB     00:00     ___NEXT_LINE____webtatic                                                 | 3.6 kB     00:00     ___NEXT_LINE____Loading mirror speeds from cached hostfile___NEXT_LINE____ * epel: mirror.umd.edu___NEXT_LINE____ * webtatic: us-east.repo.webtatic.com___NEXT_LINE____パッケージ mysql-server は利用できません。___NEXT_LINE____エラー: 何もしません___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____解消法としては`yum clean all`をしてから、`yum install`をします。___NEXT_LINE____```___NEXT_LINE____yum clean all___NEXT_LINE____```,jp,1,2015-03-08 00:52:06,2015-03-08 00:52:06,
140,JavascriptでPOST/GET,こんな感じ？___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    function createXMLHttpRequest() {___NEXT_LINE____        if (window.XMLHttpRequest) {___NEXT_LINE____            return new XMLHttpRequest({ mozSystem: true })___NEXT_LINE____        } else if (window.ActiveXObject) {___NEXT_LINE____            try {___NEXT_LINE____                return new ActiveXObject("Msxml2.XMLHTTP")___NEXT_LINE____            } catch (e) {___NEXT_LINE____                try {___NEXT_LINE____                    new ActiveXObject("Microsoft.XMLHTTP")___NEXT_LINE____                } catch (e2) {___NEXT_LINE____                    return null___NEXT_LINE____                }___NEXT_LINE____            }___NEXT_LINE____        } else {___NEXT_LINE____            return null___NEXT_LINE____        }___NEXT_LINE____    }___NEXT_LINE____    function toSource( elm ){___NEXT_LINE____        //http://www.ninxit.com/blog/2010/01/31/localstorage-%E3%81%A7%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E8%A8%AD%E5%AE%9A%E3%81%AE%E7%AE%A1%E7%90%86/___NEXT_LINE____        var out = '';___NEXT_LINE____        for( var key in elm ){___NEXT_LINE____            if( out != '' ) out += '&';___NEXT_LINE____            out += key + "=" + elm[key];___NEXT_LINE____        }___NEXT_LINE____        return out;___NEXT_LINE____    }___NEXT_LINE____    //送信ボタンが押されたときの処理___NEXT_LINE____    function send_get() {___NEXT_LINE____        var url = "http://ip.jsontest.com";___NEXT_LINE____        post_or_get_string(url, "GET", "", function(sucsess, res_text){___NEXT_LINE____            if(sucsess != false){___NEXT_LINE____                var result = document.getElementById("result_get");___NEXT_LINE____                var text = document.createTextNode(decodeURI(res_text));___NEXT_LINE____                if ("" !== text && null != text) {___NEXT_LINE____                    result.appendChild(text);___NEXT_LINE____                }___NEXT_LINE____            }___NEXT_LINE____        });___NEXT_LINE____    }___NEXT_LINE____    var post_or_get_string = function (url, method, param_obj, callback) {___NEXT_LINE____        //http://www.gesource.jp/programming/javascript/20060509.html___NEXT_LINE____        console.log("function post_or_get_string are called");___NEXT_LINE____        //POSTかGETじゃないならエラー___NEXT_LINE____        if ("POST" != method && "GET" != method) {___NEXT_LINE____            console.log("err: Function 'post_or_get_string' receive an incorrect value");___NEXT_LINE____            return null;___NEXT_LINE____        }___NEXT_LINE____        var request = createXMLHttpRequest();___NEXT_LINE____        var param = toSource(param_obj);___NEXT_LINE____        if ("POST" === method) {___NEXT_LINE____            //http://so-zou.jp/web-app/tech/programming/javascript/ajax/post.htm___NEXT_LINE____            request.open(method, url, true);___NEXT_LINE____            //サーバに対して解析方法を指定する___NEXT_LINE____            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');___NEXT_LINE____            request.send(param);___NEXT_LINE____        } else {___NEXT_LINE____            var get_url = url + "?" + param;___NEXT_LINE____            request.open(method, get_url, true);___NEXT_LINE____            request.send("");___NEXT_LINE____        }___NEXT_LINE____        request.onreadystatechange = function () {___NEXT_LINE____            var READYSTATE_COMPLETED = 4;___NEXT_LINE____            var HTTP_STATUS_OK = 200;___NEXT_LINE____            ___NEXT_LINE____            if (request.readyState == READYSTATE_COMPLETED) {___NEXT_LINE____                //受信し、ました___NEXT_LINE____                if(request.status == HTTP_STATUS_OK){___NEXT_LINE____                    //受信完了時の処理___NEXT_LINE____                    console.log(request.responseText);___NEXT_LINE____                    callback(true, request.responseText);___NEXT_LINE____                }else{___NEXT_LINE____                    callback(false);___NEXT_LINE____                }___NEXT_LINE____            }___NEXT_LINE____        }___NEXT_LINE____    }___NEXT_LINE____    //送信ボタンにonclickイベントを追加___NEXT_LINE____    window.onload = function () {___NEXT_LINE____        document.getElementById("getbutton").onclick = send_get;___NEXT_LINE____        console.log("document.getElementById.onclic");___NEXT_LINE____    }___NEXT_LINE____,jp,7,2015-03-08 01:12:00,2015-03-08 02:05:16,
141,CentOSのバージョンチェック,```___NEXT_LINE____cat /etc/redhat-release___NEXT_LINE____```,jp,1,2015-03-08 01:12:27,2015-03-08 01:12:27,
142,hellow world ruby,#  hellow world___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____print("hellow world")___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____```,jp,19,2015-03-08 01:24:50,2015-03-08 01:24:50,
143,UbuntuのApache2のconfig設定ファイルサンプル,sites-availableの中に必用なサイトのconfig設定ファイルのサンプルコード___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<VirtualHost *:80>___NEXT_LINE____  ServerAdmin webmaster@edisonthk.com___NEXT_LINE____ ServerName playground.edisonthk.com___NEXT_LINE____ ServerAlias playground.edisonthk.com___NEXT_LINE_______NEXT_LINE____    DocumentRoot /var/www/edisonthk/playground___NEXT_LINE____  ___NEXT_LINE____    ___NEXT_LINE____    ErrorLog /var/log/apache2/error.log___NEXT_LINE____ <Directory /var/www/edisonthk/>     ___NEXT_LINE____        Options Indexes FollowSymLinks MultiViews___NEXT_LINE____       AllowOverride All___NEXT_LINE____       Order allow,deny___NEXT_LINE____        allow from all      ___NEXT_LINE____    </Directory>___NEXT_LINE____</VirtualHost>___NEXT_LINE____```,jp,1,2015-03-08 02:34:45,2015-03-08 02:34:45,
144,UbuntuのApache2のProxy設定ファイルサンプル,Apache2にrailsやnodeJSなどのウェブサーバーが同じサーバーに実行するときに、sites-availableの中のサイト設定ファイルは下記になります。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<VirtualHost *:80>___NEXT_LINE____  ServerAdmin     webmaster@localhost___NEXT_LINE____ ServerName  forruby.no-ip.co.uk___NEXT_LINE____ ServerAlias forruby.no-ip.co.uk___NEXT_LINE_______NEXT_LINE____# a2ensite to enable this site in order to perform proxy___NEXT_LINE_______NEXT_LINE____ ProxyRequests off___NEXT_LINE_______NEXT_LINE____   <Proxy *>___NEXT_LINE____       Order deny,allow___NEXT_LINE____        Allow from all___NEXT_LINE____  </Proxy>___NEXT_LINE____    <Location / >___NEXT_LINE____       ProxyPass       http://localhost:3001/___NEXT_LINE____      ProxyPassReverse    http://localhost:3001/___NEXT_LINE____  </Location>___NEXT_LINE____</VirtualHost>___NEXT_LINE____```,jp,1,2015-03-08 02:38:04,2015-03-08 02:38:04,
145,Emacsでソートする,Emacsを用いてソートする際に便利なコマンドをまとめました。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    M-x sort-lines___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____リージョンを行の並びとみなし、行全体のテキストを比較して（昇順に）ソートする。 数引数を指定すると降順にソートする。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    M-x sort-paragraphs___NEXT_LINE_______NEXT_LINE____リージョンを段落の並びとみなし、（先頭の空行を除く） 段落全体のテキストを比較して（昇順に）ソートする。 数引数を指定すると降順にソートする。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    M-x sort-pages___NEXT_LINE_______NEXT_LINE____リージョンをページの並びとみなし、（先頭の空行を除く） ページ全体のテキストを比較して（昇順に）ソートする。 数引数を指定すると降順にソートする。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    M-x sort-fields___NEXT_LINE_______NEXT_LINE____リージョンを行の並びとみなし、 行の1つの欄を比較して（昇順に）ソートする。 欄は白文字で区切られる。 つまり、行の始めにある白文字でない文字の並びが第1欄、 そのつぎの空白でない文字の並びが第2欄、というようになる。___NEXT_LINE____どの欄をキーとしてソートするかは、 1を指定すれば第1欄、というように数引数で指定する。 負の値を指定したときは左からでなく右から欄を数える。 つまり、-1は最後の欄でソートする。 複数の行において欄の値が同一の場合、 バッファ上のもとの順序が保存される。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    M-x sort-numeric-fields___NEXT_LINE_______NEXT_LINE____M-x sort-fieldsと同様だが、 指定した欄を行ごとに数値に変換し、その数値同士を比較する。 `10'はアルファベット順では`2'よりまえにくるが、 数値として見れば`2'よりあとにくる。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    M-x sort-columns___NEXT_LINE_______NEXT_LINE____M-x sort-fieldsと同様だが、行の比較に使うテキストは 固定文字位置からとる。 以下の説明を参照のこと。___NEXT_LINE_______NEXT_LINE____    M-x reverse-region___NEXT_LINE_______NEXT_LINE____リージョン内の行の順番を逆にする。 欄や文字位置でソートするコマンドは降順にはソートできないので、 昇順にソートしたあと降順に並べ替えるのに役立つ。___NEXT_LINE_______NEXT_LINE____ただし，M-xはWinキー+xのことです(Macキーボードでは不明)。,jp,4,2015-03-09 09:04:39,2015-03-09 09:04:39,
146,Chrome Appのシリアル通信,Chrome Appのシリアル通信サンプルコード___NEXT_LINE_______NEXT_LINE____このサンプルコードは受信のみのサンプルコードになります。まず、serial通信を行う際にmanifest.jsonにserialの権限を追加しないといけません。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____{___NEXT_LINE____    ...___NEXT_LINE____    "permissions": [___NEXT_LINE____      "serial"___NEXT_LINE____   ],___NEXT_LINE____    ...___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____そして、データが受信したらonReceive関数が呼ばれて、arrayBufferのデータが返されます。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____var connectionId = -1;___NEXT_LINE_______NEXT_LINE____function onReceive(receiveInfo) {___NEXT_LINE____  if (receiveInfo.connectionId !== connectionId)___NEXT_LINE____    return;___NEXT_LINE_______NEXT_LINE____  // data received___NEXT_LINE____  // convert received ArrayBuff data to ascii string___NEXT_LINE____  var a = String.fromCharCode.apply(null, new Uint8Array(receiveInfo.data));___NEXT_LINE_______NEXT_LINE____  console.log(a);___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____function onError(errorInfo) {___NEXT_LINE____  console.warn("Receive error on serial connection: " + errorInfo.error);___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____function onConnect(connectionInfo) {___NEXT_LINE____   // The serial port has been opened. Save its id to use later.___NEXT_LINE____  connectionId = connectionInfo.connectionId;___NEXT_LINE____  // Do whatever you need to do with the opened port.___NEXT_LINE____  console.log("onConnect");___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____// action___NEXT_LINE____function disconnect(){___NEXT_LINE____  console.log("disconnect");___NEXT_LINE____  if (connectionId != -1) {___NEXT_LINE____    chrome.serial.disconnect(connectionId);___NEXT_LINE____    return;___NEXT_LINE____  }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____chrome.serial.onReceive.addListener(onReceive);___NEXT_LINE____chrome.serial.onReceiveError.addListener(onError);___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____onload = function() {___NEXT_LINE____  console.log("onload");___NEXT_LINE____  ___NEXT_LINE____  chrome.serial.getDevices(function(ports) {___NEXT_LINE____    // Connect to the serial port /dev/ttyS01___NEXT_LINE____    chrome.serial.connect("/dev/tty.usbmodem1412", {bitrate: 9600}, onConnect);  ___NEXT_LINE____  });___NEXT_LINE____};___NEXT_LINE____```,jp,1,2015-03-09 14:26:12,2015-03-09 14:26:12,
147,Apache2のConfigureファイル,Apache2のconfigureファイルに最低限必用な項目___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<VirtualHost *:80>___NEXT_LINE____   ServerName playground.edisonthk.com___NEXT_LINE____ DocumentRoot /var/www/html/playground___NEXT_LINE____</VirtualHost>___NEXT_LINE____```,jp,1,2015-03-11 11:26:09,2015-03-11 11:26:09,
148,cURL でレスポンスヘッダを表示,```___NEXT_LINE____curl --dump-header - "http://codegarage.edisonthk.com/thisistest/json/get"___NEXT_LINE____```,jp,1,2015-03-11 16:16:05,2015-03-11 16:19:37,
149,tstring型を作るには,以下の内容のtstring.hを作ればいい。ただし、gccでは_Longlongの部分は書き換えが必要かもしれない。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    #ifndef _INC_TSTRING_H___NEXT_LINE____    #define _INC_TSTRING_H___NEXT_LINE____    #if _MSC_VER > 1000___NEXT_LINE____    #pragma once___NEXT_LINE____    #endif___NEXT_LINE____    #include <tchar.h>___NEXT_LINE____    #include <string>___NEXT_LINE____    #if defined UNICODE && !defined _UNICODE___NEXT_LINE____    #define _UNICODE 1___NEXT_LINE____    #endif___NEXT_LINE____    typedef std::basic_string<TCHAR> tstring;___NEXT_LINE____    typedef std::basic_ios<_TCHAR> tios;___NEXT_LINE____    typedef std::basic_streambuf<_TCHAR> tstreambuf;___NEXT_LINE____    typedef std::basic_istream<_TCHAR> tistream;___NEXT_LINE____    typedef std::basic_ostream<_TCHAR> tostream;___NEXT_LINE____    typedef std::basic_iostream<_TCHAR> tiostream;___NEXT_LINE____    typedef std::basic_stringbuf<_TCHAR> tstringbuf;___NEXT_LINE____    typedef std::basic_istringstream<_TCHAR> tistringstream;___NEXT_LINE____    typedef std::basic_ostringstream<_TCHAR> tostringstream;___NEXT_LINE____    typedef std::basic_stringstream<_TCHAR> tstringstream;___NEXT_LINE____    typedef std::basic_filebuf<_TCHAR> tfilebuf;___NEXT_LINE____    typedef std::basic_ifstream<_TCHAR> tifstream;___NEXT_LINE____    typedef std::basic_ofstream<_TCHAR> tofstream;___NEXT_LINE____    typedef std::basic_fstream<_TCHAR> tfstream;___NEXT_LINE____    #ifdef _UNICODE___NEXT_LINE____    namespace std{___NEXT_LINE____      inline tstring to_tstring(int value){___NEXT_LINE____           return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(unsigned int value){___NEXT_LINE____          return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(long value){___NEXT_LINE____          return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(unsigned long value){___NEXT_LINE____         return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(_Longlong value){___NEXT_LINE____         return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(_ULonglong value){___NEXT_LINE____            return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(long double value){___NEXT_LINE____           return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(double value){___NEXT_LINE____            return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____       inline tstring to_tstring(float value){___NEXT_LINE____         return std::to_wstring(value);___NEXT_LINE____      }___NEXT_LINE____    }___NEXT_LINE____    #else___NEXT_LINE____    namespace std{___NEXT_LINE____       inline tstring to_tstring(int value){___NEXT_LINE____           return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(unsigned int value){___NEXT_LINE____          return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(long value){___NEXT_LINE____          return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(unsigned long value){___NEXT_LINE____         return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(_Longlong value){___NEXT_LINE____         return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(_ULonglong value){___NEXT_LINE____            return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(long double value){___NEXT_LINE____           return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(double value){___NEXT_LINE____            return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____       inline tstring to_tstring(float value){___NEXT_LINE____         return std::to_string(value);___NEXT_LINE____       }___NEXT_LINE____    }___NEXT_LINE____    #endif___NEXT_LINE____    ___NEXT_LINE____    #if defined(UNICODE) || defined(_UNICODE)___NEXT_LINE____    # define tout std::wcout___NEXT_LINE____    # define tin std::wcin___NEXT_LINE____    # define terr std::wcerr___NEXT_LINE____    # define tlog std::wclog___NEXT_LINE____    #else___NEXT_LINE____    # define tout std::cout___NEXT_LINE____    # define tin std::cin___NEXT_LINE____    # define terr std::cerr___NEXT_LINE____    # define tlog std::clog___NEXT_LINE____    #endif___NEXT_LINE____    #endif //_INC_TSTRING_H,jp,7,2015-03-12 13:58:57,2015-03-12 13:58:57,
150,fadeInとfadeOutのCSSトランジションアニメーション,fadeInとfadeOutのtransitionアニメーション___NEXT_LINE_______NEXT_LINE____`show`クラスを加えた場合はfadeInアニメーションになります。`show`クラスを外すとfadeOutアニメーションになります。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____.myimg  {___NEXT_LINE____  transform:translateY(20px);___NEXT_LINE____  -o-transform:translateY(20px);___NEXT_LINE____  -moz-transform:translateY(20px);___NEXT_LINE____  -webkit-transform:translateY(20px);___NEXT_LINE____  opacity: 0;___NEXT_LINE____  transition: all 1s ease;___NEXT_LINE____  -o-transition: all 1s ease;___NEXT_LINE____  -moz-transition: all 1s ease;___NEXT_LINE____  -webkit-transition: all 1s ease;___NEXT_LINE____}___NEXT_LINE____.myimg.show {___NEXT_LINE____  opacity: 1;___NEXT_LINE____  transform:translateY(0);___NEXT_LINE____  -o-transform:translateY(0);___NEXT_LINE____  -moz-transform:translateY(0);___NEXT_LINE____  -webkit-transform:translateY(0);___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-03-13 10:47:00,2015-05-30 09:08:43,
151,スムーズスクロールアニメーション,```___NEXT_LINE____$('html, body').animate({scrollTop:0}, 400);___NEXT_LINE____```,jp,1,2015-03-14 12:32:10,2015-03-22 17:11:16,
152,XMLHttpRequestによるAJAXリクエスト,XMLHttpRequestに関するサンプルコード___NEXT_LINE____```___NEXT_LINE____var xhr = new XMLHttpRequest();___NEXT_LINE____xhr.open('POST', '/json/images/upload');___NEXT_LINE____xhr.onload = function () {___NEXT_LINE____    var res = xhr.responseText___NEXT_LINE____      if (xhr.status === 200) {___NEXT_LINE____       console.log(res);___NEXT_LINE____   } else {___NEXT_LINE____        // failed to uploaded___NEXT_LINE____       console.log('Something went terribly wrong...');___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____xhr.send(formData);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____formDataの内容は下記___NEXT_LINE____```___NEXT_LINE____var formData = new FormData();___NEXT_LINE____for (var i = 0; i < files.length; i++) {___NEXT_LINE____    formData.append('file', files[i]);___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-03-27 23:36:05,2015-03-27 23:36:05,
153,FontAweomseのSNSアイコン,Font Awesome 4.2のSNSアイコンを利用します。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<i class="fa fa-twitter"></i>___NEXT_LINE____<i class="fa fa-google-plus"></i>___NEXT_LINE____<i class="fa fa-facebook-official"></i>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____CSSで色調整___NEXT_LINE____```___NEXT_LINE____.fa.fa-twitter {___NEXT_LINE____  color: #55acee;___NEXT_LINE____}___NEXT_LINE____.fa.fa-google-plus {___NEXT_LINE____  color: #dd4b39;___NEXT_LINE____}___NEXT_LINE____.fa.fa-facebook-official {___NEXT_LINE____  color: #3b5999;  ___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-03-30 03:14:15,2015-03-30 03:14:15,
154,list-style-typeの正しい使い方,以下の条件が揃わないと、リストが表示されない。___NEXT_LINE____```___NEXT_LINE____ul {___NEXT_LINE____     list-style-type: disc;___NEXT_LINE____     padding-left: 1em;___NEXT_LINE____}___NEXT_LINE____ul li {___NEXT_LINE____     display: list-item;___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-03-30 19:16:08,2015-03-30 19:16:08,
155,ngAnimateを部分的に打ち消す,ngAnimateとfontAwesomeのアニメーションを競合しないように次のcss3コードを使います。___NEXT_LINE_______NEXT_LINE____`.fa`クラスが付いている要素だけのアニメーションが消したいので、使われるアクションによって、消す方法が異なります。___NEXT_LINE_______NEXT_LINE____### ng-if___NEXT_LINE____```___NEXT_LINE____.fa.ng-enter, .fa.ng-leave{___NEXT_LINE____  animation:0s linear all;___NEXT_LINE____  -webkit-animation: 0s linear all;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____### ng-class___NEXT_LINE____```___NEXT_LINE____.fa.ng-add, .fa.ng-remove{___NEXT_LINE____  animation:0s linear all;___NEXT_LINE____  -webkit-animation: 0s linear all;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____詳細はこちらにて___NEXT_LINE____[https://docs.angularjs.org/api/ngAnimate](https://docs.angularjs.org/api/ngAnimate),jp,1,2015-03-31 18:49:47,2015-03-31 18:49:47,
156,table要素のデフォルトborder,テーブルに囲む線___NEXT_LINE____```___NEXT_LINE____table,table th,table td {___NEXT_LINE____    border: 1px solid #ccc;___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-04-01 00:44:16,2015-04-01 00:44:16,
158,グレースケール化,画像のグレースケール化はITU-R BT.601-7（以降BT.601）とITU-R BT.709-5（以降BT.709）の式が有りますが、画像においてはBT.601のほうがよく用いられるようです。___NEXT_LINE_______NEXT_LINE____AviUtlの内部形式について-【copied】MakKi's SoftWare  ___NEXT_LINE____[https://e182bb01e8864f37f9ce365b879822eb6da3f1f1.googledrive.com/host/0B-PAN4aatmy1ZGctNFU0YlFJc2c/doc/aviutlyc.html](https://e182bb01e8864f37f9ce365b879822eb6da3f1f1.googledrive.com/host/0B-PAN4aatmy1ZGctNFU0YlFJc2c/doc/aviutlyc.html)  ___NEXT_LINE____ITU-R BT.601 について|まるも  ___NEXT_LINE____[http://www.marumo.ne.jp/bt601/](http://www.marumo.ne.jp/bt601/)  ___NEXT_LINE____Aviutl の内部形式と x264guiEx の色空間変換について | rigaya  ___NEXT_LINE____[https://onedrive.live.com/view.aspx?cid=6BDD4375AC8933C6&resid=6BDD4375AC8933C6!755](https://onedrive.live.com/view.aspx?cid=6BDD4375AC8933C6&resid=6BDD4375AC8933C6!755)___NEXT_LINE_______NEXT_LINE____というわけでBT.601の変換式を用いたグレースケール化を紹介します。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <stdint.h>___NEXT_LINE____typedef struct RGB{___NEXT_LINE____    uint8_t r;___NEXT_LINE____    uint8_t g;___NEXT_LINE____    uint8_t b;___NEXT_LINE____}rgb_t;___NEXT_LINE____void toGrayscale(rgb_t* color, size_t pixel_num){___NEXT_LINE____    for(size_t i = 0; i < pixel_num; i++){___NEXT_LINE____        const uint8_t y = (___NEXT_LINE____        (___NEXT_LINE____            (___NEXT_LINE____                (( 4918*(uint64_t)(color[i].r) +354 ) >> 10)___NEXT_LINE____                + (( 9655*(uint64_t)(color[i].g) +585 ) >> 10)___NEXT_LINE____                + (( 1875*(uint64_t)(color[i].b) +523 ) >> 10)___NEXT_LINE____            )*219 + 383___NEXT_LINE____        )>>12___NEXT_LINE____    ) + 16;___NEXT_LINE____        const uint8_t y = ((4918 * color[i].r + 354) >> 10) + ((9655 * color[i].g + 585) >> 10) + ((1875 * color[i].b + 523) >> 10);___NEXT_LINE____        color[i].r = y;___NEXT_LINE____        color[i].g = y;___NEXT_LINE____        color[i].b = y;___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____int main(void){___NEXT_LINE____    rgb_t pic[720 * 408];___NEXT_LINE____    //picに値をセット___NEXT_LINE____    toGrayscale(pic, _countof(pic));___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____こんな感じかな。もっとも、SIMD化とかするべきなんでしょうけど(最低限SSE2までで)。またC++11ならRange-base forとtemplateでもっとスッキリ書けますね。,jp,7,2015-04-05 04:05:36,2015-05-10 16:46:34,
163,ありきたりなfont-family,MS Pゴシックをさけつつ、Osakaなんて古いフォントも避けつつ、なfont-family___NEXT_LINE_______NEXT_LINE____私はIPAのフォントが好きなのでそれが前に来るようにしてみた。___NEXT_LINE_______NEXT_LINE____sans-serif___NEXT_LINE_______NEXT_LINE____    font-family: "IPAexゴシック", "IPAゴシック", "Lucida Grande", YuGothic, '游ゴシック', "Hiragino Kaku Gothic ProN", "ヒラギノ角ゴ ProN W3", Meiryo, メイリオ, sans-serif;___NEXT_LINE_______NEXT_LINE____serif___NEXT_LINE_______NEXT_LINE____    font-family:"IPAex明朝","IPA明朝", "Times New Roman", "游明朝" , YuMincho, "ヒラギノ明朝 ProN W3" , "Hiragino Mincho ProN", "ヒラギノ明朝 ProN W6","HiraMinProN-W6", "HG明朝E", "メイリオ", Meiryo, serif;___NEXT_LINE_______NEXT_LINE____monospace___NEXT_LINE_______NEXT_LINE____    font-family: Inconsolata, Ricty, Consolas, "Source Code Pro", "Anonymous Pro", "Ubuntu Mono", "Dejavu Sans Mono", "Liberation Mono", Menlo, Courier, monospace;___NEXT_LINE_______NEXT_LINE____まあ個人的にはmonospaceはGoogleWebFontのPT mono一択なんですが。___NEXT_LINE_______NEXT_LINE____    @font-face {___NEXT_LINE____        font-family: 'PT Mono';___NEXT_LINE____        font-style: normal;___NEXT_LINE____        font-weight: 400;___NEXT_LINE____        src: local('PT Mono'), local('PTMono-Regular'), url(https://themes.googleusercontent.com/static/fonts/ptmono/v2/jmle3kzCPnW8O7_gZGRDlQ.woff) format('woff');___NEXT_LINE____    }___NEXT_LINE____    font-family: "PT mono", Inconsolata, Ricty, Consolas, "Source Code Pro", "Anonymous Pro", "Ubuntu Mono", "Dejavu Sans Mono", "Liberation Mono", Menlo, Courier, monospace;,jp,7,2015-04-05 04:30:23,2015-04-15 11:40:15,
186,javascriptのボタン,簡易的なbuttonをつけて「関数が実行されました」というアラートを鳴らしてみる___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title>javaScript</title>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____   <input type="button" id="test" name="button" value="button" />___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        var element = document.getElementById("test");___NEXT_LINE____        element.addEventListener("click", function () {___NEXT_LINE____            alert("関数を実行します");___NEXT_LINE____        })___NEXT_LINE____    </script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-12 06:50:20,2015-04-15 02:36:39,
187,javascriptは型が決まってなくて気持ち悪いです,C言語とかと違って、javascriptとは型が決まっていない。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____function test() {___NEXT_LINE____            var a = "test";___NEXT_LINE____            console.log(a);___NEXT_LINE_______NEXT_LINE____            a = 5.7;___NEXT_LINE____            console.log(a);___NEXT_LINE_______NEXT_LINE____            a = [100, [100, 100], 300];___NEXT_LINE____            console.log(a);___NEXT_LINE_______NEXT_LINE____            a = function () {___NEXT_LINE____                console.log("I am function.");___NEXT_LINE____            };___NEXT_LINE____            a();___NEXT_LINE____            console.log(a);___NEXT_LINE____        }___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____これを実行すると___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____5.7___NEXT_LINE____[100, Array[2], 300]___NEXT_LINE____I am function.___NEXT_LINE____function () {___NEXT_LINE____      console.log("I am function.");___NEXT_LINE____ }___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____a()とaは違うのに注意,jp,21,2015-04-12 07:44:47,2015-04-12 07:46:39,
188,javascriptのgetElement等,```___NEXT_LINE____<div class="a"></div>___NEXT_LINE____<div id="test">中身テキスト</div>___NEXT_LINE____    <p id="second_ele" class="a">aaaaaa</p>___NEXT_LINE____    <p>bbbbbb</p>___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        function getElement() {___NEXT_LINE____            var element = document.getElementById("test");___NEXT_LINE____            var element1 = document.getElementsByClassName("a");___NEXT_LINE____            var element2 = document.getElementsByTagName("p");___NEXT_LINE_______NEXT_LINE____            console.log(element);___NEXT_LINE____            console.log(element1);___NEXT_LINE____            console.log(element2);___NEXT_LINE____        }___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____これを実行すると___NEXT_LINE____``` ___NEXT_LINE____<div id="test">中身テキスト</div>___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____[div.a, p#second_ele.a, second_ele: p#second_ele.a, item: function, namedItem: function]___NEXT_LINE_______NEXT_LINE____[p#second_ele.a, p, second_ele: p#second_ele.a, item: function, namedItem: function]___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____ここで注意するべきところはgetElementByIdのときは<div>～</div>まで、getElementsByClassNameのときは○.○、getElementsByTagNameのときは○#○となる,jp,21,2015-04-12 08:07:50,2015-06-07 07:18:58,
189,javascriptの色つける方法,色を付けるには___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<script type="text/javascript">___NEXT_LINE____<div id="test">中身テキスト</div>___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        function getElement() {___NEXT_LINE____            var element = document.getElementById("test");___NEXT_LINE____            element.innerHTML = "new text";___NEXT_LINE____            element.style.color = "red";___NEXT_LINE____}___NEXT_LINE____</script>___NEXT_LINE____<input type="button" name="test" value="getElementByID"  onclick="getElement()" />___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____(変数名).style.color = "(色の名前）"; 　で色付けができる。___NEXT_LINE____クリックしたら「中身データ」が赤色の「new text」になるようにしてみた。,jp,21,2015-04-12 08:29:13,2015-04-12 08:31:13,
190,CSSでボックスを作る,簡単な青いボックスを作る___NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title></title>___NEXT_LINE____    <style>___NEXT_LINE____        div.sample {___NEXT_LINE____            width:200px; height:100px;___NEXT_LINE____            margin:5px; padding:10px; border:1px solid black;___NEXT_LINE____            background-color:blue;___NEXT_LINE____        } ___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE_______NEXT_LINE____<body>___NEXT_LINE____    <div class=" sample"></div>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____marginは外側余白、borderは境界線、paddingは内側余白です。___NEXT_LINE____background-colorで背景色を変えることができます。,jp,21,2015-04-12 08:47:14,2015-04-12 08:50:38,
191,はじめてのaddeventlistner,```___NEXT_LINE____<body>___NEXT_LINE____    <input type="button" name="test" value="button" id="test"/>___NEXT_LINE____    ___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        ___NEXT_LINE____            var element = document.getElementById("test");___NEXT_LINE____            console.log(element);___NEXT_LINE____            element.addEventListener("click", function () {___NEXT_LINE____                console.log("test2");___NEXT_LINE____            });___NEXT_LINE____        ___NEXT_LINE____     </script>___NEXT_LINE____   ___NEXT_LINE____</body>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____コンソール画面にはクリック前にtestの要素を、クリック後に「test2」を表示します。,jp,21,2015-04-12 09:31:06,2015-04-12 09:33:02,
192,Knockout.jsのbindingイベント一覧,Knockout.jsのイベントは`data-bind="アクション: イベント|変数"`のように構成されます。___NEXT_LINE_______NEXT_LINE____## ***click*** binding___NEXT_LINE_______NEXT_LINE____用途クリックイベントが発生したら代入されたイベントが発生します。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<button data-bind="click: myClickEvent">My Button</button>___NEXT_LINE____<script>___NEXT_LINE____var ViewModel = function() {___NEXT_LINE____     var self = this;___NEXT_LINE____     self.myClickEvent = function() {___NEXT_LINE____            // クリックしたたびにmyClickEventが発生します。___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____ko.applyBindings(document.querySelector("#dddd00"));___NEXT_LINE____</script>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____## ***text: 'my text'*** binding___NEXT_LINE_______NEXT_LINE____テキスト表記。<span>、<p>、<div>などinputタグ以外のタグはこちらを使います。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<span data-bind="text: mytext"></span>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____mytextは変数ではなくて文字列の場合は`'mytext'`になります。___NEXT_LINE_______NEXT_LINE____## ***value: 'my value'*** binding___NEXT_LINE_______NEXT_LINE____inputタグの場合はvalueを利用します。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<input type="text" data-bind="value: myvalue">___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____textと一緒で、myvalueは変数ではなくて文字列の場合は'myvalue'になります。___NEXT_LINE_______NEXT_LINE____## ***foreach: myArrays*** binding___NEXT_LINE_______NEXT_LINE____View___NEXT_LINE____```___NEXT_LINE____<ul data-bind="foreach: people">___NEXT_LINE____    <li>___NEXT_LINE____        <p> Position : <span data-bind="text: $index"></span> </p>___NEXT_LINE____        <p> <span data-bind="text: name"></span> </p>___NEXT_LINE____        <!-- foreachタグの中にremovePerson関数を使う時は$parentを付けることです-->___NEXT_LINE____        <a href="#" data-bind="click: $parent.removePerson">Remove</a>___NEXT_LINE____    </li>___NEXT_LINE____</ul>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____View Model___NEXT_LINE____```___NEXT_LINE____function AppViewModel() {___NEXT_LINE____    var self = this;___NEXT_LINE____ ___NEXT_LINE____    self.people = ko.observableArray([___NEXT_LINE____        { name: 'Bert' },___NEXT_LINE____        { name: 'Charles' },___NEXT_LINE____        { name: 'Denise' }___NEXT_LINE____    ]);___NEXT_LINE____    ___NEXT_LINE____    // foreach bindingの場合はここを注意してください！___NEXT_LINE____    // foreachのタグの中にremovePersonを利用する場合は絶対に$parent.removePersonを使うことです。___NEXT_LINE____    self.removePerson = function() {___NEXT_LINE____        self.people.remove(this);___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____ ___NEXT_LINE____ko.applyBindings(new AppViewModel());___NEXT_LINE____```,jp,1,2015-04-14 05:39:24,2015-04-14 08:50:25,
193,Gitのログ表示,`git log`に関する機能___NEXT_LINE_______NEXT_LINE____編集したファイル名を表示___NEXT_LINE____```___NEXT_LINE____git log --name-only___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____commit ffs3fssdffffffffff___NEXT_LINE____Author: edisonthk-mac <edisonthk@gmail.com>___NEXT_LINE____Date:   Tue Apr 14 18:52:33 2015 +0900___NEXT_LINE_______NEXT_LINE____    注文ページを編集___NEXT_LINE_______NEXT_LINE____app/controllers/OrderController.php___NEXT_LINE____public/js/plugins/typeahead/typeahead.bundle.js___NEXT_LINE____```,jp,1,2015-04-14 10:00:35,2015-04-14 10:00:35,
194,Knockout.jsのbootstrap alertサンプルコード,ViewModel.js___NEXT_LINE____```___NEXT_LINE____self.alertMessage ={___NEXT_LINE____    show: ko.observable(false),___NEXT_LINE____    messages: ko.observableArray([]),___NEXT_LINE____    priority: ko.observable("")___NEXT_LINE____} ___NEXT_LINE____self.showMessage = function() {___NEXT_LINE____       self.alertMessage.show(true);___NEXT_LINE____       self.alertMessage.messages(["first message", "second message"]);___NEXT_LINE____       self.alertMessage.priority('danger');___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____View___NEXT_LINE____```___NEXT_LINE____<div data-bind="visible: alertMessage.show" class="form-group row">___NEXT_LINE____    <div class="col-lg-12">___NEXT_LINE____        <div data-bind="css: 'alert alert-'+alertMessage.priority()">___NEXT_LINE____            <ul data-bind="foreach: alertMessage.messages">___NEXT_LINE____                <li data-bind="text: $data"></li>___NEXT_LINE____            </ul>___NEXT_LINE____        </div>___NEXT_LINE____    </div>___NEXT_LINE____</div>___NEXT_LINE____```,jp,1,2015-04-15 02:40:33,2015-04-15 02:40:33,
195,ボタンを押すと色が変わる,```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <meta charset="UTF-8" />___NEXT_LINE____    <title>javaScript</title>___NEXT_LINE____    <style>___NEXT_LINE____        div.sample {___NEXT_LINE____            width: 200px;___NEXT_LINE____            height: 100px;___NEXT_LINE____            margin: 5px;___NEXT_LINE____            padding: 10px;___NEXT_LINE____            border: 1px solid black;___NEXT_LINE____        }___NEXT_LINE____        .color_blue{___NEXT_LINE____            background-color:blue;___NEXT_LINE____        }___NEXT_LINE____        .color_yellow{___NEXT_LINE____            background-color:yellow;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <div class=" sample color_blue" id="test"></div>  ___NEXT_LINE____    <input type="button" name="button"value="button"id="color_change" />___NEXT_LINE____    <script>___NEXT_LINE____        var element1 = document.getElementById("color_change");___NEXT_LINE____        var element2 = document.getElementById("test");___NEXT_LINE____        element1.addEventListener("click", function () {___NEXT_LINE____            console.log("good");___NEXT_LINE____            element2.className="sample color_yellow";___NEXT_LINE____        });___NEXT_LINE____    </script>___NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____buttonを押すとボックスが青から黄色になります,jp,21,2015-04-15 12:09:03,2015-04-15 12:09:03,
196,マウスによって色が変わる,青色のボックスの上にマウスをかざすと黄色になり、そこから外すと青に戻るようにしてみた___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <meta charset="UTF-8" />___NEXT_LINE____    <title>javaScript</title>___NEXT_LINE____    <style>___NEXT_LINE____        div.sample {___NEXT_LINE____            width: 200px;___NEXT_LINE____            height: 100px;___NEXT_LINE____            margin: 5px;___NEXT_LINE____            padding: 10px;___NEXT_LINE____            border: 1px solid black;___NEXT_LINE____        }___NEXT_LINE____        .color_blue{___NEXT_LINE____            background-color:blue;___NEXT_LINE____        }___NEXT_LINE____        .color_yellow{___NEXT_LINE____            background-color:yellow;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <div class=" sample color_blue" id="test"></div>  ___NEXT_LINE____   <script>___NEXT_LINE____        var element = document.getElementById("test");___NEXT_LINE____        element.onmouseover = function () {___NEXT_LINE____            element.className = "sample color_yellow";___NEXT_LINE____        };___NEXT_LINE____        element.onmouseout = function () {___NEXT_LINE____            element.className = "sample color_blue";___NEXT_LINE____        };___NEXT_LINE____    </script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-15 12:31:45,2015-04-24 16:52:20,
197,MySQLとLaravel eloquentのLeft Joinのサンプルクエリ,MySQLクエリ___NEXT_LINE____```___NEXT_LINE____SELECT t1.*,t2.*,t3.my_column FROM t1 ___NEXT_LINE____  LEFT JOIN t2 ON t2.id=t1.product_id ___NEXT_LINE____    LEFT JOIN t3 ON t3.id=t1.product_id;___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____上記をLaravel eloquentで表現すると___NEXT_LINE____```___NEXT_LINE____T1::select('t1.*','t2.*','t3.my_column')___NEXT_LINE____            ->join('t2','t2.id','=','t1.product_id')___NEXT_LINE____            ->join('t3','t2.id','=','t1.product_id')___NEXT_LINE____```,jp,1,2015-04-17 06:15:17,2015-04-17 06:15:17,
198,画面中央表示 display:inline-blockの利用,画面に依存し文字、画像を配置したい場合、display:blockを用いることで対象をブロック要素として扱うことができる。___NEXT_LINE____```___NEXT_LINE____<div style="display:block; height:100%;">___NEXT_LINE____  画面中央にしたい文章___NEXT_LINE____</div>___NEXT_LINE____```,jp,19,2015-04-19 08:57:22,2015-04-21 11:57:21,
199,画面左右の端に文字を配置する,display:blockを用いて配置したいブロックを決定し、その中で左に配置したい要素、右に配置したい要素を並列させ、各要素でrelativeを使い位置の制御を行う。___NEXT_LINE_______NEXT_LINE____この場合は音楽研究会を左の端に、コンタクト　部員用ページを右に配置している。___NEXT_LINE____```___NEXT_LINE____<div class="center1" style="display:block; height:100%; position:relative; ">___NEXT_LINE____  <div class="top" style="display:block; position:absolute;top:5%; left:5%;" >___NEXT_LINE____      音楽研究会___NEXT_LINE____      </div>___NEXT_LINE____       <div style="position:relative;left:80%; top:5%;">___NEXT_LINE____         コンタクト　部員用ページ___NEXT_LINE____       </div>___NEXT_LINE____    <div class="center2" style="display:block; position:absolute;top:50%; left:50%;">___NEXT_LINE____      6th___NEXT_LINE____    </div>___NEXT_LINE____```,jp,19,2015-04-19 09:59:04,2015-04-19 09:59:04,
200,Laravel eloquentのpluckとlists,## Pluck___NEXT_LINE_______NEXT_LINE____`mycolumn`列の一番最初の値を抽出。___NEXT_LINE____```___NEXT_LINE____Person::pluck("mycolumn");___NEXT_LINE____```___NEXT_LINE____出力結果はMixed型もしくはnull。___NEXT_LINE_______NEXT_LINE____## lists___NEXT_LINE_______NEXT_LINE____`mycolumn`列のすべての値を抽出。値が重複します。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____Person::lists("mycolumn");___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____出力結果は配列になります。___NEXT_LINE____```___NEXT_LINE____[___NEXT_LINE____    "Matt Nathanson",___NEXT_LINE____    "Matt Nathanson",___NEXT_LINE____    "Something Corporate",___NEXT_LINE____    "Something Corporate",___NEXT_LINE____    "The Ataris",___NEXT_LINE____    "Say Anything"___NEXT_LINE____]___NEXT_LINE____```,jp,1,2015-04-20 02:52:23,2015-04-20 02:52:23,
201,git pullする前の状態に戻す手順,1．`git reflog`でpullする前のcommitを確認___NEXT_LINE____```___NEXT_LINE____0cade04 HEAD@{1}: pull origin master: Fast-forward___NEXT_LINE____34365be HEAD@{2}: checkout: moving from editable_order_item_table to master___NEXT_LINE____```___NEXT_LINE____2．pullする前のコミットは`34365be`になっているので、`git reset --hard 34365be`を実行。,jp,1,2015-04-21 02:23:40,2015-04-21 02:23:40,
202,クリックしたらボックスが動くようにしてみた,ボタンをクリックしたら青いボックスが黄色になって動くようにしてみた___NEXT_LINE____```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <meta charset="UTF-8" />___NEXT_LINE____    <title>javaScript</title>___NEXT_LINE____    <style>___NEXT_LINE____        div.sample {___NEXT_LINE____            width: 200px;___NEXT_LINE____            height: 100px;___NEXT_LINE____            margin: 5px;___NEXT_LINE____            padding: 10px;___NEXT_LINE____            border: 1px solid black;___NEXT_LINE____        }___NEXT_LINE____        .color_blue{___NEXT_LINE____            background-color:blue;___NEXT_LINE____        }___NEXT_LINE____        .color_yellow{___NEXT_LINE____            background-color:yellow;___NEXT_LINE____        }___NEXT_LINE____        .left{___NEXT_LINE____            position:absolute;___NEXT_LINE____            top:5%;___NEXT_LINE____            left:25%;___NEXT_LINE____        }___NEXT_LINE____        .right{___NEXT_LINE____            position:absolute;___NEXT_LINE____            top:5%;___NEXT_LINE____            right:25%;___NEXT_LINE____        }___NEXT_LINE____        .button_top{___NEXT_LINE____            position:absolute;___NEXT_LINE____            top:35%;___NEXT_LINE____            left:50%;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <div class=" sample color_blue left" id="test"></div>  ___NEXT_LINE____    <input type="button" name="button"value="button" class="button_top" id="color_change" />___NEXT_LINE____    <script>___NEXT_LINE____        var n = 0;___NEXT_LINE____        var element1 = document.getElementById("color_change");___NEXT_LINE____        var element2 = document.getElementById("test");___NEXT_LINE____        element1.addEventListener("click", function () {___NEXT_LINE____            if (n %2== 0) {___NEXT_LINE____                console.log("n%2==0 good");___NEXT_LINE____                element2.className = "sample color_yellow right";___NEXT_LINE____                n++;___NEXT_LINE____            }___NEXT_LINE____            else if (n % 2 == 1) {___NEXT_LINE____                console.log("n%2==1 good");___NEXT_LINE____                element2.className = "sample color_blue left";___NEXT_LINE____                n++;___NEXT_LINE____            }___NEXT_LINE____        });___NEXT_LINE____    </script>___NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-22 07:35:41,2015-04-22 07:38:59,
203,phpでのA-Zの配列,```___NEXT_LINE____$alphabets = range("A","Z");___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____出力結果は___NEXT_LINE____```___NEXT_LINE____['A','B','C','D' .... ,'Y','Z'];___NEXT_LINE____```,jp,1,2015-04-22 10:05:15,2015-04-22 10:05:15,
204,z-indexによる重なりの制御,図形や画像の重なりを制御する際に用いると便利なのがz-indexである。___NEXT_LINE____0を基準とし、値が大きいものほど上に重なる。<br>___NEXT_LINE____**positionプロパティで必ず指定すること**___NEXT_LINE_______NEXT_LINE____以下の例の場合、sample1が上側に描画される。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____.sample1{___NEXT_LINE____color: #000000;___NEXT_LINE____background-color: #99cc00;___NEXT_LINE____position: relative; ___NEXT_LINE____top: 50px; ___NEXT_LINE____z-index: 2;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____.sample2 {___NEXT_LINE____position: relative;___NEXT_LINE____top: -50px;___NEXT_LINE____z-index: 1;___NEXT_LINE____}___NEXT_LINE____```,jp,19,2015-04-22 11:53:59,2015-04-22 11:56:55,
205,CSSのdisplay:inline,display:inline;は横幅や縦幅には寄らない。フォントに依存する。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<!doctype html>___NEXT_LINE____<html >___NEXT_LINE____<head>___NEXT_LINE____    <title>テスト</title>___NEXT_LINE____    <style>___NEXT_LINE____        .sample{___NEXT_LINE____            width:3000px;___NEXT_LINE____            height:3000px;___NEXT_LINE____            background-color:green;___NEXT_LINE____            display:inline;___NEXT_LINE____            font-size:100%;___NEXT_LINE____            overflow:scroll;___NEXT_LINE____            font-size:500%;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE_______NEXT_LINE____<body>___NEXT_LINE____    <div class="sample">テスト１</div>___NEXT_LINE____    <div class="sample">テスト２</div>___NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-22 12:25:42,2015-04-22 12:26:09,
206,CSSのdisplay:block,cssのdisplay:blockは縦幅、横幅を指定できます。___NEXT_LINE____ただし、横に配置することはできず、下に配置されます。___NEXT_LINE____```___NEXT_LINE____<!doctype html>___NEXT_LINE____<html >___NEXT_LINE____<head>___NEXT_LINE____    <title>テスト</title>___NEXT_LINE____    <style>___NEXT_LINE____        .sample{___NEXT_LINE____            width:300px;___NEXT_LINE____            height:300px;___NEXT_LINE____            background-color:green;___NEXT_LINE____            display:block;___NEXT_LINE____            font-size:100%;___NEXT_LINE____            overflow:scroll;___NEXT_LINE____            font-size:500%;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE_______NEXT_LINE____<body>___NEXT_LINE____    <div class="sample">テスト１</div>___NEXT_LINE____    <div class="sample">テスト２</div>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-22 12:32:15,2015-04-22 12:32:15,
207,CSSのdisplay:inline-block,display:inline-blockは横幅、縦幅を任意で決めることができます。また、横に配置することができます。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<!doctype html>___NEXT_LINE____<html >___NEXT_LINE____<head>___NEXT_LINE____    <title>テスト</title>___NEXT_LINE____    <style>___NEXT_LINE____        .sample{___NEXT_LINE____            width:300px;___NEXT_LINE____            height:300px;___NEXT_LINE____            background-color:green;___NEXT_LINE____            display:inline-block;___NEXT_LINE____            font-size:100%;___NEXT_LINE____            overflow:scroll;___NEXT_LINE____            font-size:500%;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE_______NEXT_LINE____<body>___NEXT_LINE____    <div class="sample">テスト１</div>___NEXT_LINE____    <div class="sample">テスト２</div>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-22 12:34:42,2015-04-22 12:34:42,
208,文字列がブロックからはみ出た時の処理,文字列がブロックからはみ出た時はoverflowを使って処理する。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<!doctype html>___NEXT_LINE____<html >___NEXT_LINE____<head>___NEXT_LINE____    <title>テスト</title>___NEXT_LINE____    <style>___NEXT_LINE____        .sample{___NEXT_LINE____            width:300px;___NEXT_LINE____            height:300px;___NEXT_LINE____            background-color:green;___NEXT_LINE____            display:inline-block;___NEXT_LINE____            font-size:100%;___NEXT_LINE____            overflow:scroll;___NEXT_LINE____            font-size:500%;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE_______NEXT_LINE____<body>___NEXT_LINE____    <div class="sample">テスト１</div>___NEXT_LINE____    <div class="sample">テスト２</div>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____overflowにはhidden,scroll,visibleなどがあります。,jp,21,2015-04-22 12:36:45,2015-04-22 12:36:45,
209,半透明なバックグランドを作る,フルスクリーンを範囲とし、opacityを用いて作ることができる。___NEXT_LINE____例ではwrapper要素の上に,dialog-backgroundの要素、dialogの要素と順番に重ねることで実現している。___NEXT_LINE____この時、dialog-backgroundは黒背景でopacityによって半透明化して陰を落とすような見かけにしている。___NEXT_LINE____うまくいかないときは「display:block」の記事も合わせて参照してください。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <style type="text/css">___NEXT_LINE____    .dialog-background {___NEXT_LINE_______NEXT_LINE____    position: absolute;___NEXT_LINE____    top:0px;___NEXT_LINE____    left:0px;___NEXT_LINE____    width:100%;___NEXT_LINE____    height: 100%;___NEXT_LINE____    opacity: 0.7;___NEXT_LINE____    background-color: #000000;___NEXT_LINE____    color: #000000;___NEXT_LINE_______NEXT_LINE____    }___NEXT_LINE____    .dialog {___NEXT_LINE____    position: absolute;___NEXT_LINE____    border-radius: 6px 6px 6px 6px;___NEXT_LINE____    left:40%;___NEXT_LINE____    top:150px;___NEXT_LINE____    width:200px;___NEXT_LINE____    height:150px;___NEXT_LINE____    background-color: #fff;___NEXT_LINE____    box-shadow: 6px 6px 6px rgba(0,0,0,0.4);  /* CSS3 */___NEXT_LINE____    padding:50px;___NEXT_LINE____    }___NEXT_LINE____    .wrapper {___NEXT_LINE____        width: 800px;___NEXT_LINE____        margin-left: auto;___NEXT_LINE____        margin-right: auto;___NEXT_LINE____    }___NEXT_LINE____    .wrapper img {___NEXT_LINE____        float:left;___NEXT_LINE____    }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE_______NEXT_LINE____    ___NEXT_LINE____    ___NEXT_LINE____    <div class="wrapper">___NEXT_LINE____        <h1>Introduction</h1> ___NEXT_LINE____        <h2>About this tutorial</h2>___NEXT_LINE____        <p>___NEXT_LINE____        Welcome to <em>Learn You a Haskell for Great Good</em>! ___NEXT_LINE____        If you're reading this, chances are you want to learn Haskell. Well, you've come to the right place, but let's talk about this tutorial a bit first.  ___NEXT_LINE____        </p>___NEXT_LINE____        <p>___NEXT_LINE____        I decided to write this because I wanted to solidify my own knowledge of Haskell and because I thought I could help people new to Haskell learn it from my perspective. There are quite a few tutorials on Haskell floating around on the internet. When I was starting out in Haskell, I didn't learn from just one resource. The way I learned it was by reading several different tutorials and articles because each explained something in a different way than the other did. By going through several resources, I was able put together the pieces and it all just came falling into place. So this is an attempt at adding another useful resource for learning Haskell so you have a bigger chance of finding one you like.___NEXT_LINE____        </p>___NEXT_LINE____        <img src="http://s3.amazonaws.com/lyah/bird.png" alt="bird" class="left" width="230" height="192">___NEXT_LINE____        <p>___NEXT_LINE____        This tutorial is aimed at people who have experience in imperative programming languages (C, C++, Java, Python &hellip;) but haven't programmed in a functional language before (Haskell, ML, OCaml &hellip;). Although I bet that even if you don't have any significant programming experience, a smart person such as yourself will be able to follow along and learn Haskell.___NEXT_LINE____        </p>___NEXT_LINE____    </div>___NEXT_LINE____    ___NEXT_LINE____    <div class="dialog-background"></div>___NEXT_LINE____    <div class="dialog">___NEXT_LINE____        <p>This is dialog</p>___NEXT_LINE____        <button>Close dialog</button>___NEXT_LINE____    </div>___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,19,2015-04-22 13:01:35,2015-04-22 13:01:35,
210,自分用テンプレート,```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title></title>___NEXT_LINE____    <style type="text/css"></style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <script type="text/javascript"></script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-22 13:02:19,2015-04-22 13:02:19,
211,ボタンを押したらdialog消えるようにしてみた,display:noneをつけるとhtmlも消すことが出来る___NEXT_LINE____すごい便利だなぁ___NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <style type="text/css">___NEXT_LINE____        .dialog-background {___NEXT_LINE____            position: absolute;___NEXT_LINE____            top: 0px;___NEXT_LINE____            left: 0px;___NEXT_LINE____            width: 100%;___NEXT_LINE____            height: 100%;___NEXT_LINE____            opacity: 0.7;___NEXT_LINE____            background-color: #000000;___NEXT_LINE____            color: #000000;___NEXT_LINE____        }___NEXT_LINE_______NEXT_LINE____        .dialog {___NEXT_LINE____            position: absolute;___NEXT_LINE____            border-radius: 6px 6px 6px 6px;___NEXT_LINE____            left: 40%;___NEXT_LINE____            top: 150px;___NEXT_LINE____            width: 200px;___NEXT_LINE____            height: 150px;___NEXT_LINE____            background-color: #fff;___NEXT_LINE____            box-shadow: 6px 6px 6px rgba(0,0,0,0.4); /* CSS3 */___NEXT_LINE____            padding: 50px;___NEXT_LINE____        }___NEXT_LINE____        .remove{___NEXT_LINE____            display:none;___NEXT_LINE____        }___NEXT_LINE____        .wrapper {___NEXT_LINE____            width: 800px;___NEXT_LINE____            margin-left: auto;___NEXT_LINE____            margin-right: auto;___NEXT_LINE____        }___NEXT_LINE_______NEXT_LINE____            .wrapper img {___NEXT_LINE____                float: left;___NEXT_LINE____            }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE_______NEXT_LINE_______NEXT_LINE_______NEXT_LINE____    <div class="wrapper">___NEXT_LINE____        <h1>Introduction</h1>___NEXT_LINE____        <h2>About this tutorial</h2>___NEXT_LINE____        <p>___NEXT_LINE____            Welcome to <em>Learn You a Haskell for Great Good</em>!___NEXT_LINE____            If you're reading this, chances are you want to learn Haskell. Well, you've come to the right place, but let's talk about this tutorial a bit first.___NEXT_LINE____        </p>___NEXT_LINE____        <p>___NEXT_LINE____            I decided to write this because I wanted to solidify my own knowledge of Haskell and because I thought I could help people new to Haskell learn it from my perspective. There are quite a few tutorials on Haskell floating around on the internet. When I was starting out in Haskell, I didn't learn from just one resource. The way I learned it was by reading several different tutorials and articles because each explained something in a different way than the other did. By going through several resources, I was able put together the pieces and it all just came falling into place. So this is an attempt at adding another useful resource for learning Haskell so you have a bigger chance of finding one you like.___NEXT_LINE____        </p>___NEXT_LINE____        <img src="http://s3.amazonaws.com/lyah/bird.png" alt="bird" class="left" width="230" height="192">___NEXT_LINE____        <p>___NEXT_LINE____            This tutorial is aimed at people who have experience in imperative programming languages (C, C++, Java, Python &hellip;) but haven't programmed in a functional language before (Haskell, ML, OCaml &hellip;). Although I bet that even if you don't have any significant programming experience, a smart person such as yourself will be able to follow along and learn Haskell.___NEXT_LINE____        </p>___NEXT_LINE____    </div>___NEXT_LINE_______NEXT_LINE____    <div id="dialog-background" class="dialog-background"></div>___NEXT_LINE____    <div id="test" class="dialog">___NEXT_LINE____        <p>This is dialog</p>___NEXT_LINE____        <input type="button" name="button" id="close" value="close dialog" />___NEXT_LINE____    </div>___NEXT_LINE____    <script>___NEXT_LINE____        var element1 = document.getElementById("close");___NEXT_LINE____        element1.addEventListener("click", function () {___NEXT_LINE____            var element1 = document.getElementById("test");___NEXT_LINE____            var element2 = document.getElementById("dialog-background");___NEXT_LINE____            element1.className = "remove";___NEXT_LINE____            element2.className = "remove";___NEXT_LINE____        });___NEXT_LINE____    </script>___NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-22 13:31:22,2015-04-22 13:32:01,
212,再帰関数　階乗,result=num! となるように組んでみた___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title></title>___NEXT_LINE____    <style type="text/css"></style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        var num = 4;___NEXT_LINE____        function hoge(piyo) {___NEXT_LINE____            if (piyo <= 0) return 1;___NEXT_LINE____            return piyo * hoge(piyo - 1);___NEXT_LINE____        }___NEXT_LINE____        var result = hoge(num);___NEXT_LINE____        console.log(result);___NEXT_LINE____    </script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-23 11:35:02,2015-04-23 11:35:46,
213,クラスとインスタンス,クラス：同じ種類のオブジェクトが共通で持っている機能（=メソッド）と、個々に持つことができる状態の記憶形式を記述したテンプレート___NEXT_LINE_______NEXT_LINE____インスタンス：クラスで宣言された形式のオブジェクトの実体___NEXT_LINE_______NEXT_LINE____(例1)___NEXT_LINE_______NEXT_LINE____* クラス：学生___NEXT_LINE____* インスタンス：田中太郎、学生番号１番、身長１７０ｃｍ___NEXT_LINE_______NEXT_LINE____(例2)___NEXT_LINE_______NEXT_LINE____* クラス：果物___NEXT_LINE____* インスタンス：りんご、甘い、青森県産,jp,21,2015-04-23 11:55:05,2015-04-23 11:56:31,
214,javaScriptのライブラリ,canvasHelperというライブラリを作ってみた___NEXT_LINE____注意するべき点は、class内の変数を定義するとき 「this.○○」というようにしなければならないこと___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title>canvas</title>___NEXT_LINE____    <style type="text/css"></style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <canvas id="canvas"></canvas>___NEXT_LINE____    <input type="button" id="button" value="button" />___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        var canvasHelper = {___NEXT_LINE____            init: function () {___NEXT_LINE____                // constructor___NEXT_LINE____                var self = this;___NEXT_LINE____                self.element1 = document.getElementById("canvas");___NEXT_LINE____                self.ctx = self.element1.getContext("2d");___NEXT_LINE____                console.log("good");___NEXT_LINE____            },___NEXT_LINE____            clear: function () {___NEXT_LINE____                var self = this;___NEXT_LINE____                // clear all things draw in canvas___NEXT_LINE____                self.ctx.clearRect(10, 10, 50, 100);___NEXT_LINE____                console.log("great!");___NEXT_LINE____            },___NEXT_LINE____            drawRectangle: function () {___NEXT_LINE____                // draw a rectangle___NEXT_LINE____                var self = this;___NEXT_LINE____                self.ctx.fillStyle = "#0000ff";___NEXT_LINE____                self.ctx.fillRect(10, 10, 50, 100);___NEXT_LINE____            }___NEXT_LINE____        };___NEXT_LINE____        var n = 0;___NEXT_LINE____        canvasHelper.init();___NEXT_LINE____        canvasHelper.drawRectangle();___NEXT_LINE____        var element2 = document.getElementById("button");___NEXT_LINE____        element2.addEventListener("click", function () {___NEXT_LINE____            if (n % 2 == 0) {___NEXT_LINE____                canvasHelper.clear();___NEXT_LINE____            }___NEXT_LINE____            else {___NEXT_LINE____                canvasHelper.drawRectangle();___NEXT_LINE____            }___NEXT_LINE____            n++;___NEXT_LINE____        })___NEXT_LINE____    </script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-23 12:32:21,2015-04-23 12:32:53,
215,javaScriptでアニメーション~初級~,きちんとうごいたあああああああああああああああ___NEXT_LINE_______NEXT_LINE____割り込み処理つけたい___NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title>canvas</title>___NEXT_LINE____    <style type="text/css">___NEXT_LINE____        .button{___NEXT_LINE____            position:absolute;___NEXT_LINE____            top:5px;___NEXT_LINE____            left:5px;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <input type="button" id="button" value="button" class="button"/>___NEXT_LINE____    <canvas id="canvas" width="600" height="300"></canvas>___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        var canvasHelper = {___NEXT_LINE____            //初期化___NEXT_LINE____            init: function () {___NEXT_LINE____                // constructor___NEXT_LINE____                var self = this;___NEXT_LINE____                self.element1 = document.getElementById("canvas");___NEXT_LINE____                self.ctx = self.element1.getContext("2d");___NEXT_LINE____　　　　},___NEXT_LINE____            //canvasを消す___NEXT_LINE____            clear: function () {___NEXT_LINE____                var self = this;___NEXT_LINE____                // clear all things draw in canvas___NEXT_LINE____                self.ctx.clearRect(0, 0, 1000, 1000);___NEXT_LINE____            },___NEXT_LINE____            //canvasを書く___NEXT_LINE____            drawRectangle: function (hogeStyle) {___NEXT_LINE____                // draw a rectangle___NEXT_LINE____                var self = this;___NEXT_LINE____                self.ctx.fillStyle = "#0000ff";___NEXT_LINE____                self.ctx.fillRect(hogeStyle.x, hogeStyle.y, hogeStyle.w, hogeStyle.h);___NEXT_LINE____            },___NEXT_LINE____            //アニメーション___NEXT_LINE____            animateStart: function (beginStyle, endStyle, duration) {___NEXT_LINE____                //変数定義---------------------------------------------------------___NEXT_LINE____                var count = 1;___NEXT_LINE____                var self = this;___NEXT_LINE____                //spanミリ秒ごとにtimeoutする___NEXT_LINE____                var span = 50;___NEXT_LINE____                //spanミリ秒ごとの差分を出す___NEXT_LINE____                var diffStyle = {___NEXT_LINE____                    x_d: (endStyle.x - beginStyle.x) / (duration / span),___NEXT_LINE____                    y_d: (endStyle.y - beginStyle.y) / (duration / span),___NEXT_LINE____                    w_d: (endStyle.w - beginStyle.w) / (duration / span),___NEXT_LINE____                    h_d: (endStyle.h - beginStyle.h) / (duration / span)___NEXT_LINE____                };___NEXT_LINE____                var time_id;___NEXT_LINE____                //------------------------------------------------------------------___NEXT_LINE____                //アニメーション関数___NEXT_LINE____                var animation = function () {___NEXT_LINE____                    //確認___NEXT_LINE____                    console.log(count);___NEXT_LINE____                    //画面クリア___NEXT_LINE____                    self.clear();___NEXT_LINE____                    //差分を考慮して要素を出す___NEXT_LINE____                    var newStyle = {___NEXT_LINE____                        x: beginStyle.x + (diffStyle.x_d * (count-1)),___NEXT_LINE____                        y: beginStyle.y + (diffStyle.y_d * (count-1)),___NEXT_LINE____                        w: beginStyle.w + (diffStyle.w_d * (count-1)),___NEXT_LINE____                        h: beginStyle.h + (diffStyle.h_d * (count-1))___NEXT_LINE____                    };___NEXT_LINE____                    self.drawRectangle(newStyle);___NEXT_LINE____                    count++;___NEXT_LINE____                    if ((count * span) > duration) {___NEXT_LINE____                        self.clear();___NEXT_LINE____                        self.drawRectangle(endStyle);___NEXT_LINE____                        return;___NEXT_LINE____                    }___NEXT_LINE____                    else {___NEXT_LINE____                        //タイムアウト___NEXT_LINE____                        time_id=setTimeout(animation, span);___NEXT_LINE____                    }___NEXT_LINE____                };___NEXT_LINE____                //タイムアウト___NEXT_LINE____                time_id=setTimeout(animation, span);___NEXT_LINE____            }___NEXT_LINE____        };___NEXT_LINE____        //変数定義-----------------------------------------------------___NEXT_LINE____        //クリックした時の処理用変数___NEXT_LINE____        var n = 0;___NEXT_LINE____        var element2 = document.getElementById("button");___NEXT_LINE____        //動かす時間(milliseconds単位)___NEXT_LINE____        var duration = 1000;___NEXT_LINE____        //初期canvas & 偶数回目にクリックしたときの移動先canvas___NEXT_LINE____        var beginStyle = {___NEXT_LINE____            x: 50,___NEXT_LINE____            y: 50,___NEXT_LINE____            w: 40,___NEXT_LINE____            h: 40___NEXT_LINE____        };___NEXT_LINE____        //奇数回目にクリックした時の移動先canvas___NEXT_LINE____        var endStyle1 = {___NEXT_LINE____            x: 200,___NEXT_LINE____            y: 200,___NEXT_LINE____            w: 40,___NEXT_LINE____            h: 40___NEXT_LINE____        };___NEXT_LINE____        //関数定義-------------------------------------------------------------___NEXT_LINE____        //クリックしたとき実行する___NEXT_LINE____        function action() {___NEXT_LINE____            if (n % 2 == 0) {___NEXT_LINE____                canvasHelper.animateStart(beginStyle, endStyle1, duration);___NEXT_LINE____            }___NEXT_LINE____            else {___NEXT_LINE____                canvasHelper.animateStart(endStyle1, beginStyle, duration);___NEXT_LINE____            }___NEXT_LINE____            n++;___NEXT_LINE____        };___NEXT_LINE____        //---------------------------------------------------------------------___NEXT_LINE____        canvasHelper.init();___NEXT_LINE____        canvasHelper.drawRectangle(beginStyle);___NEXT_LINE____        element2.addEventListener("click",action);___NEXT_LINE____    </script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-04-23 16:02:47,2015-04-28 12:04:42,
216,visual studioのコマンドプロンプトを残す方法,いちいちググるのめんｄいのでメモメモ___NEXT_LINE_______NEXT_LINE____1.設定したいプロジェクトをソリューションエクスプーラーから右クリックで【プロパティ】___NEXT_LINE_______NEXT_LINE____2.左ペインから【構成プロパティ】->【リンカ】->【システム】___NEXT_LINE_______NEXT_LINE____3.右ペインから一番上の【サブシステム】で【コンソール/SUBSYSTEM:CONSOLE】を選択し、OK。,jp,21,2015-04-24 08:06:23,2015-04-24 08:06:23,
217,C言語でC++のclassを作ってみたよ,なんの意味があるんですか？って聞かれたらすごい困る。___NEXT_LINE____意味のないことに意味が有るってばっちゃも言ってた。___NEXT_LINE_______NEXT_LINE____C++が如何に楽にかけるかということを身にしみて感じた___NEXT_LINE_______NEXT_LINE____こっちがC＋＋です。___NEXT_LINE____```___NEXT_LINE____//C++の場合___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE____class student{___NEXT_LINE____    int num;//学籍番号___NEXT_LINE____  int math;//数学の点数___NEXT_LINE____    int english;//英語の点数___NEXT_LINE____public:___NEXT_LINE____  void set_data(int n, int m, int e){___NEXT_LINE____     num = n;___NEXT_LINE____        math = m;___NEXT_LINE____       english = e;___NEXT_LINE____    }___NEXT_LINE____   void test_sum(){___NEXT_LINE____        cout << "学籍番号" << num << "番目の生徒のテストの点数の合計は" << math + english << "です。" << endl;___NEXT_LINE____     return;___NEXT_LINE____ }___NEXT_LINE____};___NEXT_LINE____int main(){___NEXT_LINE____  student student1;___NEXT_LINE____   student1.set_data(12, 60, 50);___NEXT_LINE____  student1.test_sum();___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____で、こっちがC言語です。___NEXT_LINE____```___NEXT_LINE____//C言語の場合___NEXT_LINE____#include<stdio.h>___NEXT_LINE____//構造体___NEXT_LINE____typedef struct _student{___NEXT_LINE____  int num;//学籍番号___NEXT_LINE____  int math;//数学の点数___NEXT_LINE____    int english;//英語の点数___NEXT_LINE____ void(*set_data)(_student* student,int n, int m, int e);___NEXT_LINE____ void(*test_sum)(_student* student);___NEXT_LINE____}student;___NEXT_LINE____//メンバ関数___NEXT_LINE____void set_data(student* student,int n, int m, int e){___NEXT_LINE____ student->num = n;___NEXT_LINE____   student->math = m;___NEXT_LINE____  student->english = e;___NEXT_LINE____}___NEXT_LINE____void test_sum(student* student){___NEXT_LINE____  printf("学籍番号%dの生徒のテストの点数の合計は%dです。\n",student->num,student->math+student->english);___NEXT_LINE____  return;___NEXT_LINE____}___NEXT_LINE____//初期化関数___NEXT_LINE____student init(void){___NEXT_LINE____  student c_this;___NEXT_LINE____ c_this.set_data = &set_data;___NEXT_LINE____    c_this.test_sum = &test_sum;___NEXT_LINE____    return c_this;___NEXT_LINE____}___NEXT_LINE____//main関数___NEXT_LINE____int main(){___NEXT_LINE____  student student1=init();___NEXT_LINE____    student1.set_data(&student1,1, 60, 50);___NEXT_LINE____ student1.test_sum(&student1);___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-04-24 15:25:05,2015-04-25 03:31:10,
218,C++11の戻り値の後置機能,例えば___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____int(*front)(c_int_vector const* c_this);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____が___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____auto (*front)(c_int_vector const* c_this) -> int;___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____とかける。つまり___NEXT_LINE____```___NEXT_LINE____void strstr_and_do(const char* str, const char* search_key, auto (*strsearch)(const char*, const char*) -> _CONST_RETURN char*);___NEXT_LINE____```___NEXT_LINE____みたいな関数が作れる。すっきり。___NEXT_LINE_______NEXT_LINE____なおmsys2 mingw64 clang++3.5.1ではコンパイルエラーになる模様。なんでや  ___NEXT_LINE____と思ったら、どうもマクロ``_CONST_RETURN``が``const``にdefineされていなかった模様。___NEXT_LINE_______NEXT_LINE____ちなみにこの機能の必要性としては___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____decltype(cos(r)) Function(double r) { return cos(r); }//error: 'r' is not defined.___NEXT_LINE____auto Function(double r) -> decltype(cos(r)) { return cos(r); }//OK___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____とか___NEXT_LINE____```___NEXT_LINE____[](const char* str) -> unsigned long long int {___NEXT_LINE____ errno = 0;___NEXT_LINE____  const auto tmp = strtoull(str, nullptr, 10);___NEXT_LINE____    return (0 == errno) ? tmp : search_max_temp;___NEXT_LINE____}(argv[1]);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____とか書けるようにするため。___NEXT_LINE_______NEXT_LINE____参考リンク  ___NEXT_LINE____[C++11の新しい関数の宣言 | 本の虫](http://cpplover.blogspot.jp/2014/01/c11.html)  ___NEXT_LINE____[メンバー関数へのポインターを返すメンバー関数へのポインターを返すメンバー関数 | 本の虫 ](http://cpplover.blogspot.jp/2015/03/blog-post_24.html)  ___NEXT_LINE____[Clang++コンパイルエラーclang++ strstr/main.cpp strstr/strstr.cpp -o... - Yahoo!知恵袋](http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q12144767132),jp,7,2015-04-25 03:29:27,2015-05-10 17:59:02,
220,javaScriptアニメーション～割り込み処理～（完成！！！！）,合格もらった！！！___NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title>canvas</title>___NEXT_LINE____    <meta charset="utf-8" />___NEXT_LINE____    <style type="text/css">___NEXT_LINE____        .button {___NEXT_LINE____            position: absolute;___NEXT_LINE____            top: 5px;___NEXT_LINE____            left: 5px;___NEXT_LINE____        }___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <input type="button" id="button" value="button" class="button" />___NEXT_LINE____    <canvas id="canvas" width="600" height="300"></canvas>___NEXT_LINE____    <script type="text/javascript">___NEXT_LINE____        var canvasHelper = {___NEXT_LINE____            //初期化___NEXT_LINE____            init: function () {___NEXT_LINE____                // constructor___NEXT_LINE____                var self = this;___NEXT_LINE____                self.element1 = document.getElementById("canvas");___NEXT_LINE____                self.ctx = self.element1.getContext("2d");___NEXT_LINE____            },___NEXT_LINE____            //canvasを消す___NEXT_LINE____            clear: function () {___NEXT_LINE____                var self = this;___NEXT_LINE____                // clear all things draw in canvas___NEXT_LINE____                self.ctx.clearRect(0, 0, 1000, 1000);___NEXT_LINE____            },___NEXT_LINE____            //canvasを書く___NEXT_LINE____            drawRectangle: function (hogeStyle) {___NEXT_LINE____                // draw a rectangle___NEXT_LINE____                var self = this;___NEXT_LINE____                self.ctx.fillStyle = "#0000ff";___NEXT_LINE____                self.ctx.fillRect(hogeStyle.x, hogeStyle.y, hogeStyle.w, hogeStyle.h);___NEXT_LINE____            },___NEXT_LINE____            //アニメーション___NEXT_LINE____            animateStart: function (beginStyle, endStyle, arg_duration,button_function_bool) {___NEXT_LINE____                //変数定義---------------------------------------------------------___NEXT_LINE____                var self = this;___NEXT_LINE____                //n回目のタイムアウト___NEXT_LINE____                var count = 1;___NEXT_LINE____                //タイムアウト用変数___NEXT_LINE____                var time_id;___NEXT_LINE____                //割り込み判断用変数___NEXT_LINE____                var judge_bool = button_function_bool;___NEXT_LINE____                //------------------------------------------------------------------___NEXT_LINE____                //アニメーション関数___NEXT_LINE____                var animation = function () {___NEXT_LINE____                    //画面クリア___NEXT_LINE____                    self.clear();___NEXT_LINE____                    //右下に行く場合___NEXT_LINE____                    if (judge_bool == true) {___NEXT_LINE____                        //差分を考慮して要素を出す___NEXT_LINE____                        var newStyle = {___NEXT_LINE____                            x: beginStyle.x + (diffStyle.x_d * count ),___NEXT_LINE____                            y: beginStyle.y + (diffStyle.y_d * count ),___NEXT_LINE____                            w: beginStyle.w + (diffStyle.w_d * count ),___NEXT_LINE____                            h: beginStyle.h + (diffStyle.h_d * count )___NEXT_LINE____                        };___NEXT_LINE____                        duration -= span;___NEXT_LINE____                    }___NEXT_LINE____                    //左上に行く場合___NEXT_LINE____                    else {___NEXT_LINE____                        //差分を考慮して要素を出す___NEXT_LINE____                        var newStyle = {___NEXT_LINE____                            x: beginStyle.x - (diffStyle.x_d * count ),  ___NEXT_LINE____                            y: beginStyle.y - (diffStyle.y_d * count ),       ___NEXT_LINE____                            w: beginStyle.w - (diffStyle.w_d * count ),___NEXT_LINE____                            h: beginStyle.h - (diffStyle.h_d * count )___NEXT_LINE____                        };___NEXT_LINE____                        duration += span;___NEXT_LINE____                    }___NEXT_LINE____                    self.drawRectangle(newStyle);___NEXT_LINE____                    count++;___NEXT_LINE____                    //現在の位置をlocation_currentに代入___NEXT_LINE____                    location_current = newStyle;___NEXT_LINE____                    if ((count * span) > arg_duration) {___NEXT_LINE____                        self.clear();___NEXT_LINE____                        self.drawRectangle(endStyle);___NEXT_LINE____                        location_current = endStyle;___NEXT_LINE____                    }___NEXT_LINE____                    else {___NEXT_LINE____                        //割り込み処理が入った場合___NEXT_LINE____                        if (judge_bool != button_bool) {___NEXT_LINE____                            clearTimeout(time_id);___NEXT_LINE____                        }___NEXT_LINE____                        else {___NEXT_LINE____                            //タイムアウト___NEXT_LINE____                            time_id = setTimeout(animation, span);___NEXT_LINE____                        }___NEXT_LINE____                    }___NEXT_LINE____                };___NEXT_LINE____                //タイムアウト___NEXT_LINE____                time_id = setTimeout(animation, span);___NEXT_LINE____            }___NEXT_LINE____        };___NEXT_LINE____        //変数定義-----------------------------------------------------___NEXT_LINE____        //クリックした時の処理用変数___NEXT_LINE____        var n = 0;___NEXT_LINE____        //spanミリ秒ごとにtimeoutする___NEXT_LINE____        var span = 50;___NEXT_LINE____        //addeventlistner使いたい___NEXT_LINE____        var element = document.getElementById("button");___NEXT_LINE____        //動かす時間(milliseconds単位)___NEXT_LINE____        var duration = 1000;___NEXT_LINE____        //動かす時間（最大値）___NEXT_LINE____        var static_duration = 1000;___NEXT_LINE____        //canvasの情報___NEXT_LINE____        var location1 = {___NEXT_LINE____            x: 50,___NEXT_LINE____            y: 50,___NEXT_LINE____            w: 40,___NEXT_LINE____            h: 40___NEXT_LINE____        };___NEXT_LINE____        var location2 = {___NEXT_LINE____            x: 200,___NEXT_LINE____            y: 200,___NEXT_LINE____            w: 40,___NEXT_LINE____            h: 40___NEXT_LINE____        };___NEXT_LINE____        var location_current = {___NEXT_LINE____            x: 0,___NEXT_LINE____            y: 0,___NEXT_LINE____            w: 0,___NEXT_LINE____            h: 0___NEXT_LINE____        };___NEXT_LINE____        //spanミリ秒ごとの差分を出す___NEXT_LINE____        var diffStyle = {___NEXT_LINE____            x_d: (location2.x - location1.x) / (duration / span),___NEXT_LINE____            y_d: (location2.y - location1.y) / (duration / span),___NEXT_LINE____            w_d: (location2.w - location1.w) / (duration / span),___NEXT_LINE____            h_d: (location2.h - location1.h) / (duration / span)___NEXT_LINE____        };___NEXT_LINE____        //割り込みかどうか判断する___NEXT_LINE____        var button_bool = false;___NEXT_LINE____        //関数定義-------------------------------------------------------------___NEXT_LINE____        //クリックしたとき実行する___NEXT_LINE____        function action() {___NEXT_LINE____            button_bool = !button_bool;___NEXT_LINE____            if (0 == n) {___NEXT_LINE____                location_current = location1;___NEXT_LINE____            }___NEXT_LINE____            if (n % 2 == 0) {___NEXT_LINE____                canvasHelper.animateStart(location_current, location2, duration, button_bool);___NEXT_LINE____            }___NEXT_LINE____            else {___NEXT_LINE____                canvasHelper.animateStart(location_current, location1, static_duration-duration, button_bool);___NEXT_LINE____            }___NEXT_LINE____            n++;___NEXT_LINE____        };___NEXT_LINE____        //---------------------------------------------------------------------___NEXT_LINE____        canvasHelper.init();___NEXT_LINE____        console.log("good");___NEXT_LINE____        canvasHelper.drawRectangle(location1);___NEXT_LINE____        element.addEventListener("click", action);___NEXT_LINE____    </script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE_______NEXT_LINE_______NEXT_LINE_______NEXT_LINE____```,jp,21,2015-04-26 01:31:47,2015-04-28 16:41:24,
221,ページ間変遷リンクをつけるには,内容的には  ___NEXT_LINE____[http://hosidukiyo.at-ninja.jp/novel_c/cm/cm08_04.html](http://hosidukiyo.at-ninja.jp/novel_c/cm/cm08_04.html)  ___NEXT_LINE____のパクリなんだけど、コード的にはHTML5+CSS3っぽくだいぶ変わったのでメモ。  ___NEXT_LINE_______NEXT_LINE____HTML___NEXT_LINE____```___NEXT_LINE____    <nav class="top">___NEXT_LINE____        <ul>___NEXT_LINE____            <li><a href="./16Range-base_for.html" title="前頁">prev</a></li>___NEXT_LINE____            <li><a href="index.html" title="目次">main</a></li>___NEXT_LINE____            <li><a href="./18c_char_str_base.html" title="次頁">next</a></li>___NEXT_LINE____        </ul>___NEXT_LINE____    </nav>___NEXT_LINE____<!-- 中略 -->___NEXT_LINE____    <nav class="bottom">___NEXT_LINE____        <ul>___NEXT_LINE____            <li><a href="./16Range-base_for.html" title="前頁">prev</a></li>___NEXT_LINE____            <li><a href="index.html" title="目次">main</a></li>___NEXT_LINE____            <li><a href="./18c_char_str_base.html" title="次頁">next</a></li>___NEXT_LINE____        </ul>___NEXT_LINE____    </nav>___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____CSS___NEXT_LINE____```___NEXT_LINE____nav.top{___NEXT_LINE____    border-bottom: solid 2px #000000;___NEXT_LINE____}___NEXT_LINE____nav.bottom{___NEXT_LINE____   border-top: solid 2px #000000;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____nav ul{___NEXT_LINE____  margin: 10px auto;___NEXT_LINE____  text-align: center;___NEXT_LINE____ padding: 0px;___NEXT_LINE____}___NEXT_LINE____nav ul li{___NEXT_LINE____    margin: 0px 5px;___NEXT_LINE____    -moz-border-radius: 5px;    /* Firefox */___NEXT_LINE____   -webkit-border-radius: 5px; /* Safari,Chrome */___NEXT_LINE____ border: 2px #4f455c solid;___NEXT_LINE____  border-radius: 5px;___NEXT_LINE____ display: inline-block;___NEXT_LINE____  list-style-type: none;___NEXT_LINE____  background-color: #eaf4fc;___NEXT_LINE____  font-family: Inconsolata, Ricty, Consolas, "Source Code Pro", "Anonymous Pro", "Ubuntu Mono", "Dejavu Sans Mono", "Liberation Mono", Menlo, Courier, monospace;___NEXT_LINE____}___NEXT_LINE____nav ul li a{___NEXT_LINE____    color: #000000;___NEXT_LINE____ font-size: 0.8em;___NEXT_LINE____   text-decoration: none;___NEXT_LINE____  display: block;___NEXT_LINE____ padding: 3px 15px;___NEXT_LINE____  text-align: center;___NEXT_LINE____}___NEXT_LINE____nav ul li.disable{___NEXT_LINE____  text-decoration: line-through;___NEXT_LINE____  background-color: #9790a4;___NEXT_LINE____  border: 2px #9790a4 solid;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____``display: inline-block``でないと、``border-radius``が効かないので注意___NEXT_LINE_______NEXT_LINE____ちなみに次のページとか前のページなんかない、という時は___NEXT_LINE____```___NEXT_LINE____    <nav class="top">___NEXT_LINE____        <ul>___NEXT_LINE____            <li class="disable">prev</li>___NEXT_LINE____            <li><a href="index.html" title="目次">main</a></li>___NEXT_LINE____            <li class="disable">next</li>___NEXT_LINE____        </ul>___NEXT_LINE____    </nav>___NEXT_LINE____<!-- 中略 -->___NEXT_LINE____    <nav class="bottom">___NEXT_LINE____        <ul>___NEXT_LINE____            <li class="disable">prev</li>___NEXT_LINE____            <li><a href="index.html" title="目次">main</a></li>___NEXT_LINE____            <li class="disable">next</li>___NEXT_LINE____        </ul>___NEXT_LINE____    </nav>___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____なかんじ。色とかリンク先は適当に読み替えてください,jp,7,2015-04-28 02:31:58,2015-04-28 02:31:58,
222,fgets()とsscanf()を使って入力,scanf()は危ないらしい（らしい）ので、fgets()とsscanf()を使った方法をメモっとく___NEXT_LINE_______NEXT_LINE____これ授業でやったら怒られるのかな・・・？___NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____int main(){___NEXT_LINE____    int seisu;___NEXT_LINE____  char buf[1024];___NEXT_LINE____ printf("入力してね\n");___NEXT_LINE____  ___NEXT_LINE____    fgets(buf,sizeof(buf),stdin);___NEXT_LINE____   sscanf(buf,"%d",&seisu);___NEXT_LINE____    ___NEXT_LINE____    printf("入力された値:%d\n",seisu);___NEXT_LINE____    ___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-04-28 03:01:54,2015-04-28 03:01:54,
223,C,C++の自分用テンプレート,```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-04-28 04:44:49,2015-04-28 04:44:49,
224,unixコマンド　基本,ディレクトリの検索、移動のやり方___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____cd (ディレクトリ名)・・・ ディレクトリの移動___NEXT_LINE_______NEXT_LINE____ls ・・・今のディレクトリ内にあるファイルを表示する___NEXT_LINE_______NEXT_LINE____cd (tabキー)・・・lsで表示されたファイルの候補を出してくれる___NEXT_LINE_______NEXT_LINE_______NEXT_LINE_______NEXT_LINE____```,jp,19,2015-04-29 00:46:26,2015-04-29 00:46:26,
225,長方形方形専用のCanvasHelper（練習）,アルゴリズムの練習にシンプルのCanvasアニーションヘルパーを作りました。特徴としては___NEXT_LINE_______NEXT_LINE____* 長方形を描く___NEXT_LINE____* css3のtransitionアニメーションをCanvasで表現する際のアルゴリズム___NEXT_LINE_______NEXT_LINE____`http://codegarage.edisonthk.com/_p/snippet/215`のもっと効率的な書き方です。___NEXT_LINE_______NEXT_LINE____Library部分___NEXT_LINE____```___NEXT_LINE____var canvasHelper = {___NEXT_LINE____    //初期化___NEXT_LINE____    init: function () {___NEXT_LINE____        // constructor___NEXT_LINE____        var self = this;___NEXT_LINE____        self.playing = false;___NEXT_LINE____        self.element1 = document.getElementById("canvas");___NEXT_LINE____        self.ctx = self.element1.getContext("2d");___NEXT_LINE____　　　　},___NEXT_LINE____    //canvasを消す___NEXT_LINE____    clear: function () {___NEXT_LINE____        var self = this;___NEXT_LINE____        // clear all things draw in canvas___NEXT_LINE____        self.ctx.clearRect(0, 0, 1000, 1000);___NEXT_LINE____    },___NEXT_LINE____    //canvasを書く___NEXT_LINE____    drawRectangle: function (hogeStyle) {___NEXT_LINE____        // draw a rectangle___NEXT_LINE____        var self = this;___NEXT_LINE____        self.ctx.fillStyle = "#0000ff";___NEXT_LINE____        self.ctx.fillRect(hogeStyle.x, hogeStyle.y, hogeStyle.w, hogeStyle.h);___NEXT_LINE____    },___NEXT_LINE____    // 現在進行しているアニメーションを停止する___NEXT_LINE____    animateStop: function() {___NEXT_LINE____        var self = this;___NEXT_LINE____        clearTimeout(self.time_id);___NEXT_LINE____    },___NEXT_LINE____    isPlaying: function() {___NEXT_LINE____        var self = this;___NEXT_LINE____        return self.playing;___NEXT_LINE____    },___NEXT_LINE____    getCurrentStyle: function() {___NEXT_LINE____        var self = this;___NEXT_LINE____        return self.currentStyle;___NEXT_LINE____    },___NEXT_LINE____    calcCount: function(beginStyle, diffStyle) {___NEXT_LINE____        var self = this;___NEXT_LINE____        return parseInt((self.currentStyle.x - beginStyle.x) / diffStyle.x_d) + 1;___NEXT_LINE____    },___NEXT_LINE____    //アニメーション___NEXT_LINE____    animateStart: function (beginStyle, endStyle, duration) {___NEXT_LINE_______NEXT_LINE____        //変数定義---------------------------------------------------------___NEXT_LINE____        var count = 1;___NEXT_LINE____        var self = this;___NEXT_LINE____        //spanミリ秒ごとにtimeoutする___NEXT_LINE____        var span = 10;___NEXT_LINE_______NEXT_LINE____        // アニメーションを停止します___NEXT_LINE____        self.animateStop();___NEXT_LINE____        ___NEXT_LINE____        //spanミリ秒ごとの差分を出す___NEXT_LINE____        var diffStyle = {___NEXT_LINE____            x_d: (endStyle.x - beginStyle.x) / (duration / span),___NEXT_LINE____            y_d: (endStyle.y - beginStyle.y) / (duration / span),___NEXT_LINE____            w_d: (endStyle.w - beginStyle.w) / (duration / span),___NEXT_LINE____            h_d: (endStyle.h - beginStyle.h) / (duration / span)___NEXT_LINE____        };___NEXT_LINE____        ___NEXT_LINE____        if(self.isPlaying()) {___NEXT_LINE____            //　アニメーションは途中から始まるので、countを再計算する___NEXT_LINE____            count = self.calcCount(beginStyle, diffStyle);___NEXT_LINE____        }___NEXT_LINE____        self.playing = true;___NEXT_LINE____        ___NEXT_LINE____        //------------------------------------------------------------------___NEXT_LINE____        //アニメーション関数___NEXT_LINE____        var animation = function () {___NEXT_LINE____            //確認___NEXT_LINE____            //画面クリア___NEXT_LINE____            self.clear();___NEXT_LINE____            //差分を考慮して要素を出す___NEXT_LINE____            self.currentStyle = {___NEXT_LINE____                x: beginStyle.x + (diffStyle.x_d * (count-1)),___NEXT_LINE____                y: beginStyle.y + (diffStyle.y_d * (count-1)),___NEXT_LINE____                w: beginStyle.w + (diffStyle.w_d * (count-1)),___NEXT_LINE____                h: beginStyle.h + (diffStyle.h_d * (count-1))___NEXT_LINE____            };___NEXT_LINE____            self.drawRectangle(self.currentStyle);___NEXT_LINE____            count++;___NEXT_LINE____            if ((count * span) > duration) {___NEXT_LINE____                self.playing = false;___NEXT_LINE____                self.clear();___NEXT_LINE____                self.drawRectangle(endStyle);___NEXT_LINE____                return;___NEXT_LINE____            }___NEXT_LINE____            else {___NEXT_LINE____                //タイムアウト___NEXT_LINE____                self.time_id=setTimeout(animation, span);___NEXT_LINE____            }___NEXT_LINE____        };___NEXT_LINE____        //タイムアウト___NEXT_LINE____        self.time_id=setTimeout(animation, span);___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE____```___NEXT_LINE____使い方としては___NEXT_LINE____```___NEXT_LINE____//動かす時間(milliseconds単位)___NEXT_LINE____var duration = 1000;___NEXT_LINE____//初期canvas & 偶数回目にクリックしたときの移動先canvas___NEXT_LINE____var leftTopStyle = {___NEXT_LINE____    x: 50,___NEXT_LINE____    y: 50,___NEXT_LINE____    w: 40,___NEXT_LINE____    h: 40___NEXT_LINE____};___NEXT_LINE____//奇数回目にクリックした時の移動先canvas___NEXT_LINE____var rightBottomStyle = {___NEXT_LINE____    x: 200,___NEXT_LINE____    y: 200,___NEXT_LINE____    w: 40,___NEXT_LINE____    h: 40___NEXT_LINE____};___NEXT_LINE____// 初期段階は段階はleftTopStyle___NEXT_LINE____//関数定義-------------------------------------------------------------___NEXT_LINE____//クリックした時の処理用変数___NEXT_LINE____var toggleFlag = false;___NEXT_LINE_______NEXT_LINE____function action() {___NEXT_LINE____    toggleFlag = !toggleFlag;___NEXT_LINE____    if(toggleFlag) {___NEXT_LINE____        canvasHelper.animateStart(leftTopStyle, rightBottomStyle, duration);___NEXT_LINE____    }else{___NEXT_LINE____        canvasHelper.animateStart(rightBottomStyle, leftTopStyle, duration);___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE____//---------------------------------------------------------------------___NEXT_LINE____canvasHelper.init();___NEXT_LINE____canvasHelper.drawRectangle(leftTopStyle);___NEXT_LINE_______NEXT_LINE____element2.addEventListener("click",action);___NEXT_LINE____```,jp,1,2015-04-29 06:56:30,2015-04-29 06:56:30,
226,C++でvector作ってみた（簡易版）,int型のみ　ほとんど機能ないけど一応作ってみた___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE____//基底クラス___NEXT_LINE____class Object{___NEXT_LINE____public:___NEXT_LINE____   virtual ~Object(){}___NEXT_LINE____};___NEXT_LINE____//vectorクラス___NEXT_LINE____class Vector :public Object{//Vectorそれ自身もObjectから派生___NEXT_LINE____ Object** data_;//要素の格納領域___NEXT_LINE____    int capacity_;//格納可能な最大要素数___NEXT_LINE____  int size_;//格納されている要素数___NEXT_LINE_______NEXT_LINE____public:___NEXT_LINE____   Vector() :data_(0), capacity_(0), size_(0){}___NEXT_LINE____    ~Vector(){___NEXT_LINE____      //格納されている全要素を破棄する___NEXT_LINE____       for (int i = 0; i < size_; ++i){___NEXT_LINE____            delete data_[i];___NEXT_LINE____        }___NEXT_LINE____       delete[] data_;___NEXT_LINE____ }___NEXT_LINE____   //要素の追加___NEXT_LINE____ void add(Object* item){___NEXT_LINE____     if (size_ == capacity_){___NEXT_LINE____            capacity_ += 10;___NEXT_LINE____            Object** tmp = new Object*[capacity_];___NEXT_LINE____          for (int i=0; i < size_; ++i){___NEXT_LINE____              tmp[i] = data_[i];___NEXT_LINE____          }___NEXT_LINE____           delete[] data_;___NEXT_LINE____         data_ = tmp;___NEXT_LINE____        }___NEXT_LINE____       //末尾に追加する___NEXT_LINE____       data_[size_++] = item;___NEXT_LINE____  }___NEXT_LINE____   Object* at(int index){___NEXT_LINE____      if (index < 0 || index >= size_){___NEXT_LINE____           return 0;___NEXT_LINE____       }___NEXT_LINE____       return data_[index];___NEXT_LINE____    }___NEXT_LINE____   //格納されている要素数を返す___NEXT_LINE____ int size() const{ return size_; }___NEXT_LINE____};___NEXT_LINE____//int型___NEXT_LINE____class Integer :public Object{___NEXT_LINE____  int value_;___NEXT_LINE____public:___NEXT_LINE____  Integer(int v) :value_(v){}___NEXT_LINE____ int value()const{ return value_; }___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____ Vector v;___NEXT_LINE____   v.add(new Integer(12));___NEXT_LINE____ v.add(new Integer(5));___NEXT_LINE____  for (int i = 0; i < v.size(); ++i){___NEXT_LINE____     Integer* ptr = (Integer*)v.at(i);___NEXT_LINE____       cout << ptr->value() << endl;___NEXT_LINE____   }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-04-30 17:39:00,2015-04-30 17:39:00,
227,テンプレート使ってstack作ってみた,安心と信頼の機能のなさだけど勉強用だから仕方ないね。テンプレート使ってみたかったんだよ___NEXT_LINE_______NEXT_LINE____ stack.h___NEXT_LINE____```___NEXT_LINE____#ifndef STACK_H____NEXT_LINE____#define STACK_H____NEXT_LINE_______NEXT_LINE____template<class T>___NEXT_LINE____class Stack{___NEXT_LINE____ T* data_;___NEXT_LINE____   int index_;___NEXT_LINE____ int capacity_;___NEXT_LINE____public:___NEXT_LINE____   explicit Stack(int n);___NEXT_LINE____  ~Stack();___NEXT_LINE_______NEXT_LINE____   void push(T x);___NEXT_LINE____ T top()const;___NEXT_LINE____   void pop();___NEXT_LINE____ int size()const;___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____#endif___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____main.cpp___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include"stack.h"___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____    Stack<int> s(10);___NEXT_LINE____   s.push(1);___NEXT_LINE____  s.push(2);___NEXT_LINE____  while (s.size() != 0){___NEXT_LINE____      std::cout << s.top() << std::endl;___NEXT_LINE____      s.pop();___NEXT_LINE____    }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____stack.cpp___NEXT_LINE____```___NEXT_LINE____#include"stack.h"___NEXT_LINE_______NEXT_LINE____template <class T>___NEXT_LINE____Stack<T>::Stack(int n) : capacity_(n), index_(0){___NEXT_LINE____   data_ = new T[capacity_];___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template <class T>___NEXT_LINE____Stack<T>::~Stack(){___NEXT_LINE____ delete[] data_;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template<class T>___NEXT_LINE____void Stack<T>::push(T x){___NEXT_LINE____  if (index_ < capacity_){___NEXT_LINE____        data_[index_++] = x;___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template <class T>___NEXT_LINE____T Stack<T>::top() const{___NEXT_LINE____    return data_[index_ - 1];___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template<class T>___NEXT_LINE____void Stack<T>::pop(){___NEXT_LINE____    if (index_ > 0){___NEXT_LINE____        --index_;___NEXT_LINE____   }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template<class T>___NEXT_LINE____int Stack<T>::size()const{___NEXT_LINE____   return index_;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template class Stack < int > ;___NEXT_LINE____```,jp,21,2015-05-01 17:03:56,2015-05-01 17:03:56,
228,templatet使って簡単な電話帳を作ってみた,template使うとソースコード使いまわせて楽そう___NEXT_LINE_______NEXT_LINE____C++初心者だからもっと勉強しなくちゃなぁ___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<string>___NEXT_LINE____#include<vector>___NEXT_LINE____#include<iterator>___NEXT_LINE____#include<algorithm>___NEXT_LINE____using namespace std;___NEXT_LINE____//電話帳___NEXT_LINE____template<template<class T,class A=allocator<T>>class Container>___NEXT_LINE____class Phonebook{___NEXT_LINE____  struct Record{___NEXT_LINE____      string name;//名前___NEXT_LINE____        string phone;//電話番号___NEXT_LINE____     Record(const string& n, const string& p)___NEXT_LINE____            :name(n), phone(p){}___NEXT_LINE____        friend ostream& operator<<(ostream& stream, const Record& r){___NEXT_LINE____           return stream << r.name << ":" << r.phone;___NEXT_LINE____      }___NEXT_LINE____   };___NEXT_LINE____  Container<Record> book;___NEXT_LINE____public:___NEXT_LINE____  //名前と電話番号を追加___NEXT_LINE____    void add(const string& name, const string& phone){___NEXT_LINE____      book.emplace_back(name, phone);___NEXT_LINE____ }___NEXT_LINE____   //streamに出力___NEXT_LINE____ void print(ostream& stream)const{___NEXT_LINE____       copy(begin(book), end(book),___NEXT_LINE____            ostream_iterator<Record>(stream, "\n"));___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE____//main関数___NEXT_LINE____int main()___NEXT_LINE____{___NEXT_LINE____  Phonebook<vector> pb;___NEXT_LINE____   pb.add("police", "110");___NEXT_LINE____    pb.add("fire", "119");___NEXT_LINE____  pb.add("weather", "117");___NEXT_LINE____   pb.print(cout);___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-02 03:42:57,2015-05-02 03:43:57,
229,出力イテレータ,複数の要素を他のコンテナやストリームに出力するアルゴリズムを設計する場合、出力イテレータ（Output Iterator)というものを使うそうです。例えばstd::copy()アルゴリズムを使ってみるとこんな感じですね。（本を見ながら）___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____#include<iterator>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____//copy関数の定義___NEXT_LINE____/*___NEXT_LINE____template<class InputIterator,class OutputIterator>___NEXT_LINE____OutputIterator___NEXT_LINE____copy(InputIterator first, InputIterator last, OutputIterator out){___NEXT_LINE____    while (first != last){___NEXT_LINE____      *out = *first;___NEXT_LINE____      ++out;___NEXT_LINE____      ++first;___NEXT_LINE____    }___NEXT_LINE____   return out;___NEXT_LINE____}___NEXT_LINE____*/___NEXT_LINE_______NEXT_LINE____int main()___NEXT_LINE____{___NEXT_LINE____   vector<int>v = { 1, 2, 3 };___NEXT_LINE_______NEXT_LINE____ vector<int>result;___NEXT_LINE____  copy(begin(v), end(v), back_inserter(result));___NEXT_LINE_______NEXT_LINE____  for (int x : result){___NEXT_LINE____       cout << x << endl;___NEXT_LINE____  }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-02 04:16:53,2015-05-02 04:17:18,
230,Swift文法のチートシート,swiftの文法と予約語を紹介します___NEXT_LINE_______NEXT_LINE____### 変数／定数___NEXT_LINE____```___NEXT_LINE____let myconst = "c" // 定数宣言___NEXT_LINE____var myvar = "b" // 変数宣言___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____### 関数___NEXT_LINE____```___NEXT_LINE____func myFunc() -> NSString {___NEXT_LINE____      return "hello";___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____func myFunc2(a:NSString) ->NSString{ ___NEXT_LINE____      return a;___NEXT_LINE____}___NEXT_LINE____myFunc2("hello");  // 利用例___NEXT_LINE____```,jp,1,2015-05-03 07:22:26,2015-05-03 07:29:20,
231,iOSで音楽を流す,```___NEXT_LINE____import AVFoundation;   // ライブラリーのインポート___NEXT_LINE____import UIKit___NEXT_LINE_______NEXT_LINE____class ViewController: UIViewController {___NEXT_LINE_______NEXT_LINE____    var audioPlayer = AVAudioPlayer(); // audioPlayerをグローバルで宣言しないとメモリーがすぐ解放されてしまう。 ___NEXT_LINE____    ___NEXT_LINE____    override func viewDidLoad() {___NEXT_LINE____        super.viewDidLoad()___NEXT_LINE_______NEXT_LINE____        // 仮にa.mp3がプロジェクトのrootフォルダに置かれています。___NEXT_LINE____        var url = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource("a", ofType: "mp3")! );___NEXT_LINE____        audioPlayer = AVAudioPlayer(contentsOfURL: url, error: nil);___NEXT_LINE____        audioPlayer.prepareToPlay();___NEXT_LINE____        audioPlayer.play();___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____注意するところは２点___NEXT_LINE_______NEXT_LINE____* AVFoundationをインポートすること___NEXT_LINE____* AVAudioPlayerのインスタンスがグローバル変数で宣言,jp,1,2015-05-03 11:00:45,2015-05-03 11:03:49,
232,TCPソケット（シングルスレッド）,シンプルtcpソケットの受信スニペット。しかし、UIと同じスレッドで処理を行うので、ボタンなどのUIが機能しません。___NEXT_LINE____```___NEXT_LINE____//___NEXT_LINE____//  ViewController.swift___NEXT_LINE____//  Swift TCP___NEXT_LINE____//___NEXT_LINE____//  Created by Edisonthk on 2015/05/03.___NEXT_LINE____//  Copyright (c) 2015年 test. All rights reserved.___NEXT_LINE____//___NEXT_LINE____import CoreFoundation;___NEXT_LINE____import UIKit___NEXT_LINE_______NEXT_LINE____class ViewController: UIViewController,NSStreamDelegate {___NEXT_LINE_______NEXT_LINE____    var inputstream: NSInputStream?;___NEXT_LINE____    var outputstream: NSOutputStream?;___NEXT_LINE_______NEXT_LINE____    override func viewDidLoad() {___NEXT_LINE____        super.viewDidLoad()___NEXT_LINE____        initTcpNetwork();___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    func initTcpNetwork() {___NEXT_LINE____        ___NEXT_LINE____        NSStream.getStreamsToHostWithName("127.0.0.1", port: 5000, inputStream: &inputstream, outputStream: &outputstream)___NEXT_LINE____        ___NEXT_LINE____        inputstream?.delegate=self;___NEXT_LINE____        outputstream?.delegate=self;___NEXT_LINE____        ___NEXT_LINE____        //Set streams into run loops___NEXT_LINE____        inputstream?.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode)___NEXT_LINE____        outputstream?.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode)___NEXT_LINE____        ___NEXT_LINE____        //Open Streams___NEXT_LINE____        inputstream?.open()___NEXT_LINE____        outputstream?.open()___NEXT_LINE____        ___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent) {___NEXT_LINE____        ___NEXT_LINE____        switch (eventCode){___NEXT_LINE____        case NSStreamEvent.OpenCompleted:___NEXT_LINE____            NSLog("Stream opened");___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.HasBytesAvailable:___NEXT_LINE____            if (aStream == inputstream) {___NEXT_LINE____                var buffer = [UInt8](count: 4096, repeatedValue: 0);___NEXT_LINE____                while ((inputstream?.hasBytesAvailable) != nil) {___NEXT_LINE____                    var len = inputstream?.read(&buffer, maxLength: 4096);___NEXT_LINE____                    if (len > 0) {___NEXT_LINE____                        var output: NSString = NSString(bytes:&buffer, length:len!, encoding:NSASCIIStringEncoding)!;___NEXT_LINE____                        recv(output);___NEXT_LINE____                    }___NEXT_LINE____                }___NEXT_LINE____            }___NEXT_LINE____            ___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.ErrorOccurred:___NEXT_LINE____            NSLog("ErrorOccurred")___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.EndEncountered:___NEXT_LINE____            NSLog("EndEncountered")___NEXT_LINE____            break___NEXT_LINE____        default:___NEXT_LINE____            NSLog("unknown.")___NEXT_LINE____        }___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    func recv(recv: NSString) {___NEXT_LINE____        // ここで受信処理を行います___NEXT_LINE____        print(recv);___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-05-03 11:11:42,2015-05-03 15:52:39,
233,directX11の初期化コード,調べてみたけど・・・なるほどわからん___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <d3d11.h>    // DirectX 11使用の為のヘッダ.___NEXT_LINE____#include <iostream>___NEXT_LINE_______NEXT_LINE____#pragma comment( lib, "d3d11.lib")    // DirectX 11使用のためのライブラリリンク.___NEXT_LINE_______NEXT_LINE____// 以下しばらくは単なるウィンドウ作成なので無視 -----------------------------------___NEXT_LINE____LRESULT __stdcall proc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)___NEXT_LINE____{___NEXT_LINE____  if (msg == WM_DESTROY){___NEXT_LINE____     PostQuitMessage(0);___NEXT_LINE____     return 0;___NEXT_LINE____   }___NEXT_LINE____   return DefWindowProcA(hwnd, msg, wp, lp);___NEXT_LINE____}___NEXT_LINE____HWND create_window(){___NEXT_LINE____ WNDCLASSEXA wc = {};___NEXT_LINE____    wc.cbSize = sizeof wc;___NEXT_LINE____  wc.hInstance = GetModuleHandleA(nullptr);___NEXT_LINE____   wc.lpszClassName = "test window class";___NEXT_LINE____ wc.lpfnWndProc = proc;___NEXT_LINE____  if (!RegisterClassExA(&wc)){ return nullptr; }___NEXT_LINE____  RECT r = { 0, 0, 1280, 720 };___NEXT_LINE____   AdjustWindowRect(&r, WS_OVERLAPPEDWINDOW, false);___NEXT_LINE_______NEXT_LINE____   return CreateWindowExA(0,___NEXT_LINE____       wc.lpszClassName, wc.lpszClassName,___NEXT_LINE____     WS_OVERLAPPEDWINDOW | WS_VISIBLE,___NEXT_LINE____       CW_USEDEFAULT, CW_USEDEFAULT,___NEXT_LINE____       r.right - r.left, r.bottom - r.top,___NEXT_LINE____     nullptr, nullptr,___NEXT_LINE____       wc.hInstance,___NEXT_LINE____       nullptr___NEXT_LINE____     );___NEXT_LINE____}___NEXT_LINE____// ここまで適当なウィンドウ作成。DirectX 11とは無関係 -----------------------------___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____int main()___NEXT_LINE____{___NEXT_LINE____   HWND hwnd = create_window();___NEXT_LINE____    // SwapChainの情報指定.___NEXT_LINE____  DXGI_SWAP_CHAIN_DESC desc = {};___NEXT_LINE____ desc.BufferCount = 1;   // オフスクリーンはいくつだ？.___NEXT_LINE____   // ここから1.___NEXT_LINE____   desc.BufferDesc.Width = 1280;___NEXT_LINE____   desc.BufferDesc.Height = 720;   // ここまで縦横解像度.___NEXT_LINE____   desc.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;    // 描画先の形式.___NEXT_LINE____  // ここから2 - Denomintorが分母.___NEXT_LINE____   desc.BufferDesc.RefreshRate.Numerator = 60;___NEXT_LINE____ desc.BufferDesc.RefreshRate.Denominator = 1;___NEXT_LINE____    // ここから3.___NEXT_LINE____   desc.SampleDesc.Count = 1;___NEXT_LINE____  desc.SampleDesc.Quality = 0;    // ここまでMSAAの設定.___NEXT_LINE____ desc.Windowed = true;           // ウィンドウモードか？.___NEXT_LINE____  desc.OutputWindow = hwnd;       // ウィンドウハンドル.___NEXT_LINE_______NEXT_LINE____   // ここからは、特に指定しなくてもいい(0初期化状態のままでいい)と思われるもの.___NEXT_LINE____  desc.SwapEffect = DXGI_SWAP_EFFECT_DISCARD; // ストアアプリではDISCARDじゃなくSEQUENTIAL限定か？.___NEXT_LINE____   desc.Flags = DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;    // フルスクリーン、ウィンドウを切り替えた際に自動変更されるようになる･･･いらないか.___NEXT_LINE____   // 他、desc.Flagsでは自動回転のオフやGDIの使用を可能にするなどの指定がある.___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____  // ここから4.___NEXT_LINE____   // とりあえずレベル高い順に記述しておく.___NEXT_LINE____  D3D_FEATURE_LEVEL features[] = {___NEXT_LINE____        D3D_FEATURE_LEVEL_11_0,___NEXT_LINE____     D3D_FEATURE_LEVEL_10_1,___NEXT_LINE____     D3D_FEATURE_LEVEL_10_0,___NEXT_LINE____     D3D_FEATURE_LEVEL_9_3,___NEXT_LINE____      D3D_FEATURE_LEVEL_9_2,___NEXT_LINE____      D3D_FEATURE_LEVEL_9_1,___NEXT_LINE____  };___NEXT_LINE____  // お待ちかねのCreateDeviceAndSwapChainだ。引数の隣に簡単な説明を書いていく.___NEXT_LINE____    // まずは入れ物としてDeviceとなるID3D11DeviceとContextとなるID3D11DeviceContext___NEXT_LINE____ // それとSwapChainとなるIDXGISwapChainのポインタ変数をそれぞれ用意する.___NEXT_LINE____   ID3D11Device *device;___NEXT_LINE____   ID3D11DeviceContext *context;___NEXT_LINE____   IDXGISwapChain *swap_chain;___NEXT_LINE____ D3D_FEATURE_LEVEL level;___NEXT_LINE____    // 戻り値はHRESULTで戻ってくるので、FAILEDマクロに食わせれば成否が分かる･･･マクロか.___NEXT_LINE____    if (FAILED(___NEXT_LINE____     D3D11CreateDeviceAndSwapChain(___NEXT_LINE____      nullptr,    // どのビデオアダプタを使用するか？既定ならばnullptrで、IDXGIAdapterのアドレスを渡す.___NEXT_LINE____      D3D_DRIVER_TYPE_HARDWARE,   // ドライバのタイプを渡す。これ以外は基本的にソフトウェア実装で、どうしてもという時やデバグ用に用いるべし.___NEXT_LINE____     nullptr,    // 上記をD3D_DRIVER_TYPE_SOFTWAREに設定した際に、その処理を行うDLLのハンドルを渡す。それ以外を指定している際には必ずnullptrを渡す.___NEXT_LINE____        0,          // 何らかのフラグを指定する。詳しくはD3D11_CREATE_DEVICE列挙型で検索検索ぅ.___NEXT_LINE____       nullptr,    // 実はここでD3D_FEATURE_LEVEL列挙型の配列を与える。nullptrにすることで上記featureと同等の内容の配列が使用される.___NEXT_LINE____      0,          // 上記引数で、自分で定義した配列を与えていた場合、その配列の要素数をここに記述する.___NEXT_LINE____        D3D11_SDK_VERSION,  // SDKのバージョン。必ずこの値.___NEXT_LINE____     &desc,      // DXGI_SWAP_CHAIN_DESC構造体のアドレスを設定する。ここで設定した構造愛に設定されているパラメータでSwapChainが作成される.___NEXT_LINE____       &swap_chain,    // 作成が成功した場合に、そのSwapChainのアドレスを格納するポインタ変数へのアドレス。ここで指定したポインタ変数経由でSwapChainを操作する.___NEXT_LINE____     &device,    // 上記とほぼ同様で、こちらにはDeviceのポインタ変数のアドレスを設定する.___NEXT_LINE____       &level,     // 実際に作成に成功したD3D_FEATURE_LEVELを格納するためのD3D_FEATURE_LEVEL列挙型変数のアドレスを設定する.___NEXT_LINE____     &context    // SwapChainやDeviceと同様に、こちらにはContextのポインタ変数のアドレスを設定する.___NEXT_LINE____      )___NEXT_LINE____       )){___NEXT_LINE____     // 失敗した場合･･･どうしようもない。DirectX 11が使えないかDXGI_SWAP_CHAIN_DESCに不適切な値が入っている･･･.___NEXT_LINE____       std::cout << "failed to initialize the directx 11." << std::endl;___NEXT_LINE____       std::cin.get();___NEXT_LINE____     return -1;___NEXT_LINE____  }___NEXT_LINE____   // 成功したんでもう試行する必要はない.___NEXT_LINE____   std::cout << "Success level : " << std::hex << level << std::endl;___NEXT_LINE_______NEXT_LINE____  // さて、各種破棄だ.___NEXT_LINE____    swap_chain->Release();___NEXT_LINE____  context->Release();___NEXT_LINE____ device->Release();___NEXT_LINE_______NEXT_LINE____  std::cin.get();___NEXT_LINE_______NEXT_LINE____ UnregisterClass(nullptr, GetModuleHandleA(nullptr));___NEXT_LINE____    // main関数には暗黙のreturn 0;が存在する.___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____```,jp,21,2015-05-03 11:57:21,2015-05-03 11:57:21,
234,C++のSTLをつかったありきたりな素数探索プログラム,C++の``Vector``のちからってすごいね。Cだとこんなに簡単に書けないもん。  ___NEXT_LINE____なお``constexpr``を使っているのでVisual Studio 2013 November 2013 CTP以降が必要。gccやclangはいまどきの開発環境なら問題なし___NEXT_LINE_______NEXT_LINE____アルゴリズムは有名なエラトステネスのふるい。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <iostream>___NEXT_LINE____#include <vector>___NEXT_LINE____#include <cmath>___NEXT_LINE____#include <limits>___NEXT_LINE____#include <cstdint>___NEXT_LINE____#include <ctime>___NEXT_LINE____typedef uint64_t prime_store_t;___NEXT_LINE____typedef std::vector<prime_store_t> prime_vector;___NEXT_LINE____inline void print_result(const prime_vector& result, const prime_store_t generate_max, const clock_t calc_time){___NEXT_LINE____   using std::cout;___NEXT_LINE____    constexpr double cps = CLOCKS_PER_SEC;___NEXT_LINE____  if (generate_max < 2000){___NEXT_LINE____       for (auto i : result){___NEXT_LINE____          cout << i;___NEXT_LINE____          if (i != result.back()){___NEXT_LINE____                cout << ", ";___NEXT_LINE____           }___NEXT_LINE____       }___NEXT_LINE____       cout << std::endl;___NEXT_LINE____  }___NEXT_LINE____   cout << "素数の数: " << result.size() << " / " << generate_max << std::endl;___NEXT_LINE____    cout << "計算時間: " << calc_time / cps << " sec (" << calc_time << " clock)" << std::endl;___NEXT_LINE____}___NEXT_LINE____inline void calc(prime_vector& prime_num, const prime_store_t generate_max){//エラトステネスのふるい___NEXT_LINE____   for (prime_store_t i = 3; i <= generate_max; i += 2){___NEXT_LINE____       auto it = prime_num.begin();___NEXT_LINE____        //調査対象数iを上回る既知の素数で割ろうとするか、既知の素数で割り切れるまでイテレータを進める___NEXT_LINE____        for (; it != prime_num.end() && *it <= sqrt(i) && i % *it; it++);___NEXT_LINE____       if (i % *it){//既知の素数で割った余りがすべて0でないならば___NEXT_LINE____           prime_num.push_back(i);___NEXT_LINE____     }___NEXT_LINE____       if (i == std::numeric_limits<prime_store_t>::max()) break;//iのオーバーフロー対策___NEXT_LINE____ }___NEXT_LINE____}___NEXT_LINE____int main(void){___NEXT_LINE____   std::ios::sync_with_stdio(false);//C標準入出力は使わないので同期を切る___NEXT_LINE____   std::cout << "求める素数の最大値を入力してください" << std::endl;___NEXT_LINE____ const auto generate_max = []{___NEXT_LINE____       prime_store_t tmp = 0;___NEXT_LINE____      std::cin >> tmp;___NEXT_LINE____        return tmp;___NEXT_LINE____ }();___NEXT_LINE____    const auto process_begin = clock();___NEXT_LINE____ prime_vector prime_num;___NEXT_LINE____ if (generate_max >= 2){___NEXT_LINE____     prime_num.push_back(2);___NEXT_LINE____     if (generate_max > 2) calc(prime_num, generate_max);___NEXT_LINE____    }___NEXT_LINE____   print_result(prime_num, generate_max, clock() - process_begin);___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____```,jp,7,2015-05-03 15:18:25,2015-05-03 15:18:25,
235,TCPソケット（シングルスレッド）,[http://codegarage.edisonthk.com/_p/snippet/232](http://codegarage.edisonthk.com/_p/snippet/232) と同じ、UIスレッドでソケット処理を行いますが、こちらのサンプルはCFStreamCreatePairWithSocketToHostメソッドを利用しています。___NEXT_LINE____```___NEXT_LINE____import CoreFoundation;___NEXT_LINE____import UIKit___NEXT_LINE_______NEXT_LINE____class ViewController: UIViewController,NSStreamDelegate {___NEXT_LINE_______NEXT_LINE____    ___NEXT_LINE____    override func viewDidLoad() {___NEXT_LINE____        super.viewDidLoad()___NEXT_LINE____        initTcpNetwork();___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    func initTcpNetwork() {___NEXT_LINE____        ___NEXT_LINE____        var readStream:  Unmanaged<CFReadStream>?___NEXT_LINE____        var writeStream: Unmanaged<CFWriteStream>?___NEXT_LINE____        ___NEXT_LINE____        CFStreamCreatePairWithSocketToHost(nil, "127.0.0.1", 5000, &readStream, &writeStream);___NEXT_LINE_______NEXT_LINE____        var inputStream: NSInputStream = readStream!.takeRetainedValue();___NEXT_LINE____        var outputStream: NSOutputStream = writeStream!.takeRetainedValue();___NEXT_LINE____        ___NEXT_LINE____        inputStream.delegate = self;___NEXT_LINE____        outputStream.delegate = self;___NEXT_LINE____        ___NEXT_LINE____        inputStream.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode)___NEXT_LINE____        outputStream.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode)___NEXT_LINE____        ___NEXT_LINE____        //Open Streams___NEXT_LINE____        inputStream.open()___NEXT_LINE____        outputStream.open()___NEXT_LINE____        ___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent) {___NEXT_LINE____        ___NEXT_LINE____        switch (eventCode){___NEXT_LINE____        case NSStreamEvent.OpenCompleted:___NEXT_LINE____            NSLog("Stream opened");___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.HasBytesAvailable:___NEXT_LINE____            var inputstream = aStream as? NSInputStream;___NEXT_LINE_______NEXT_LINE____                var buffer = [UInt8](count: 4096, repeatedValue: 0);___NEXT_LINE____                while ((inputstream?.hasBytesAvailable) != nil) {___NEXT_LINE____                    var len = inputstream?.read(&buffer, maxLength: 4096);___NEXT_LINE____                    if (len > 0) {___NEXT_LINE____                        var output: NSString = NSString(bytes:&buffer, length:len!, encoding:NSASCIIStringEncoding)!;___NEXT_LINE____                        recv(output);___NEXT_LINE____                    }___NEXT_LINE____                }___NEXT_LINE_______NEXT_LINE____            ___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.ErrorOccurred:___NEXT_LINE____            NSLog("ErrorOccurred")___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.EndEncountered:___NEXT_LINE____            NSLog("EndEncountered")___NEXT_LINE____            break___NEXT_LINE____        default:___NEXT_LINE____            NSLog("unknown.")___NEXT_LINE____        }___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    func recv(recv: NSString) {___NEXT_LINE____        print(recv);___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-05-03 16:38:43,2015-05-03 16:55:22,
236,swiftのバージョンを確認,ターミナルで次のコマンドを実行___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -v___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____その後、`:exit`で終了します。,jp,1,2015-05-04 16:38:27,2015-05-04 16:38:27,
237,swiftで画像を表示させる,storyboardでUIImageViewを作成し、ViewControllerにUIImageViewをバインドします。___NEXT_LINE_______NEXT_LINE____png画像をImages.xcassetsに入れます。その後、次のようにpng画像をUIImageViewに代入します。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____myImage.image = UIImage(named: "makefg");___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____例では、myImageはUIImageViewであり、Images.xcassetsにmakefg.pngという画像を代入しました。,jp,1,2015-05-04 18:47:32,2015-05-04 18:47:32,
238,NSIntegerをoutputstreamに書き込む,NSIntegerデータを送り込む___NEXT_LINE____```___NEXT_LINE____var a = NSInteger(23);  // 送りたいデータ"23"___NEXT_LINE____let data = NSData(bytes: &a, length: sizeof(NSInteger));___NEXT_LINE____outputstream?.write(UnsafePointer<UInt8>(data.bytes), maxLength: 3);___NEXT_LINE____```,jp,1,2015-05-05 05:38:12,2015-05-05 05:38:12,
239,swiftのoptionalタイプ,optionalタイプの変数とIf分の組み合わせ___NEXT_LINE_______NEXT_LINE____### パターン１___NEXT_LINE____```___NEXT_LINE____if let actualNumber = possibleNumber.toInt() {___NEXT_LINE____    println("\'\(possibleNumber)\' has an integer value of \(actualNumber)")___NEXT_LINE____} else {___NEXT_LINE____    println("\'\(possibleNumber)\' could not be converted to an integer")___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____### パターン２___NEXT_LINE____```___NEXT_LINE____let actualNumber = possibleNumber.toInt()___NEXT_LINE____if actualNumber {___NEXT_LINE____    println("\'\(possibleNumber)\' has an integer value of \(actualNumber)")___NEXT_LINE____} else {___NEXT_LINE____    println("\'\(possibleNumber)\' could not be converted to an integer")___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-05-06 04:53:29,2015-05-06 05:01:21,
240,swiftのforループ,### パターン１___NEXT_LINE____```___NEXT_LINE____for index in 1...5 {___NEXT_LINE____    println("\(index) times 5 is \(index * 5)")___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____### パターン２___NEXT_LINE____```___NEXT_LINE____let names = ["Anna", "Alex", "Brian", "Jack"]___NEXT_LINE____for name in names {___NEXT_LINE____    println("Hello, \(name)!")___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-05-06 05:23:48,2015-05-06 05:24:25,
241,Intel edisonの各種基本的なコマンド,ターミナルのログイン___NEXT_LINE____```___NEXT_LINE____screen /dev/tty.usbserial-XXXX 115200 -L___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____Wifi設定___NEXT_LINE____```___NEXT_LINE____configure_edison --wifi___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____Wifi環境を確認___NEXT_LINE____```___NEXT_LINE____wpa_cli status___NEXT_LINE____```,jp,1,2015-05-07 16:57:56,2015-05-07 16:57:56,
242,Linux 検索 find,よく忘れる検索___NEXT_LINE_______NEXT_LINE____現ディレクトリ以下でファイル名が.cで終わり、printfが含まれるファイルとその行___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____find . -name '*.c' | xargs grep 'printf'___NEXT_LINE____```,jp,2,2015-05-08 10:24:15,2015-05-08 10:24:15,
243,SwiftでletなClosureで再帰,Swiftでクロージャを再帰させる。___NEXT_LINE_______NEXT_LINE____再帰といったらYコンビネーター___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____func Y<T,U>( f:(T->U)->(T->U) ) -> (T->U){___NEXT_LINE____    return { t in f(Y(f))(t) }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____こうすれば___NEXT_LINE____```___NEXT_LINE____let factorial = Y{___NEXT_LINE____    fact in { n in n == 0 ? 1 : n*fact(n - 1) }___NEXT_LINE____}___NEXT_LINE____println(factorial(3))___NEXT_LINE____```___NEXT_LINE____関数は___NEXT_LINE____```___NEXT_LINE____func factorial(n: Int) -> Int {___NEXT_LINE____    return n == 0 ? 1 : n * factorial(n - 1)___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____これはできない___NEXT_LINE____```___NEXT_LINE____let factorial : Int -> Int = { (n: Int) -> Int in___NEXT_LINE____    return n == 0 ? 1 : n * factorial(n - 1)___NEXT_LINE____}___NEXT_LINE____```,jp,2,2015-05-08 14:35:34,2015-05-08 14:40:49,
244,Swiftのswich case,Swiftのswitch case の使い方___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____var things = [Any]()___NEXT_LINE____things.extend([0,42,-0])___NEXT_LINE____things.extend([0.0, 3.14159, -1e10])___NEXT_LINE____things.append(true)___NEXT_LINE____things.append("hell")___NEXT_LINE____things.append((3.0, 5.0))___NEXT_LINE____things.append(things.append)___NEXT_LINE____things.append(things)___NEXT_LINE_______NEXT_LINE____for (i,thing) in enumerate(things){___NEXT_LINE____    print("[\(i)]:")___NEXT_LINE____    switch thing {___NEXT_LINE____    case 0 as Int:___NEXT_LINE____        println("0:Int")___NEXT_LINE____    case let answer as Int where answer == 42:___NEXT_LINE____        println("meaning of life")___NEXT_LINE____    case is Int:___NEXT_LINE____        println("\(thing):Int")___NEXT_LINE_______NEXT_LINE____    case 0 as Double:___NEXT_LINE____        println("0:Double")___NEXT_LINE____    case let someDouble as Double where someDouble > 0:___NEXT_LINE____        println("+\(someDouble):+Double")___NEXT_LINE____    case is Double:___NEXT_LINE____        println("\(thing):-Double")___NEXT_LINE_______NEXT_LINE____    case let f as String where f.hasPrefix("h"):___NEXT_LINE____        println("hello, world")___NEXT_LINE____    case is String:___NEXT_LINE____        println("\"\(thing)\":String")___NEXT_LINE_______NEXT_LINE____    case let (x, y) as (Double, Double):___NEXT_LINE____        println("(x, y)= (\(x), \(y))")___NEXT_LINE_______NEXT_LINE____    case let f where "(Function)" == reflect(f).summary:___NEXT_LINE____        println("Function is \"\(f.dynamicType)\"")___NEXT_LINE____    case let b as Bool:___NEXT_LINE____        println(b ? "YES":"NO")___NEXT_LINE____    default:___NEXT_LINE____        dump(thing, name: "Something else", indent: 0, maxDepth: Int.max, maxItems: Int.max)___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____```,jp,2,2015-05-09 00:46:41,2015-05-09 00:46:41,
245,std::threadを使いつつ調和数を求める,調和数というのは  ___NEXT_LINE____[調和数 | Wikipedia](http://ja.wikipedia.org/wiki/%E8%AA%BF%E5%92%8C%E6%95%B0)  ___NEXT_LINE____を見ていただくとして、コードはこんな感じ。アルゴリズムを見なおさないと117800まで求めるのに76秒くらいかかる。PGOビルドしても71秒。___NEXT_LINE_______NEXT_LINE____ちなみPGOビルドについては  ___NEXT_LINE____[フリーソフトの旅（windows）　無意味だとしても私はPGOビルドをする](http://freesofutotravel.blog94.fc2.com/blog-entry-20.html)  ___NEXT_LINE____を参照___NEXT_LINE_______NEXT_LINE____検索対象の最大値は変数``search_max_temp``またはコマンドライン引数に指定した数により規定されます。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <iostream>___NEXT_LINE____#include <vector>___NEXT_LINE____#include <thread>___NEXT_LINE____#include <bitset>___NEXT_LINE____#include <ctime>___NEXT_LINE____#include <cstdint>___NEXT_LINE____#include <cstdlib>___NEXT_LINE____#include <cerrno>___NEXT_LINE____typedef uint64_t num_store_t;___NEXT_LINE____typedef std::vector<num_store_t> num_vector;___NEXT_LINE____constexpr std::size_t thread_num = 4;//スレッド数、コンパイル時定数である必要があるのでconstexprに___NEXT_LINE____constexpr num_store_t search_max_temp = 117800;//検索対象の最大値(仮)___NEXT_LINE____class counter_iterator {___NEXT_LINE____ std::size_t i;___NEXT_LINE____public:___NEXT_LINE____   counter_iterator() : i(0) { }___NEXT_LINE____   counter_iterator(std::size_t n) : i(n) { }___NEXT_LINE____  bool operator == (const counter_iterator & rhs) const { return i == rhs.i; }___NEXT_LINE____    bool operator != (const counter_iterator & rhs) const { return i != rhs.i; }___NEXT_LINE____    std::size_t & operator * () { return i; }___NEXT_LINE____   counter_iterator & operator ++ () { ++i; return *this; }___NEXT_LINE____};___NEXT_LINE____class nth_loop {___NEXT_LINE____private:___NEXT_LINE____  std::size_t i;___NEXT_LINE____public:___NEXT_LINE____   nth_loop(std::size_t n) : i(n) { }___NEXT_LINE____  counter_iterator begin() const { return counter_iterator(); }___NEXT_LINE____   counter_iterator end() const { return counter_iterator(i); }___NEXT_LINE____};___NEXT_LINE____nth_loop rep(std::size_t n){ return nth_loop(n); }___NEXT_LINE____nth_loop operator "" _(unsigned long long n) { return nth_loop(static_cast<size_t>(n)); }___NEXT_LINE____// 最大公約数を求める関数___NEXT_LINE____static inline num_store_t gcd(num_store_t x, num_store_t y){___NEXT_LINE____ decltype(x) r;___NEXT_LINE____  // ユーグリッドの互除法___NEXT_LINE____   while (0 != (r = x % y)){ // yで割り切れるまでループ___NEXT_LINE____       x = y;___NEXT_LINE____      y = r;___NEXT_LINE____  }___NEXT_LINE____   return y;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____//　最小公倍数を求める関数___NEXT_LINE____static inline num_store_t lcm(num_store_t x, num_store_t y){___NEXT_LINE____    return x / gcd(x, y) * y;___NEXT_LINE____}___NEXT_LINE____inline num_store_t lcm_n(num_vector& numbers) {___NEXT_LINE____   auto l = numbers.at(0);___NEXT_LINE____ for (size_t i = 1; i < numbers.size(); i++) {___NEXT_LINE____       l = lcm(l, numbers.at(i));___NEXT_LINE____  }___NEXT_LINE____   return l;___NEXT_LINE____}___NEXT_LINE____static inline void get_divisor(num_vector& num, const num_store_t target_num) {___NEXT_LINE____   if (0 != target_num) {___NEXT_LINE____      num_store_t i;___NEXT_LINE____      constexpr auto limit = std::numeric_limits<num_store_t>::max();___NEXT_LINE____     for (i = 1; i < limit && i < target_num; i++) {___NEXT_LINE____         if (0 == target_num % i) {___NEXT_LINE____              num.push_back(i);___NEXT_LINE____           }___NEXT_LINE____       }___NEXT_LINE____       if (target_num == i && (num.empty() || num.back() != target_num)) num.push_back(target_num);//その数自身も約数___NEXT_LINE____  }___NEXT_LINE____}___NEXT_LINE____void Is_Harmonic_divisor_number(std::bitset<thread_num>& isHDMs, size_t thread_id, const num_store_t target_num) {___NEXT_LINE____    num_vector divisor;___NEXT_LINE____ get_divisor(divisor, target_num);___NEXT_LINE____   if (!divisor.empty()) {___NEXT_LINE____     const auto divisor_lcm = lcm_n(divisor);___NEXT_LINE____        num_store_t denominator = 0;___NEXT_LINE____        for (auto i : divisor) {___NEXT_LINE____            denominator += divisor_lcm / i;___NEXT_LINE____     }___NEXT_LINE____       if (0 == (divisor.size() * divisor_lcm % denominator)) isHDMs.set(thread_id);___NEXT_LINE____   }___NEXT_LINE____}___NEXT_LINE____void print_result(num_vector& Harmonic_divisor_num, const clock_t process_time) {___NEXT_LINE____ for (auto n : Harmonic_divisor_num) {___NEXT_LINE____       std::cout << n << ((Harmonic_divisor_num.back() == n) ? "" : ", ");//結果表示___NEXT_LINE____   }___NEXT_LINE____   std::cout << std::endl;___NEXT_LINE____ constexpr double cps = CLOCKS_PER_SEC;___NEXT_LINE____  std::cout << "処理時間:" << process_time << " (" << process_time / cps << " sec. )" << std::endl;___NEXT_LINE____}___NEXT_LINE____int main(int argc, char* argv[]) {___NEXT_LINE____    if (argc < 1 || 2 < argc) return -1;___NEXT_LINE____    //検索対象の最大値___NEXT_LINE____  const auto search_max = (1 == argc) ? search_max_temp : [](const char* str) -> decltype(search_max_temp) {___NEXT_LINE____      errno = 0;___NEXT_LINE____      const auto tmp = strtoull(str, nullptr, 10);//引数があればそれを採用する___NEXT_LINE____     return (0 == errno) ? tmp : search_max_temp;//引数が異常な時は(仮)の値を使用___NEXT_LINE____  }(argv[1]);___NEXT_LINE_______NEXT_LINE____ try {___NEXT_LINE____       num_vector Harmonic_divisor_num;___NEXT_LINE____        std::bitset<thread_num>isHDMs(0ul);//各スレッドに渡す。調和数が各スレッドで見つかればビットが立つ___NEXT_LINE____     num_store_t n;___NEXT_LINE____      const auto begin_process = clock();___NEXT_LINE____     const auto quotient = search_max / thread_num;___NEXT_LINE____      const auto surplus = search_max % thread_num;___NEXT_LINE____       for (n = 0; n <= quotient; n++) {___NEXT_LINE____           const decltype(n) i = n * thread_num;___NEXT_LINE____           isHDMs.reset();___NEXT_LINE____         if (i < 900) {___NEXT_LINE____              for(auto j : rep(thread_num)) Is_Harmonic_divisor_number(isHDMs, j, i + j);//小さいうちは直接計算するほうが早い___NEXT_LINE____          }___NEXT_LINE____           else {___NEXT_LINE____              std::vector<std::thread> th;___NEXT_LINE____                th.reserve(thread_num);___NEXT_LINE____             for (auto j : rep(thread_num)) th.emplace_back(Is_Harmonic_divisor_number, std::ref(isHDMs), j, i + j);//スレッド開始___NEXT_LINE____             for (auto& t : th) t.join();//スレッド終了待ち___NEXT_LINE____          }___NEXT_LINE____           if (isHDMs.any()) {___NEXT_LINE____             for (auto j : rep(thread_num)) {___NEXT_LINE____                    if (isHDMs.test(j)) Harmonic_divisor_num.push_back(i + j);//調和数を追加___NEXT_LINE____              }___NEXT_LINE____           }___NEXT_LINE____           if (std::numeric_limits<decltype(n)>::max() - thread_num < i) break;___NEXT_LINE____        }___NEXT_LINE____       for (decltype(n) i = quotient * thread_num; i <= search_max; i++) {___NEXT_LINE____         isHDMs.reset();___NEXT_LINE____         Is_Harmonic_divisor_number(isHDMs, 0, i);___NEXT_LINE____           if (isHDMs.any()) {//1つでもbitが立っていれば調和数___NEXT_LINE____              Harmonic_divisor_num.push_back(i);___NEXT_LINE____          }___NEXT_LINE____       }___NEXT_LINE____       const auto process_time = clock() - begin_process;___NEXT_LINE____      print_result(Harmonic_divisor_num, process_time);___NEXT_LINE____   }___NEXT_LINE____   catch (std::exception& er) {___NEXT_LINE____        std::cerr << er.what() << std::endl;___NEXT_LINE____    }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____固定回ループとかstd::bitsetとかつかうと見た目がスッキリするね。,jp,7,2015-05-09 02:26:48,2015-05-10 18:01:57,
247,explicitについて,よくわからなかったから調べてみた___NEXT_LINE____explicitとは直訳すると「明白な，はっきりした，明示的な 」という意味です。explicitは引数を一個しか持たないコンストラクタの暗黙の変換を禁止します。___NEXT_LINE_______NEXT_LINE____* コピーコンストラクタは(もし使う場合は)explicitにしない(当たり前?)___NEXT_LINE_______NEXT_LINE____* 1引数コンストラクタはexplicitにする___NEXT_LINE_______NEXT_LINE____以下実例___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class Hoge{___NEXT_LINE____ int hoge;___NEXT_LINE____public:___NEXT_LINE____    Hoge(int hoge){ this->hoge = hoge; }___NEXT_LINE____    int getHoge(void){ return hoge; }___NEXT_LINE____};___NEXT_LINE____int main(){___NEXT_LINE____  Hoge hoge = 10;___NEXT_LINE____ int test = hoge.getHoge();___NEXT_LINE____  cout << "test=" << test << endl;___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____↑これは成功する___NEXT_LINE____↓コンパイルエラーになる___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class Hoge{___NEXT_LINE____   int hoge;___NEXT_LINE____public:___NEXT_LINE____    explicit Hoge(int hoge){ this->hoge = hoge; }___NEXT_LINE____   int getHoge(void){ return hoge; }___NEXT_LINE____};___NEXT_LINE____int main(){___NEXT_LINE____  Hoge hoge = 10;//コンパイルエラー___NEXT_LINE____   Hoge hoge2(20);___NEXT_LINE____ int test = hoge2.getHoge();___NEXT_LINE____ cout << "test=" << test << endl;___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-10 09:18:22,2015-05-11 14:11:28,
248,コピーコンストラクタ,遠い昔（半年前くらい）に勉強したきり手付かずで忘れてしまってたので再度復習___NEXT_LINE_______NEXT_LINE____オブジェクトを関数に渡したり、関数からオブジェクトを返す際に生じる問題をさける方法の一つがコピーコンストラクタです。___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<cstdlib>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class array{___NEXT_LINE____    int *p;___NEXT_LINE____ int size;___NEXT_LINE____public:___NEXT_LINE____    //通常のコンストラクタ___NEXT_LINE____    array(int sz){___NEXT_LINE____      p = new int[sz];___NEXT_LINE____        if (!p)exit(1);___NEXT_LINE____     size = sz;___NEXT_LINE____      cout << "「通常」のコンストラクタを使う" << endl;___NEXT_LINE____  }___NEXT_LINE____   //コピーコンストラクタ___NEXT_LINE____    array(const array &a);___NEXT_LINE____  //メンバ関数___NEXT_LINE____ void put(int i, int j){___NEXT_LINE____     if (i >= 0 && i < size)___NEXT_LINE____         p[i] = j;___NEXT_LINE____   }___NEXT_LINE____   int get(int i){___NEXT_LINE____     return p[i];___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE____//コピーコンストラクタ___NEXT_LINE____array::array(const array &a){___NEXT_LINE____    int i;___NEXT_LINE____  size = a.size;___NEXT_LINE____  p = new int[a.size];___NEXT_LINE____    if (!p)exit(1);___NEXT_LINE____ for (i = 0; i < a.size; i++)p[i] = a.p[i];___NEXT_LINE____  cout << "コピーコンストラクタを使う" << endl;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____    array num(10);___NEXT_LINE____  int i;___NEXT_LINE____  //配列に値を格納する___NEXT_LINE____ for (i = 0; i < 10; i++)___NEXT_LINE____        num.put(i, i);___NEXT_LINE____  //numの内容を表示する___NEXT_LINE____   for (i = 9; i >= 0; i--)cout << num.get(i);___NEXT_LINE____ cout << endl;___NEXT_LINE____   //ほかの配列を作成し、numを使用して初期化する___NEXT_LINE____   array x = num;___NEXT_LINE____  //xを表示___NEXT_LINE____  for (i = 0; i < 10; i++)___NEXT_LINE____        cout << x.get(i);___NEXT_LINE_______NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-10 11:15:22,2015-05-10 11:16:38,
249,ムーブコンストラクタ,とりあえずソースコード(いつもの丸ぱく）___NEXT_LINE____ざっくり書くので詳しいことは下のリンク___NEXT_LINE_______NEXT_LINE____正直私はきちんと理解してないです　精進します___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE____struct Array{___NEXT_LINE____  typedef int ValueType;___NEXT_LINE____  ValueType* p;___NEXT_LINE____   int length;___NEXT_LINE____ //コンストラクタ___NEXT_LINE____   Array(int _length)___NEXT_LINE____      : p(new ValueType[_length])___NEXT_LINE____     , length(_length){___NEXT_LINE____      memset(p, 0, sizeof(ValueType)*length);___NEXT_LINE____     p[0] = 123;___NEXT_LINE____     cout << "constructor(" << this << ")" << endl;___NEXT_LINE____  }___NEXT_LINE____   //コピーコンストラクタ___NEXT_LINE____    Array(const Array & o)___NEXT_LINE____      :p(new ValueType[o.length])___NEXT_LINE____     , length(o.length){___NEXT_LINE____     memcpy(p, o.p, sizeof(ValueType)*length);___NEXT_LINE____       cout << "copy constructor(" << this << ")<-" << &o << endl;___NEXT_LINE____ }___NEXT_LINE____   //ムーブコンストラクタ___NEXT_LINE____    Array(Array && o)___NEXT_LINE____       :p(o.p)___NEXT_LINE____     , length(o.length){___NEXT_LINE____     o.p = nullptr;___NEXT_LINE____      o.length = 0;___NEXT_LINE____       cout << "move constructor(" << this << ")<-" << &o << endl;___NEXT_LINE____ }___NEXT_LINE____   //デストラクタ___NEXT_LINE____    ~Array(){___NEXT_LINE____       if (p != nullptr){___NEXT_LINE____          delete p, p = nullptr;___NEXT_LINE____          length = 0;___NEXT_LINE____     }___NEXT_LINE____       cout << "destructor(" << this << ")" << endl;___NEXT_LINE____   }___NEXT_LINE____   //代入演算子（コピー）___NEXT_LINE____    Array & operator=(Array & o){___NEXT_LINE____       length = o.length;___NEXT_LINE____      memcpy(p, o.p, sizeof(ValueType)*length);___NEXT_LINE____       cout << "copy(" << this << ")<-" << &o << endl;___NEXT_LINE____     return (*this);___NEXT_LINE____ }___NEXT_LINE____   //代入演算子（ムーブ）___NEXT_LINE____    Array & operator=(Array && o){___NEXT_LINE____      if (this != &o){___NEXT_LINE____            p = o.p;___NEXT_LINE____            length = o.length;___NEXT_LINE____          ___NEXT_LINE____            o.p = nullptr;___NEXT_LINE____          o.length = 0;___NEXT_LINE_______NEXT_LINE____           cout << "move(" << this << ")" << "<-" << &o << endl;___NEXT_LINE____       }___NEXT_LINE____       return (*this);___NEXT_LINE____ }___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____Array Func(Array array){___NEXT_LINE____ return array;___NEXT_LINE____}___NEXT_LINE____int main(){___NEXT_LINE____   Array array(32);___NEXT_LINE____    array = Func(move(array));___NEXT_LINE____  return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____ムーブコンストラクタとは何か？→ 渡されたオブジェクトの所有権を新しいオブジェクトに移動させるためのもの___NEXT_LINE_______NEXT_LINE____「コピーコンストラクタ」は渡されたオブジェクトのコピーを作成しますが、___NEXT_LINE____「ムーブコンストラクタ」は上のコードのように新しいオブジェクトに情報を移して、古いオブジェクトはクリアします。___NEXT_LINE_______NEXT_LINE____「オブジェクトの不要なコピーを抑えて、なるべく所有権(ポインタ)の移動だけで済ませよう」という試みが 「ムーブセマンティクス」 。___NEXT_LINE_______NEXT_LINE____ムーブコンストラクタの引数に「&&」を取るような形で書かれていますが、この「&&」が「右辺値参照」であることを示しています。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____参考サイト：___NEXT_LINE_______NEXT_LINE____http://qiita.com/go_astrayer/items/5d85565e992487daa618,jp,21,2015-05-10 14:32:18,2015-05-10 14:32:18,
251,参照　～基本中の基本１～,参照とは「全ての面での変数の別名として動作する暗黙的なポインタ」のことです。___NEXT_LINE_______NEXT_LINE____参照の用途は3通り___NEXT_LINE_______NEXT_LINE____1.参照を関数に渡すことができる___NEXT_LINE_______NEXT_LINE____2.関数から参照を返すことができる___NEXT_LINE_______NEXT_LINE____3.独立した参照を作成することができる___NEXT_LINE_______NEXT_LINE____参照の最も重要な用途は、関数への仮引数として使うことです。参照仮引数を使用する場合、コンパイラは、引数として使われた変数のアドレスを自動的に渡します。関数内では、コンパイラは参照仮引数が指す変数を自動的に使用します。___NEXT_LINE_______NEXT_LINE____ただし、参照が指すものを変更することはできません。例えば、f(int &n)内で n++;とかはできません。なぜなら、この文ではnをインクリメントするのではなく、参照されている変数（この場合はi）をインクリメントしていることになります。___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE____void f(int &n);//参照仮引数を宣言する___NEXT_LINE____int main(){___NEXT_LINE____   int i = 0;___NEXT_LINE____  cout << "最初の値:" << i << endl;___NEXT_LINE____   f(i);___NEXT_LINE____   cout << "新しい値:" << i << endl;___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____void f(int &n){___NEXT_LINE____   //次の文は*が必要ない___NEXT_LINE____    n = 20;//f()関数を呼び出すのに使用した引数に20を格納する___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-10 15:40:03,2015-05-10 15:44:40,
252,range-base forで固定回ループをする,[range-based forで固定回ループ | 本の虫](http://cpplover.blogspot.jp/2015/02/range-based-for.html)  ___NEXT_LINE____より結論だけ抜き出す。___NEXT_LINE____```___NEXT_LINE____#include <cstddef>//std::size_t型___NEXT_LINE____#include <iostream>//main関数でテスト用に使用___NEXT_LINE____class counter_iterator{___NEXT_LINE____ std::size_t i;___NEXT_LINE____public:___NEXT_LINE____   counter_iterator() : i(0) { }___NEXT_LINE____   counter_iterator(std::size_t n) : i(n) { }___NEXT_LINE____  bool operator == (const counter_iterator & rhs) const{ return i == rhs.i; }___NEXT_LINE____ bool operator != (const counter_iterator & rhs) const{ return i != rhs.i; }___NEXT_LINE____ std::size_t & operator * (){ return i; }___NEXT_LINE____    counter_iterator & operator ++ (){ ++i; return *this; }___NEXT_LINE____};___NEXT_LINE____class nth_loop{___NEXT_LINE____private:___NEXT_LINE____    std::size_t i;___NEXT_LINE____public:___NEXT_LINE____   nth_loop(std::size_t n) : i(n) { }___NEXT_LINE____  counter_iterator begin() const{ return counter_iterator(); }___NEXT_LINE____    counter_iterator end() const{ return counter_iterator(i); }___NEXT_LINE____};___NEXT_LINE____nth_loop operator "" _(unsigned long long n){ return nth_loop(static_cast<size_t>(n)); }___NEXT_LINE____int main(){___NEXT_LINE____    for (auto i : 10_){___NEXT_LINE____     std::cout << i << std::endl;___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____これはユーザー定義整数リテラルを利用している。ユーザー定義整数リテラルは``unsigned long long``しかないので残念ながら``std::size_t``などはない。ゆえにstatic_castを余儀なくされる。,jp,7,2015-05-10 16:36:42,2015-05-10 16:36:42,
253,gitの基本のキ,そもそもgitとは、分散型バージョン管理システムの一つで、元々Linuxのソースコードを管理するために開発されました。___NEXT_LINE_______NEXT_LINE____gitでは、ファイルの状態を好きなところに更新履歴として保存しておくことができます。そのため、一度編集したファイルを過去の状態に戻したり、編集箇所の差分を表示したりすることができます。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____1.レポジトリとは：レポジトリとはファイルやディレクトリの状態を記憶する場所です。保存された状態は、内容の変更履歴として格納されます。___NEXT_LINE_______NEXT_LINE____2.レポジトリとフォルダの違い：レポジトリにはファイルやフォルダ（Linux上ではディレクトリ）の内容や差分全てが保存されています。フォルダはレポジトリの中の階層のことを表しています。例えば、本屋で例えると店全体がレポジトリ、漫画コーナーや女性誌コーナーがフォルダといった関係___NEXT_LINE_______NEXT_LINE____3.cloneとpushとpullの違い:一言で言うと「clone→レポジトリの複製」、「push→ローカルレポジトリをアップロード」、「pull→リモートレポジトリをダウンロード」___NEXT_LINE_______NEXT_LINE____「レポジトリをcloneする」とは文字通りレポジトリを複製します。クローンを実行すると、リモートレポジトリの内容をまるまるダウンロードしてきて、別のローカルレポジトリとして作成できます。一方「レポジトリをpushする」とは、ローカルレポジトリの変更履歴をリモートレポジトリに自分の変更履歴がアップロードされ、リモートレポジトリ内の変更履歴がローカルレポジトリの変更履歴と同じ状態になります。また「レポジトリをpullする」とはリモートレポジトリからローカルレポジトリを更新することです。,jp,21,2015-05-11 03:34:55,2015-05-11 12:01:20,
255,Knockout.jsのcheckbox,Knockout.jsのcheckbox___NEXT_LINE____```___NEXT_LINE____<input type="checkbox" data-bind="checked: ko.pureComputed({read: function() { return myval == 'yes' }, write: function(value) { return myval = value ? 'yes' : 'no' } })">___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____checkedはbooleanですが、もしmyvalはbooleanではない場合はko.pureComputedという方法で行います。___NEXT_LINE_______NEXT_LINE____例では、myvalはString型で"yes"と"no"で処理されます。,jp,1,2015-05-11 11:19:24,2015-05-11 11:20:32,
256,参照～基本中の基本２～,次はオブジェクト参照の引き渡しについて書きます。___NEXT_LINE_______NEXT_LINE____f()関数で参照仮引数を使用するようにすると、f()関数内でデストラクタが呼ばれることはありません。___NEXT_LINE_______NEXT_LINE____この場合の注意点___NEXT_LINE_______NEXT_LINE____* 参照はポインタではないのことに注意。メンバアクセス関数はアロー（->）ではなくどっと(.)を使用___NEXT_LINE_______NEXT_LINE____* 関数内でオブジェクトに加えた変更が、引数として使用したオブジェクトにも影響する___NEXT_LINE____ ___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class myclass{___NEXT_LINE____   int who;___NEXT_LINE____public:___NEXT_LINE____ myclass(int n){___NEXT_LINE____     who = n;___NEXT_LINE____        cout << "コンストラクタ呼び出し" << who << endl;___NEXT_LINE____   }___NEXT_LINE____   ~myclass(){ cout << "デストラクタ呼び出し" << who << endl; }___NEXT_LINE____  int id(){ return who; }___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____void f(myclass &o){___NEXT_LINE____    cout << "受け取り" << o.id() << endl;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   myclass x(1);___NEXT_LINE____   f(x);___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-11 12:23:55,2015-05-11 12:23:55,
257,２項演算子、単項演算子のオーバーロード,俺・・・CodeGarageをC++の記事で埋めるんだ・・・・___NEXT_LINE_______NEXT_LINE____どうも単項演算子はfriend関数を使えばn++と++nを明確に区別できるみたいですね　___NEXT_LINE_______NEXT_LINE____２項演算子___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class coord{___NEXT_LINE____   int x, y;//座標値___NEXT_LINE____public:___NEXT_LINE____   coord(){ x = 0; y = 0; }___NEXT_LINE____    coord(int i, int j){ x = i; y = j; }___NEXT_LINE____    void get_xy(int &i, int &j){ i = x; j = y; }___NEXT_LINE____    coord operator+(coord ob2);___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____//+をcoordクラスに対してオーバーロードする___NEXT_LINE____coord coord::operator+(coord ob2){___NEXT_LINE____    coord temp;___NEXT_LINE____ temp.x = x + ob2.x;___NEXT_LINE____ temp.y = y + ob2.y;___NEXT_LINE____ return temp;___NEXT_LINE____}___NEXT_LINE____int main(){___NEXT_LINE____    coord o1(10, 10), o2(5, 3), o3;___NEXT_LINE____ int x, y;___NEXT_LINE____   o3 = o1 + o2;___NEXT_LINE____   o3.get_xy(x, y);___NEXT_LINE____    cout << "(o1+o2) X:" << x << ", Y:" << y << endl;___NEXT_LINE_______NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____単項演算子___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class coord{___NEXT_LINE____ int x, y;//座標値___NEXT_LINE____public:___NEXT_LINE____   coord(){ x = 0; y = 0; }___NEXT_LINE____    coord(int i, int j){ x = i; y = j; }___NEXT_LINE____    void get_xy(int &i, int &j){ i = x; j = y; }___NEXT_LINE____    coord operator++();___NEXT_LINE____};___NEXT_LINE____coord coord::operator++(){___NEXT_LINE____ x++;___NEXT_LINE____    y++;___NEXT_LINE____    return *this;___NEXT_LINE____}___NEXT_LINE____int main(){___NEXT_LINE____   coord o1(10, 10);___NEXT_LINE____   int x, y;___NEXT_LINE____   o1++;___NEXT_LINE____   o1.get_xy(x, y);___NEXT_LINE____    cout << "(o1++) X" << x << ", Y:" << y << endl;___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-11 12:55:05,2015-05-11 13:54:18,
258,フレンド関数,今はわからないことばかりだけど～♫信じるこの道進むだけさ～♫___NEXT_LINE_______NEXT_LINE____わからないこと多すぎますね___NEXT_LINE_______NEXT_LINE____関数をあるクラスのメンバにすることなく、関数からそのクラスの非公開メンバにアクセスさせたい時、フレンド関数を使います。___NEXT_LINE_______NEXT_LINE____フレンド関数が役に立つ理由は、演算子のオーバーロードと、ある種の入出力間数の作成に関係するものの２種類らしいです。また、１つの関数から２つ以上の別々のクラスの非公開メンバにアクセスする場合が挙げられます。___NEXT_LINE_______NEXT_LINE____忘れてはいけないのが、friend関数はクラスのメンバではないということです。また、基本クラスにフレンド関数が含まれていても、その関数は派生クラスのフレンド関数にはなれません。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class truck;//前方宣言___NEXT_LINE____class car{___NEXT_LINE____    int passengers;___NEXT_LINE____ int speed;___NEXT_LINE____public:___NEXT_LINE____   car(int p, int s){ passengers = p; speed = s; }___NEXT_LINE____ friend int sp_greater(car c, truck t);___NEXT_LINE____};___NEXT_LINE____class truck{___NEXT_LINE____    int weight;___NEXT_LINE____ int speed;___NEXT_LINE____public:___NEXT_LINE____   truck(int w, int s){ weight = w; speed = s; }___NEXT_LINE____   friend int sp_greater(car c, truck t);___NEXT_LINE____};___NEXT_LINE____/*___NEXT_LINE____carの速度がtruckより速い場合は正の値を返す___NEXT_LINE____同じなら０___NEXT_LINE____遅い場合は負の値を返す___NEXT_LINE____*/___NEXT_LINE____int sp_greater(car c, truck t){___NEXT_LINE____    return c.speed - t.speed;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   int sp;___NEXT_LINE____ car c(6, 55);___NEXT_LINE____   truck t(1000, 44);___NEXT_LINE_______NEXT_LINE____  cout << "車とトラックを比較"<<endl;___NEXT_LINE____  sp = sp_greater(c, t);___NEXT_LINE____  if (sp > 0)cout << "車が速い" << endl;___NEXT_LINE____  else if (sp == 0)cout << "同じ速さ" << endl;___NEXT_LINE____    else cout << "トラックが速い" << endl;___NEXT_LINE_______NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-11 13:27:21,2015-05-11 13:43:07,
259,演算子のオーバーロードとフレンド関数,かなり融通が利きますね　これは便利だ___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____class coord{___NEXT_LINE____  int x, y;___NEXT_LINE____public:___NEXT_LINE____    coord(){ x = 0; y = 0; }___NEXT_LINE____    coord(int i, int j){ x = i; y = j; }___NEXT_LINE____    void get_xy(int &i, int &j){ i = x; j = y; }___NEXT_LINE____    friend coord operator+(coord ob1, int i);___NEXT_LINE____   friend coord operator+(int i, coord ob1);___NEXT_LINE____};___NEXT_LINE____//ob+intのオーバーロード___NEXT_LINE____coord operator+(coord ob1, int i){___NEXT_LINE____   coord temp;___NEXT_LINE____ temp.x = ob1.x + i;___NEXT_LINE____ temp.y = ob1.y + i;___NEXT_LINE____ return temp;___NEXT_LINE____}___NEXT_LINE____//int+obのオーバーロード___NEXT_LINE____coord operator+(int i, coord ob1){___NEXT_LINE____ coord temp;___NEXT_LINE____ temp.x = ob1.x + i;___NEXT_LINE____ temp.y = ob1.y + i;___NEXT_LINE____ return temp;___NEXT_LINE____}___NEXT_LINE____int main(){___NEXT_LINE____    coord o1(10, 10);___NEXT_LINE____   int x, y;___NEXT_LINE____   o1 = o1 + 10;//オブジェクト＋整数___NEXT_LINE____    o1.get_xy(x, y);___NEXT_LINE____    cout << "(o1+10) X:" << x << ", Y:" << y << endl;___NEXT_LINE____   o1 = 99 + o1;//整数＋オブジェクト___NEXT_LINE____    o1.get_xy(x, y);___NEXT_LINE____    cout << "(o1+99) X:" << x << ", Y:" << y << endl;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-11 13:53:33,2015-05-11 14:04:57,
260,スマートポインタ～考察～,C++では、メモリの動的確保にnewやdeleteを用いる。しかし、newによって確保したメモリをうっかりdeleteし忘れると、確保したメモリを解放し忘れる「メモリリーク」が起きる___NEXT_LINE_______NEXT_LINE____また、newしていないポインタに対するdeleteや、すでに解放したメモリを更にdeleteしようとする操作は未定義である。___NEXT_LINE_______NEXT_LINE____このようなメモリ解放忘れや、不適切な対象へのdeleteの実行をなくすために考え出されたクラスが「スマートポインタ」である。___NEXT_LINE_______NEXT_LINE____**スマートポインタの仕組み**___NEXT_LINE_______NEXT_LINE____スマートポインタには、一般にメモリの所有権という考え方がある。これは「そのメモリにアクセスする権利と、解放する義務」のことである。確保したメモリをスマートポインタに渡すと、スマートポインタはそのメモリに対する所有権を得る。所有権を保持している間は、そのスマートポインタを介してメモリにアクセス可能であり、解放されることはない。所有権を持つスマートポインタが全て破棄されっれば、そのメモリは誰からも使用されていないことが保証され、デストラクタを用いて所有権を持つメモリが不要となる瞬間を判断し、解放を自動的に行う。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____参考資料：「C++11スマートポインタ入門」___NEXT_LINE____http://qiita.com/hmito/items/db3b14917120b285112f,jp,21,2015-05-11 14:23:51,2015-05-11 14:35:07,
262,Xcodeのライブラリー管理ツール - pods,インストールとセットアップ___NEXT_LINE____```___NEXT_LINE____gem install cocoapods___NEXT_LINE____pod setup___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____その後、レポジトリに移動してpodsツールを始めます。___NEXT_LINE____```___NEXT_LINE____pod init    # podsの初期化し、Podfileが生成されます___NEXT_LINE____pod install # ライブラリーをインストール___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____最後に、Xcodeを開きビルドすればオーケーです。,jp,1,2015-05-11 18:07:20,2015-05-11 18:07:20,
263,gitの注意点git://とhttp(s)://,git cloneする際は___NEXT_LINE____```___NEXT_LINE____if [ ! -d .git ]; then___NEXT_LINE____    git clone -v --progress --config core.autocrlf=false http://git.opus-codec.org/opus.git ./___NEXT_LINE____   ___NEXT_LINE____fi___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____とすることが多いと思うが、``git://``は失敗することが多い。___NEXT_LINE_______NEXT_LINE____残念ながらgitはgit://で失敗した時にhttpでretryしてくれないので自分でこのようにスクリプトを書く必要がある。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____if [ ! -d .git ]; then___NEXT_LINE____    git clone -v --progress --config core.autocrlf=false git://git.opus-codec.org/opus.git ./___NEXT_LINE____ if [ "$?" != "0" ]; then___NEXT_LINE____      git clone -v --progress --config core.autocrlf=false http://git.opus-codec.org/opus.git ./___NEXT_LINE____    fi___NEXT_LINE____  ___NEXT_LINE____fi___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____ただし、リポジトリにhttpアクセスが出来るかはリポジトリ次第である。バイナリ安全のためにもgit://ないしhttps://が望ましい。___NEXT_LINE_______NEXT_LINE____参考  ___NEXT_LINE____[MaverickTse/lsw-build2/bld_opus.sh(対策後)](https://github.com/MaverickTse/lsw-build2/blob/ProtocolFallback/bld_opus.sh)  ___NEXT_LINE____[MaverickTse/lsw-build2/bld_opus.sh(対策前)](https://github.com/MaverickTse/lsw-build2/blob/master/bld_opus.sh),jp,7,2015-05-11 21:16:11,2015-05-11 21:16:46,
264,右辺値参照,ｇｇりながら書いた記事なので間違えがあったらごめんなさい___NEXT_LINE_______NEXT_LINE____C+＋では、型名に&を付けることでオブジェクトのアドレスを受け取り、値の参照を行うことができる___NEXT_LINE____```___NEXT_LINE____int &ref=n; //int* ref = &n;を行ってるイメージ___NEXT_LINE____```___NEXT_LINE____具体的には前書いた記事「参照の基本」を読んでね___NEXT_LINE_______NEXT_LINE____http://codegarage.edisonthk.com/_p/snippet/251___NEXT_LINE_______NEXT_LINE____http://codegarage.edisonthk.com/_p/snippet/256___NEXT_LINE_______NEXT_LINE____ここで重要なのは、参照渡しは値のコピーを行わない事です。関数の引数を参照で受け取るのは、無駄なコピーを行わない為です。___NEXT_LINE_______NEXT_LINE____しかし、参照渡しは一時的なオブジェクトを受け取ることはできません。___NEXT_LINE____```___NEXT_LINE____int& n = 10;//エラーが起きた___NEXT_LINE_______NEXT_LINE____void hoge(std::string &str){//なんか処理}___NEXT_LINE____hoge(std::string("hogehoge"));//関数に渡すこともできない___NEXT_LINE____```___NEXT_LINE____ここで型名に&&を付けることで、右辺値参照でオブジェクトを受け取ることができます。これで無駄なコピーも行われず、値を受け取ることができます。___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<string>___NEXT_LINE____using namespace std;___NEXT_LINE____void hoge(string&& str){___NEXT_LINE____   cout << "str=" << str << endl;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____  int&& n = 10;___NEXT_LINE____   cout << "n=" << n << endl;___NEXT_LINE____  hoge("hogehoge");___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-12 01:44:49,2015-05-12 02:15:52,
265,ファイル操作,visual studioでファイル操作をする場合、fopenとかだとエラーになります。アンダーバーsが必要ですね___NEXT_LINE_______NEXT_LINE____久々にファイル操作したからすっかり忘れてた　メモメモ___NEXT_LINE_______NEXT_LINE____file.txtの数値(n行２列)を表示するというありきたりなプログラム___NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____#include<stdlib.h>___NEXT_LINE____int main(){___NEXT_LINE____ FILE* fp;___NEXT_LINE____   double x, y;___NEXT_LINE____    errno_t error;___NEXT_LINE____  if (error = fopen_s(&fp, "file.txt", "r") != 0){___NEXT_LINE____        exit(1);___NEXT_LINE____    }___NEXT_LINE____   int i = 1;___NEXT_LINE____  while (fscanf_s(fp, "%lf,%lf", &x, &y) != EOF){___NEXT_LINE____     printf("%d列目：%.1lf,%.1lf\n",i,x,y);___NEXT_LINE____     i++;___NEXT_LINE____    }___NEXT_LINE____   fclose(fp);___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-12 02:42:44,2015-05-12 02:57:12,
266,cloneとpullの違い　レポジトリとフォルダの違い,・cloneとは<br>___NEXT_LINE____リモートリポジトリをダウンロードすること___NEXT_LINE_______NEXT_LINE____・pullとは<br>___NEXT_LINE____コミットをダウンロードすること___NEXT_LINE_______NEXT_LINE____・レポジトリとは<br>___NEXT_LINE____なんらかの情報やプログラムが体系的に保管されているもの___NEXT_LINE_______NEXT_LINE____・フォルダとは<br>___NEXT_LINE____情報の保管場所,jp,19,2015-05-12 11:10:20,2015-05-14 12:36:55,
267,Swiftオペレーター,Swiftで「オペレーターの定義」を遊ぶ(Swift1.2)___NEXT_LINE_______NEXT_LINE____なるべく丸括弧は書きたくない。(コンストラクタ、クロージャ以外は書かなくてよくなった)___NEXT_LINE____```___NEXT_LINE____infix operator ¿ { associativity left precedence  95} // ¿ = Option + "?"___NEXT_LINE____infix operator … { associativity left precedence  85} // … = Option + ";"___NEXT_LINE____infix operator » { associativity left precedence  75} // » = Option+Shift + "]"___NEXT_LINE____infix operator « { associativity left precedence  65} // « = Option + "]"___NEXT_LINE_______NEXT_LINE____func ¿ <A> (a:A, f:A->() ) ->A {___NEXT_LINE____    f(a)___NEXT_LINE____    return a___NEXT_LINE____}___NEXT_LINE____func « <A,R>(f: A->R, @autoclosure(escaping) a:()->A) -> R {___NEXT_LINE____    return f(a())___NEXT_LINE____}___NEXT_LINE____func » <A,R>(a: A, f:A->R) -> R {___NEXT_LINE____    return f(a)___NEXT_LINE____}___NEXT_LINE____func … <A,B,R>(lhs: B->R, rhs: A->B) -> A->R {___NEXT_LINE____    return { lhs(rhs($0)) }___NEXT_LINE____}___NEXT_LINE____func … <A,R>(f: A->R, @autoclosure(escaping) a:()->A) -> R {___NEXT_LINE____    return f(a())___NEXT_LINE____}___NEXT_LINE____func … <A,B,R>(f: (A,B) -> R, @autoclosure(escaping) a:()->A) -> (B) -> R {___NEXT_LINE____    return { f(a(), $0) }___NEXT_LINE____}___NEXT_LINE____func … <A,B,C,R>(f: (A,B,C) -> R, @autoclosure(escaping) a:()->A) -> (B, C) -> R {___NEXT_LINE____    return { f(a(), $0, $1) }___NEXT_LINE____}___NEXT_LINE____func … <A,B,C,D,R>(f: (A,B,C,D) -> R, @autoclosure(escaping) a:()->A) -> (B, C, D) -> R {___NEXT_LINE____    return { f(a(), $0, $1, $2) }___NEXT_LINE____}___NEXT_LINE____func … <A,B,C,D,E,R>(f: (A,B,C,D,E) -> R, @autoclosure(escaping) a:()->A) -> (B, C, D, E) -> R {___NEXT_LINE____    return { f(a(), $0, $1, $2, $3) }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____«と…は同じ演算子だけど、優先順位が違う___NEXT_LINE_______NEXT_LINE____引数5個以上の関数に部分適用はできない(そんな関数が必要にならない)___NEXT_LINE_______NEXT_LINE____- 利用法___NEXT_LINE_______NEXT_LINE____独自の変数名がいらず、インデントもされ、関数適用の丸括弧もいらない。___NEXT_LINE____```___NEXT_LINE____//データオブジェクトをフォーマットを決めて初期化して、現在時刻で表示___NEXT_LINE____NSDateFormatter()___NEXT_LINE____    ¿ { $0.dateFormat = "HH:mm:ss.SSS" }___NEXT_LINE____    » { $0.stringFromDate … NSDate() » println}___NEXT_LINE____//    » { println « $0.stringFromDate … NSDate()} //これでも可___NEXT_LINE____```___NEXT_LINE____同じことをデフォルトで(初期化と利用)行う場合___NEXT_LINE____```___NEXT_LINE____let formatter = NSDateFormatter()___NEXT_LINE____formatter.dateFormat = "HH:mm:ss.SSS"___NEXT_LINE____let str = formatter.stringFromDate(NSDate())___NEXT_LINE____println(str)___NEXT_LINE____```___NEXT_LINE____もしくは、変数名を使わずにワンライナーにできるようにするなら___NEXT_LINE____```___NEXT_LINE____println(___NEXT_LINE____    {___NEXT_LINE____        return $0.stringFromDate(NSDate())___NEXT_LINE____        }(___NEXT_LINE____            { (x:NSDateFormatter) -> NSDateFormatter in___NEXT_LINE____                x.dateFormat = "HH:mm:ss.SSS"___NEXT_LINE____                return x___NEXT_LINE____                }( NSDateFormatter() )___NEXT_LINE____    )___NEXT_LINE____)___NEXT_LINE____```___NEXT_LINE____ポイントフリースタイルにはできないけどラムダ計算っぽくていい！___NEXT_LINE____```___NEXT_LINE____func bracket(prefix: String, suffix: String, str: String) -> String {___NEXT_LINE____    return prefix + str + suffix___NEXT_LINE____}___NEXT_LINE____println «___NEXT_LINE____    "Hello"___NEXT_LINE____    » bracket … "<p>" … "</p>"___NEXT_LINE____    » bracket … "<div>" … "</div>"___NEXT_LINE_______NEXT_LINE____func add(x: Int) -> (Int -> Int) {___NEXT_LINE____    return { (y: Int) -> Int in x + y }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____println « add … 4 … 2___NEXT_LINE____println … 1 + 2 * 3___NEXT_LINE____println … [1,2,3].map{2*$0}___NEXT_LINE____```___NEXT_LINE____- クラスメンバとしての初期化___NEXT_LINE____```___NEXT_LINE____class Test {___NEXT_LINE____    let formatter:NSDateFormatter = {___NEXT_LINE____        return NSDateFormatter()___NEXT_LINE____            ¿ {$0.dateFormat = "HH:mm:ss.SSS"}___NEXT_LINE____        }() //formatterを変更するならletでなくてvarで宣言、dateFormatの変更はletでも可能___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____で済む。 一時変数名(tempとかret使うけど)を以下の様に決めなくて良い___NEXT_LINE____```___NEXT_LINE____let dateFormatter:NSDateFormatter = {___NEXT_LINE____    let temp = NSDateFormatter()___NEXT_LINE____    temp.dateFormat = "HH:mm:ss.SSS"___NEXT_LINE____    return temp___NEXT_LINE____    }()___NEXT_LINE____```,jp,2,2015-05-14 10:01:23,2015-05-24 21:04:28,
268,C言語で素数探索プログラム,あえてエラトステネスのふるいを使わない素数探索を組む。  ___NEXT_LINE____イメージとしては2の倍数、3の倍数、4の倍数、5の倍数・・・と順番に探索の最大値までフラグを立て、立ってない数のみ出力する感じ。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <stdio.h>___NEXT_LINE____int main(void){___NEXT_LINE____ char* p = (char*)(calloc((size_t)(generate_max) + 1, sizeof(char)));___NEXT_LINE____    p[0] = p[1] = 1;___NEXT_LINE____    for (size_t j = 2; j < generate_max; j++) {___NEXT_LINE____     for (size_t k = j + j; k <= generate_max; k += j)___NEXT_LINE____           p[k] = 1;___NEXT_LINE____   }___NEXT_LINE____   for (size_t j = 0; j <= generate_max; j++)___NEXT_LINE____      if (!p[j]) printf("%d,", j);___NEXT_LINE_______NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____これが[先日STLで組んだもの](http://codegarage.edisonthk.com/_p/snippet/234)よりもやや早いっぽい,jp,7,2015-05-14 12:56:24,2015-05-14 12:56:24,
269,素数探索プログラム速度対決,C言語で組んだ素数探査プログラム  ___NEXT_LINE____[http://codegarage.edisonthk.com/_p/snippet/268](http://codegarage.edisonthk.com/_p/snippet/268)  ___NEXT_LINE____とC++のSTLを活用したエラトステネスのふるいのアルゴリズムのプログラム  ___NEXT_LINE____[http://codegarage.edisonthk.com/_p/snippet/234](http://codegarage.edisonthk.com/_p/snippet/234)  ___NEXT_LINE____を速度比較する。  ___NEXT_LINE____結論から言うとエラトステネスのふるい使わないほうが速いようだ。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <iostream>___NEXT_LINE____#include <vector>___NEXT_LINE____#include <cmath>___NEXT_LINE____#include <limits>___NEXT_LINE____#include <cstdint>___NEXT_LINE____#include <ctime>___NEXT_LINE____typedef uint64_t prime_store_t;___NEXT_LINE____typedef std::vector<prime_store_t> prime_vector;___NEXT_LINE____void simple_algrism(prime_vector& prime_num, const prime_store_t generate_max);___NEXT_LINE____class prime_num_c___NEXT_LINE____{___NEXT_LINE____public:___NEXT_LINE____   prime_num_c(prime_store_t generate_max) {___NEXT_LINE____       this->generate_max = generate_max;___NEXT_LINE____      this->prime_num.reserve(5);___NEXT_LINE____ }___NEXT_LINE____   inline void operator_prime_num(decltype(simple_algrism)* searcher);___NEXT_LINE____ inline void print() const;___NEXT_LINE____private:___NEXT_LINE____  prime_vector prime_num;___NEXT_LINE____ prime_store_t generate_max;___NEXT_LINE____ clock_t process_time;___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____void Sieve_of_Eratosthenes(prime_vector& prime_num, const prime_store_t generate_max) {//エラトステネスのふるい___NEXT_LINE____ prime_num.push_back(2);___NEXT_LINE____ for (prime_store_t i = 3; i <= generate_max; i += 2) {___NEXT_LINE____      auto it = prime_num.begin();___NEXT_LINE____        //調査対象数iを上回る既知の素数で割ろうとするか、既知の素数で割り切れるまでイテレータを進める___NEXT_LINE____        for (; it != prime_num.end() && *it <= sqrt(i) && i % *it; it++);___NEXT_LINE____       if (i % *it) {//既知の素数で割った余りがすべて0でないならば___NEXT_LINE____          prime_num.push_back(i);___NEXT_LINE____     }___NEXT_LINE____       if (i == std::numeric_limits<prime_store_t>::max()) break;//iのオーバーフロー対策___NEXT_LINE____ }___NEXT_LINE____}___NEXT_LINE____void simple_algorithm(prime_vector& prime_num, const prime_store_t generate_max) {___NEXT_LINE____    std::unique_ptr<char[]> p(new char[static_cast<size_t>(generate_max) + 1]);___NEXT_LINE____ p[0] = p[1] = 1;___NEXT_LINE____    for (size_t j = 2; j < generate_max; j++) {___NEXT_LINE____     for (size_t k = j + j; k <= generate_max; k += j)___NEXT_LINE____           p[k] = 1;___NEXT_LINE____   }___NEXT_LINE____   for (size_t j = 0; j <= generate_max; j++)___NEXT_LINE____      if (!p[j]) prime_num.push_back(j);___NEXT_LINE____}___NEXT_LINE____inline void prime_num_c::print() const {___NEXT_LINE____ using std::cout;___NEXT_LINE____    constexpr double cps = CLOCKS_PER_SEC;___NEXT_LINE____  cout << "素数の数: " << prime_num.size() << " / " << generate_max << std::endl;___NEXT_LINE____ cout << "計算時間: " << process_time / cps << " sec (" << process_time << " clock)" << std::endl;___NEXT_LINE____}___NEXT_LINE____inline void prime_num_c::operator_prime_num(decltype(simple_algrism)* searcher) {___NEXT_LINE____ const auto process_begin = clock();___NEXT_LINE____ searcher(prime_num, generate_max);___NEXT_LINE____  this->process_time = clock() - process_begin;___NEXT_LINE____}___NEXT_LINE____int main(void) {___NEXT_LINE____  std::ios::sync_with_stdio(false);//C標準入出力は使わないので同期を切る___NEXT_LINE____   std::cout << "求める素数の最大値を入力してください" << std::endl;___NEXT_LINE____ const auto generate_max = [] {___NEXT_LINE____      prime_store_t tmp = 0;___NEXT_LINE____      std::cin >> tmp;___NEXT_LINE____        return (tmp > 2)? tmp : 3;___NEXT_LINE____  }();___NEXT_LINE____    decltype(simple_algrism)* searcher[] = { Sieve_of_Eratosthenes , simple_algrism };___NEXT_LINE____  prime_num_c prime_num_generators[] = { generate_max , generate_max };___NEXT_LINE____   for (size_t i = 0; i < _countof(prime_num_generators); i++) prime_num_generators[i].operator_prime_num(searcher[i]);___NEXT_LINE____    for (auto& i : prime_num_generators) i.print();___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____実行結果ですが___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____求める素数の最大値を入力してください___NEXT_LINE____1000000___NEXT_LINE____素数の数: 78498 / 1000000___NEXT_LINE____計算時間: 0.16 sec (160 clock)___NEXT_LINE____素数の数: 78498 / 1000000___NEXT_LINE____計算時間: 0.076 sec (76 clock)___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____コンパイルはVisual Studio 2015 RC CommunityのReleaseビルド。,jp,7,2015-05-14 13:01:52,2015-05-15 16:42:54,
270,malloc,calloc,realloc,きちんと違いを理解してなかったのでメモメモ___NEXT_LINE_______NEXT_LINE____**MALLOC**___NEXT_LINE_______NEXT_LINE____【書式】___NEXT_LINE____```___NEXT_LINE____#include <stdlib.h>___NEXT_LINE____void *malloc(size_t size);___NEXT_LINE____```___NEXT_LINE____mallocはメモリを動的に管理する。___NEXT_LINE_______NEXT_LINE____【引数】___NEXT_LINE_______NEXT_LINE____size_t size　：　確保したいメモリのバイトサイズ。size_t は stdlib.h の中でtypedefされ、一般にunsignedです。___NEXT_LINE_______NEXT_LINE____【戻り値】___NEXT_LINE_______NEXT_LINE____成功時　：　確保したメモリブロックを指すポインタ___NEXT_LINE_______NEXT_LINE____失敗時　：　NULL　（メモリ不足により指定サイズ分のメモリが確保できないとき）___NEXT_LINE_______NEXT_LINE____malloc()から受け取ったポインタはNULLかどうかを調べてから使用するのが一般的です。malloc関数で確保したメモリは、使用後、必ず free関数で解放しなければならない。___NEXT_LINE_______NEXT_LINE____**CALLOC**___NEXT_LINE_______NEXT_LINE____【書式】___NEXT_LINE____```___NEXT_LINE____#include <stdlib.h>___NEXT_LINE____void *calloc(size_t n, size_t size);___NEXT_LINE____//calloc(要素数, sizeof(型))って書くのが一般的___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____callocはメモリを動的に管理する。確保されたブロックは 0 クリアされる。___NEXT_LINE_______NEXT_LINE____【引数】___NEXT_LINE_______NEXT_LINE____size_t size　：　確保したいメモリのバイトサイズ。size_t は stdlib.h の中でtypedefされ、一般にunsignedです。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____【戻り値】___NEXT_LINE_______NEXT_LINE____成功時　：　確保したメモリブロックを指すポインタ　___NEXT_LINE_______NEXT_LINE____失敗時　：　NULL　（メモリ不足により指定サイズ分のメモリが確保できないとき）___NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____#include<stdlib.h>___NEXT_LINE_______NEXT_LINE____int main(void){___NEXT_LINE____   long *buffer;___NEXT_LINE____   buffer = (long*)calloc(40, sizeof(long));___NEXT_LINE____   if (buffer != NULL){___NEXT_LINE____        printf("success!");___NEXT_LINE____ }___NEXT_LINE____   else{___NEXT_LINE____       printf("failure!");___NEXT_LINE____ }___NEXT_LINE____   free(buffer);___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____**REALLOC**___NEXT_LINE_______NEXT_LINE____【書式】___NEXT_LINE____```___NEXT_LINE____#include <stdlib.h>___NEXT_LINE____void *realloc(void *ptr, size_t size);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____【引数】___NEXT_LINE_______NEXT_LINE____第一引数に確保したメモリのポインタ___NEXT_LINE_______NEXT_LINE____第二引数に変更後のメモリサイズ___NEXT_LINE_______NEXT_LINE____【戻り値】___NEXT_LINE_______NEXT_LINE____新たに確保した領域の先頭アドレスを返す。エラー時はNULL(\0)を返す。___NEXT_LINE_______NEXT_LINE____新たに確保した先頭アドレスは、以前のアドレスと異なる場合がある。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include <stdio.h>___NEXT_LINE____#include <stdlib.h>___NEXT_LINE____#include <string.h>___NEXT_LINE_______NEXT_LINE____int main(void)___NEXT_LINE____{___NEXT_LINE____  char *ch;___NEXT_LINE____   char *ch2;___NEXT_LINE_______NEXT_LINE____  //確保___NEXT_LINE____    ch = (char*)calloc(1,100);___NEXT_LINE_______NEXT_LINE____  //文字を格納。___NEXT_LINE____    sprintf(ch,"ABCDE");___NEXT_LINE_______NEXT_LINE____    //メモリに格納した文字列とそのアドレスを表示___NEXT_LINE____ printf("文字列「%s」、アドレス「%p」\n",ch,ch);___NEXT_LINE_______NEXT_LINE____ //割り当てなおす___NEXT_LINE____   ch2 = (char*)realloc(ch,300);___NEXT_LINE_______NEXT_LINE____   //もし確保し直したメモリが違うアドレスだったら前のメモリブロックを解放___NEXT_LINE____    if(ch2 != ch){___NEXT_LINE____      //解放前に新アドレスにコピーしとく___NEXT_LINE____      memcpy(ch2,ch,100);___NEXT_LINE____     free(ch);___NEXT_LINE____   }___NEXT_LINE_______NEXT_LINE____   //新しく割り当てたメモリの文字列とアドレスを表示___NEXT_LINE____   printf("文字列「%s」、アドレス「%p」\n",ch2,ch2);___NEXT_LINE_______NEXT_LINE____   //新しく確保したメモリ解放___NEXT_LINE____  free(ch2);___NEXT_LINE_______NEXT_LINE____  ___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-15 02:09:59,2015-05-16 16:18:15,
271,decltypeについて(C++11),decltypeは指定された式の型を生成します。auto型と相性がよく、ソースコードをスッキリ書くことができます。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   auto a = 10;___NEXT_LINE____    decltype(a) b;___NEXT_LINE____  vector<decltype(b)>vec;___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____例えばこのソースコードの場合、aは10が代入されてるのでint型、bはdecltype(a)なのでint型,vecはint型のvectorです。,jp,21,2015-05-15 06:10:47,2015-05-16 01:32:14,
272,Swiftコンパイラマクロ,プリプロセッサディレクティブはないけどSwiftで使える便利なコメント___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____// MARK: - hogehoge___NEXT_LINE____// TODO: What can I do___NEXT_LINE____// FIXME: fixme!___NEXT_LINE____// WARNING: Yeah!___NEXT_LINE_______NEXT_LINE____// Objective-C and Swift___NEXT_LINE____#if DEBUG___NEXT_LINE____// DEBUG CODE___NEXT_LINE____#else___NEXT_LINE____// PRODUCTION CODE___NEXT_LINE____#endif___NEXT_LINE____```,jp,2,2015-05-15 10:51:18,2015-06-13 16:03:31,
273,Intel EdisonでEDISONボリュームマウント,yoctoなIntel EdisonのEDISONボリュームをEdisonから操作する___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____losetup -o 8192 /dev/loop0 /dev/disk/by-partlabel/update___NEXT_LINE____mkdir /mnt/EDISON___NEXT_LINE____mount /dev/loop0 /mnt/EDISON___NEXT_LINE____```___NEXT_LINE____すれば(※EDISONは分かりやすい名前なら何でも)___NEXT_LINE____```___NEXT_LINE____cd /mnt/EDISON/___NEXT_LINE____```___NEXT_LINE____できる。___NEXT_LINE_______NEXT_LINE____終わったら___NEXT_LINE____```___NEXT_LINE____umount /mnt/EDISON___NEXT_LINE____rmdir /mnt/EDISON___NEXT_LINE____```___NEXT_LINE____で解除。,jp,2,2015-05-15 16:07:55,2015-05-15 16:08:17,
274,auto変数,C++のauto型とは、C++11で追加された型推論です。コンパイル時に型を推測し、適切な型として扱ってくれます。___NEXT_LINE_______NEXT_LINE____型を類推することによってソースコードをスッキリ短く書く事ができます。___NEXT_LINE_______NEXT_LINE____イテレータを扱うときすごく便利です。___NEXT_LINE____```___NEXT_LINE____std::vector<int> v;___NEXT_LINE____for(std::vector<int>::iterator it = v.begin(); it != v.end(); ++it) {___NEXT_LINE____ ;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____これをautoを使うと___NEXT_LINE____```___NEXT_LINE____std::vector<int> v;___NEXT_LINE____for(auto it = v.begin(); it != v.end(); ++it) {___NEXT_LINE____   ;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____ソースコードが短くなりましたね。___NEXT_LINE_______NEXT_LINE____以下はサンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____ vector<int>v;___NEXT_LINE____   for (int i = 0; i < 10; i++){___NEXT_LINE____       v.push_back(i);___NEXT_LINE____ }___NEXT_LINE____   for (auto x : v){___NEXT_LINE____       cout << x << endl;___NEXT_LINE____  }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-16 01:37:40,2015-05-16 01:43:24,
275,Range based for,【書式】___NEXT_LINE_______NEXT_LINE____expression 内の各要素に対して statement を繰り返し順番に実行します。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____for ( for-range-declaration : expression )___NEXT_LINE____   statement ___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____【サンプルコード】___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____ //整数配列___NEXT_LINE____  int x[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };___NEXT_LINE____  // Range-based for loop to iterate through the array.___NEXT_LINE____   for (int y : x){___NEXT_LINE____        cout << y << " ";___NEXT_LINE____   }___NEXT_LINE____   cout << endl;___NEXT_LINE_______NEXT_LINE____   for (auto y : x){___NEXT_LINE____       cout << y << " ";___NEXT_LINE____   }___NEXT_LINE____   cout << endl;___NEXT_LINE____   //vector(double型)___NEXT_LINE____   vector<double>v;___NEXT_LINE____    for (int i = 0; i < 10; ++i){___NEXT_LINE____       v.push_back(i + 0.141592);___NEXT_LINE____  }___NEXT_LINE____   for (const auto &j : v){___NEXT_LINE____        cout << j << " ";___NEXT_LINE____   }___NEXT_LINE____   cout << endl;___NEXT_LINE_______NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-16 02:00:15,2015-05-16 02:00:15,
276,unique_ptr,unique_ptr<T>は、あるメモリに対する所有権を持つポインタが、ただ一つであることを保証するようなスマートポインタである。 auto_ptr<T>同様に、テンプレート引数で保持するポインタ型を指定し、スマートポインタが破棄される際にディストラクタにおいて自動的にメモリを開放する。___NEXT_LINE_______NEXT_LINE____* コピーが出来ない。代わりに、C++11で新たに追加されたムーブによって、所有権を移動することができる___NEXT_LINE_______NEXT_LINE____* あるメモリの所有権を持つ unique_ptr<T>は、 ただ一つのみである。___NEXT_LINE_______NEXT_LINE____【使い方】___NEXT_LINE_______NEXT_LINE____まずはじめに、unique_ptrの変数定義から___NEXT_LINE____```___NEXT_LINE____//コンストラクタの引数として、動的確保したメモリのアドレスを指定___NEXT_LINE____std::unique_ptr<int> ptr(new int(10));___NEXT_LINE_______NEXT_LINE____//reset関数を使って、後から代入することもできる___NEXT_LINE____std::unique_ptr<int> ptr2;___NEXT_LINE____ptr2.reset(new int(10));___NEXT_LINE_______NEXT_LINE____//C++14以降であれば、make_unique関数を使うこともできる___NEXT_LINE____std::unique_ptr<int> ptr3=std::make_unique<int>(10);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____unique_ptr<T>は、コピーは禁止されているが、ムーブは使用することができる。___NEXT_LINE____```___NEXT_LINE____std::unique_ptr<int> ptr(new int(10));___NEXT_LINE_______NEXT_LINE____//コピーコンストラクタや、コピー代入演算子はエラー___NEXT_LINE____//std::unique_ptr<int> ptr2(ptr); //===ERROR===___NEXT_LINE____std::unique_ptr<int> ptr3;___NEXT_LINE____//ptr3=ptr;   //===ERROR===___NEXT_LINE_______NEXT_LINE____//ムーブコンストラクタや、ムーブ代入演算子はOK___NEXT_LINE____//この時、所有権が移動する___NEXT_LINE____std::unique_ptr<int> ptr4(std::move(ptr)); //ok ptrの所有権がptr4に移動する___NEXT_LINE____std::unique_ptr<int> ptr5;___NEXT_LINE____ptr5=std::move(ptr4);   //ok ptr4の所有権がptr5に移動する___NEXT_LINE____```___NEXT_LINE____メモリの解放は、ディストラクタや reset(pointer)を使う。___NEXT_LINE____```___NEXT_LINE____{___NEXT_LINE____   std::unique_ptr<int> ptr(new int(10));___NEXT_LINE____}//ここでptrのディストラクタが呼ばれ、自動的に解放される___NEXT_LINE_______NEXT_LINE____//引数なしやnullptrを引数としてreset関数を呼んでも、明示的に解放できる___NEXT_LINE____std::unique_ptr<int> ptr2(new int(10));___NEXT_LINE____ptr2.reset();___NEXT_LINE____```___NEXT_LINE____ポインタの保持するメモリにアクセスするには、通常のポインタ同様に operator*()や operator->()が使用できる___NEXT_LINE_______NEXT_LINE____生のポインタが欲しいときには、get()か release()を使う。 get()は生ポインタを得るだけで、ポインタの所有権は unique_ptr<T>が保持し続ける。 release()はポインタの所有権自体も放棄するため、メモリの開放は自分で行う必要がある。___NEXT_LINE____```___NEXT_LINE____//通常のポインタがほしい時には、get関数を使う。___NEXT_LINE____//ポインタの所有権はunique_ptrが保持し続ける___NEXT_LINE____int* pint;___NEXT_LINE____pint = ptr.get();___NEXT_LINE_______NEXT_LINE____//所有権自体を放棄する場合は、release関数を使う___NEXT_LINE____//この場合、メモリの開放自体は自分で行う必要がある___NEXT_LINE____pint = ptr.release();___NEXT_LINE____delete pint;___NEXT_LINE____```___NEXT_LINE____配列を扱うこともできる。配列型の場合、 operator[](size_t)を使用することができる。___NEXT_LINE____```___NEXT_LINE____{___NEXT_LINE____   //型名[]をテンプレート引数に指定することで、配列も扱える___NEXT_LINE____   std::unique_ptr<int[]> ptrArray(new int[10]);___NEXT_LINE_______NEXT_LINE____   //配列型の場合operator[](size_t)を使うことができる___NEXT_LINE____   for(int i=0;i<10;++i){___NEXT_LINE____      ptrArray[i]=i;___NEXT_LINE____   }___NEXT_LINE_______NEXT_LINE____}//配列型の場合、自動的にdelete[]が呼ばれて開放される。___NEXT_LINE____```,jp,21,2015-05-16 17:34:44,2015-05-16 18:31:40,
278,PHPで日付を取得,今日の日付を取得.___NEXT_LINE____```___NEXT_LINE____$today = Date('Y-m-d H:i:s');___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____３日前の日付を取得___NEXT_LINE____```___NEXT_LINE____$expiresAt = Date('Y-m-d H:i:s', strtotime("+3 days"));___NEXT_LINE____```___NEXT_LINE____先週日曜日の取得___NEXT_LINE____```___NEXT_LINE____$NewDate=Date('Y-m-d H:i:s', strtotime("Last Sunday"));___NEXT_LINE____```,jp,1,2015-05-18 03:06:59,2015-05-19 01:58:42,
279,Swift参照外し,継承関係のあるオブジェクトはジェネリックで記述___NEXT_LINE____デコンストラクタとしてオブジェクトすべてに同じ処理をする場合に使う___NEXT_LINE____```___NEXT_LINE____import Foundation___NEXT_LINE____func delete<T:NSObject>(inout obj:T?){___NEXT_LINE____    if let item = obj {___NEXT_LINE____        obj = nil___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____var item1 : NSString? = "hello"___NEXT_LINE____delete(&item1)___NEXT_LINE____println(item1)___NEXT_LINE____var item2 : NSArray? = [1,2,3,4]___NEXT_LINE____delete(&item2)___NEXT_LINE____println(item2)___NEXT_LINE____```___NEXT_LINE____すると___NEXT_LINE____```___NEXT_LINE____nil___NEXT_LINE____nil___NEXT_LINE____```___NEXT_LINE____CocoaフレームワークならNSObjectが基本クラス,jp,2,2015-05-18 07:08:18,2015-05-18 07:09:27,
280,C言語による乱数,簡単なメモ　　___NEXT_LINE_______NEXT_LINE____* 生成される範囲が [0, 32767] と狭い___NEXT_LINE____* rand() % N は一様では無い___NEXT_LINE____* 周期があまり長くない___NEXT_LINE____* 乱数生成アルゴリズムが固定（通常は線形合同法）___NEXT_LINE____* 正規分布など、一様でない乱数生成が面倒___NEXT_LINE_______NEXT_LINE____C++の乱数の方がちゃんと乱数になってるとかなんとかんとか___NEXT_LINE_______NEXT_LINE____srand関数の引数は乱数のシード値ですね。___NEXT_LINE_______NEXT_LINE____普通の乱数___NEXT_LINE____```___NEXT_LINE____#include <stdio.h>___NEXT_LINE____#include <stdlib.h>___NEXT_LINE____ ___NEXT_LINE____int main(void){___NEXT_LINE____    int i;___NEXT_LINE____    srand(10);___NEXT_LINE____    for(i=0;i<100;i++){  printf("%d\n",rand());  }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____時間依存乱数___NEXT_LINE____```___NEXT_LINE____#include <stdio.h>___NEXT_LINE____#include <time.h>___NEXT_LINE____#include <stdlib.h>___NEXT_LINE____ ___NEXT_LINE____int main(void){___NEXT_LINE____    int i;___NEXT_LINE____    srand((unsigned)time(NULL));___NEXT_LINE____    for(i=0;i<100;i++){  printf("%d\n",rand());  }___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-19 02:05:46,2015-05-20 05:35:17,
281,nginxでの.htaccessファイル,nginxでhtaccessは取り扱っていないので、nginxではrewrite_ruleなどはすべて/etc/nginx/sites-availableの中に記述されています。___NEXT_LINE_______NEXT_LINE____例として、.htaccess in Apache 2.0___NEXT_LINE____```___NEXT_LINE____<IfModule mod_rewrite.c>___NEXT_LINE____    <IfModule mod_negotiation.c>___NEXT_LINE____        Options -MultiViews___NEXT_LINE____    </IfModule>___NEXT_LINE_______NEXT_LINE____    RewriteEngine On___NEXT_LINE_______NEXT_LINE____    # Redirect Trailing Slashes...___NEXT_LINE____    # RewriteRule ^(.*)/$ /$1 [L,R=301]___NEXT_LINE_______NEXT_LINE____    # Handle Front Controller...___NEXT_LINE____    RewriteCond %{REQUEST_FILENAME} !-d___NEXT_LINE____    RewriteCond %{REQUEST_FILENAME} !-f___NEXT_LINE____    RewriteRule ^ index.php [L]___NEXT_LINE_______NEXT_LINE____    # rewrite exact match of "/_p/" request uri to "/"___NEXT_LINE____    RewriteCond %{REQUEST_URI} ^/_p/?$___NEXT_LINE____    RewriteRule (.*) /___NEXT_LINE_______NEXT_LINE____</IfModule>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____nginxの/etc/nginx/sites-available___NEXT_LINE____```___NEXT_LINE____server {___NEXT_LINE____    listen 80;___NEXT_LINE____    server_name localhost;___NEXT_LINE____    root /home/vagrant/Code/codegarage/public;___NEXT_LINE_______NEXT_LINE____    index index.html index.htm index.php;___NEXT_LINE_______NEXT_LINE____    charset utf-8;___NEXT_LINE_______NEXT_LINE____    location / {___NEXT_LINE____        try_files $uri $uri/ /index.php?$query_string;___NEXT_LINE____        rewrite ^/_p/?$ /;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    location = /favicon.ico { access_log off; log_not_found off; }___NEXT_LINE____    location = /robots.txt  { access_log off; log_not_found off; }___NEXT_LINE_______NEXT_LINE____    access_log off;___NEXT_LINE____    error_log  /var/log/nginx/localhost-error.log error;___NEXT_LINE_______NEXT_LINE____    error_page 404 /index.php;___NEXT_LINE_______NEXT_LINE____    sendfile off;___NEXT_LINE_______NEXT_LINE____    location ~ \.php$ {___NEXT_LINE____        fastcgi_split_path_info ^(.+\.php)(/.+)$;___NEXT_LINE____        fastcgi_pass unix:/var/run/php5-fpm.sock;___NEXT_LINE____        fastcgi_index index.php;___NEXT_LINE____        include fastcgi_params;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    location ~ /\.ht {___NEXT_LINE____        deny all;___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-05-19 02:24:06,2015-05-19 02:24:06,
282,nginxでの.htaccessファイル,nginxでhtaccessは取り扱っていないので、nginxではrewrite_ruleなどはすべて/etc/nginx/sites-availableの中に記述されています。___NEXT_LINE_______NEXT_LINE____例として、.htaccess in Apache 2.0___NEXT_LINE____```___NEXT_LINE____<IfModule mod_rewrite.c>___NEXT_LINE____    <IfModule mod_negotiation.c>___NEXT_LINE____        Options -MultiViews___NEXT_LINE____    </IfModule>___NEXT_LINE_______NEXT_LINE____    RewriteEngine On___NEXT_LINE_______NEXT_LINE____    # Redirect Trailing Slashes...___NEXT_LINE____    # RewriteRule ^(.*)/$ /$1 [L,R=301]___NEXT_LINE_______NEXT_LINE____    # Handle Front Controller...___NEXT_LINE____    RewriteCond %{REQUEST_FILENAME} !-d___NEXT_LINE____    RewriteCond %{REQUEST_FILENAME} !-f___NEXT_LINE____    RewriteRule ^ index.php [L]___NEXT_LINE_______NEXT_LINE____    # rewrite exact match of "/_p/" request uri to "/"___NEXT_LINE____    RewriteCond %{REQUEST_URI} ^/_p/?$___NEXT_LINE____    RewriteRule (.*) /___NEXT_LINE_______NEXT_LINE____</IfModule>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____nginxの/etc/nginx/sites-available___NEXT_LINE____```___NEXT_LINE____server {___NEXT_LINE____    listen 80;___NEXT_LINE____    server_name localhost;___NEXT_LINE____    root /home/vagrant/Code/codegarage/public;___NEXT_LINE_______NEXT_LINE____    index index.html index.htm index.php;___NEXT_LINE_______NEXT_LINE____    charset utf-8;___NEXT_LINE_______NEXT_LINE____    location / {___NEXT_LINE____        try_files $uri $uri/ /index.php?$query_string;___NEXT_LINE____        rewrite ^/_p/?$ /;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    location = /favicon.ico { access_log off; log_not_found off; }___NEXT_LINE____    location = /robots.txt  { access_log off; log_not_found off; }___NEXT_LINE_______NEXT_LINE____    access_log off;___NEXT_LINE____    error_log  /var/log/nginx/localhost-error.log error;___NEXT_LINE_______NEXT_LINE____    error_page 404 /index.php;___NEXT_LINE_______NEXT_LINE____    sendfile off;___NEXT_LINE_______NEXT_LINE____    location ~ \.php$ {___NEXT_LINE____        fastcgi_split_path_info ^(.+\.php)(/.+)$;___NEXT_LINE____        fastcgi_pass unix:/var/run/php5-fpm.sock;___NEXT_LINE____        fastcgi_index index.php;___NEXT_LINE____        include fastcgi_params;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    location ~ /\.ht {___NEXT_LINE____        deny all;___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```,jp,19,2015-05-19 10:31:07,2015-05-19 10:31:07,
283,gitの使い方　branch編,`git branch`<br>___NEXT_LINE____-aをつけるとリモートも含めたすべてのブランチを参照することができる。___NEXT_LINE_______NEXT_LINE____`git branch <new branch_name>`<br>___NEXT_LINE____<>内の名前でブランチを新たに作成する。___NEXT_LINE_______NEXT_LINE____`git branch -m <name1> <newname>`<br>___NEXT_LINE____<name1>(以前の名前)を<newbranch>（新しい名前）に変更する。___NEXT_LINE_______NEXT_LINE____`git checkout <branch_name> `<br>___NEXT_LINE____ブランチの移動を行う。-bをつけるとブランチの作成とその作成したブランチへの移動が同時に行える。<br>___NEXT_LINE_______NEXT_LINE____※originとは　リポジトリのurl等場所のことを指す,jp,19,2015-05-19 10:52:00,2015-05-20 11:44:09,
284,gitの使い方　pushとブランチ編,`git push my_branch : remote_branch`<br>___NEXT_LINE____ローカルブランチ(my_branch)をリモート(remote_branch)にプッシュする。___NEXT_LINE_______NEXT_LINE____`git pull my_branch : remote_branch`<br>___NEXT_LINE____ローカルブランチ(my_branch)へリモート(remote_branch)からプルする。,jp,19,2015-05-19 10:59:00,2015-05-19 10:59:14,
285,C++の乱数生成,[c言語の場合](http://codegarage.edisonthk.com/_p/snippet/280/edit)___NEXT_LINE_______NEXT_LINE____乱数の作り方はいっぱいあるけど、線形的に乱数を作るとバラつきがなくなってしまう。そこでC++11のstd::randomを使ってみた___NEXT_LINE_______NEXT_LINE____#ライブラリ___NEXT_LINE____```___NEXT_LINE____#include<random>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____#非決定的な乱数生成___NEXT_LINE____「非決定的」とは、次の値が一意に決まらないという意味である。内部的にはハードウェアの状態や時刻に用いて実現している。___NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include <random>___NEXT_LINE_______NEXT_LINE____int main()___NEXT_LINE____{___NEXT_LINE____    std::random_device rnd;     // 非決定的な乱数生成器___NEXT_LINE____    for (int i = 0; i < 10; ++i) {___NEXT_LINE____        std::cout << std::hex << rnd() << "\n";___NEXT_LINE____    }___NEXT_LINE____    getchar();___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____#決定的な乱数生成___NEXT_LINE____「決定的」とは、現在の値により次の値が一意に決まるという意味、擬似乱数とも呼ばれ、数学的には完全な乱数ではない。___NEXT_LINE_______NEXT_LINE____決定的な乱数生成アルゴリズムとしては、線形合同法、メルセンヌ・ツイスタなどがあり、選択することができる。___NEXT_LINE_______NEXT_LINE____メルセンヌ・ツイスタのサンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<random>___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   std::random_device rnd;___NEXT_LINE____ std::mt19937_64 mt;___NEXT_LINE____ mt.seed(rnd());___NEXT_LINE_______NEXT_LINE____ for (int i = 0; i < 10; ++i){___NEXT_LINE____       std::cout << std::hex << mt() << std::endl;___NEXT_LINE____ }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____#範囲指定乱数生成___NEXT_LINE____「%N」を行うことで[0,N)の範囲の（ある程度）の一様乱数を得ることは可能だが、もっと正確な一様乱数を得る仕組みが用意された。それが「uniform_int_distribution」である。___NEXT_LINE____```___NEXT_LINE____std::uniform_int_distribution<>rand100(0,99);___NEXT_LINE____```___NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<random>___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   std::random_device rnd;___NEXT_LINE____ std::mt19937 mt;___NEXT_LINE____    mt.seed(rnd());___NEXT_LINE_______NEXT_LINE____ std::uniform_int_distribution<>rand100(0, 99);___NEXT_LINE_______NEXT_LINE____  for (int i = 0; i < 20; i++){___NEXT_LINE____       std::cout << rand100(mt) << std::endl;___NEXT_LINE____  }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____正規分布の乱数もおこせるみたいですね___NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<random>___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____  std::random_device rnd;___NEXT_LINE____ std::mt19937 mt;___NEXT_LINE____    mt.seed(rnd());___NEXT_LINE____ //平均50、分散値10の正規分布___NEXT_LINE____   std::normal_distribution<>norm(50.0, 10.0);___NEXT_LINE____ for (int i = 0; i < 20; i++){___NEXT_LINE____       std::cout << norm(mt) << std::endl;___NEXT_LINE____ }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-20 05:30:18,2015-05-21 05:27:33,
287,conflictの直し方,commitを行う際にconflictが起きることがある。<br>___NEXT_LINE____それを解決するためにソースコードに直接conflictが起きている位置が表示される。___NEXT_LINE_______NEXT_LINE____`HEAD>>>>> hogehoge`<br>___NEXT_LINE____` branch_name>>>>>> hoge1hoge1`___NEXT_LINE_______NEXT_LINE____必要に応じて指定された部分を編集(削除)することでcommitができるようになる。,jp,19,2015-05-20 12:52:29,2015-05-20 12:52:29,
288,git cloneの仕方,git hubでcloneしたいレポジトリのトップページへ移動し、urlをコピーする。___NEXT_LINE_______NEXT_LINE____その後、ダウンロードしたい場所のディレクトリに移動し、<br>___NEXT_LINE____`git clone "url"`<br>___NEXT_LINE____を入力することでできる,jp,19,2015-05-20 13:06:54,2015-05-20 13:06:54,
289,alias定義してGitコマンドを短くする,githowtoの内容によると２通りがあります。___NEXT_LINE_______NEXT_LINE____[http://githowto.com/aliases](http://githowto.com/aliases)___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____## git コマンドでaliasを定義___NEXT_LINE_______NEXT_LINE____次の例は`commit`を`ci`に変換します。そうすると、`git commit -a`を`git ci -a`と短くすることができます。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____git config --global alias.ci commit___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____## .gitconfig___NEXT_LINE_______NEXT_LINE____$HOMEディレクトリーのところにある.gitconfigを開き、aliasのところを次のように編集しましょう。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____[alias]___NEXT_LINE____  ci = commit___NEXT_LINE____```,jp,1,2015-05-21 10:47:53,2015-05-21 10:47:53,
290,マージンとパディング,* マージン … 境界線より外側にある余白部分___NEXT_LINE____* パディング … 境界線と内容領域の間にある余白部分___NEXT_LINE_______NEXT_LINE____マージンサンプルコード___NEXT_LINE____```___NEXT_LINE____<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____<title>文書のタイトル</title>___NEXT_LINE_______NEXT_LINE____<style type="text/css">___NEXT_LINE_______NEXT_LINE____p { background-color: #85b9e9; }___NEXT_LINE_______NEXT_LINE____p.example1 { margin: 50px; }___NEXT_LINE____p.example2 { margin: 50px 100px; }___NEXT_LINE____p.example3 { margin: 50px 10px 50px 200px; }___NEXT_LINE_______NEXT_LINE____</style>___NEXT_LINE_______NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE_______NEXT_LINE____<p class="example1">上下左右に50pxのマージン</p>___NEXT_LINE____<p class="example2">上下に50px、左右に100pxのマージン</p>___NEXT_LINE____<p class="example3">上下に50px、左に200px、右に10pxのマージン</p>___NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____パディングサンプルコード___NEXT_LINE____```___NEXT_LINE____<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____<title>文書のタイトル</title>___NEXT_LINE_______NEXT_LINE____<style type="text/css">___NEXT_LINE_______NEXT_LINE____p {___NEXT_LINE____width: 200px;___NEXT_LINE____background-color: #85b9e9;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____p.example1 { padding: 30px; }___NEXT_LINE____p.example2 { padding: 10px 30px; }___NEXT_LINE____p.example3 { padding: 0 0 0 60px; }___NEXT_LINE_______NEXT_LINE____</style>___NEXT_LINE_______NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE_______NEXT_LINE____<p class="example1">上下左右に30pxのパディング</p>___NEXT_LINE____<p class="example2">上下に10px、左右に30pxのパディング</p>___NEXT_LINE____<p class="example3">上右下はパディングなし、左に60pxのパディング</p>___NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-05-22 02:23:21,2015-05-22 02:26:22,
291,Swiftのenumをenumerateする,Swiftのenumにはjavaのvaluesみたいなものがない___NEXT_LINE____```___NEXT_LINE____private func bitCast<T:Hashable>( t: T.Type ) -> ( Int,(Int)->T )? {___NEXT_LINE____    switch sizeof(t){___NEXT_LINE____    case sizeof(  UInt8 ):___NEXT_LINE____        return (Int( UInt8.max), { return unsafeBitCast(  UInt8($0), t) })___NEXT_LINE____    case sizeof( UInt16 ):___NEXT_LINE____        return (Int(UInt16.max), { return unsafeBitCast( UInt16($0), t) })___NEXT_LINE____    case sizeof( UInt32 ):___NEXT_LINE____        return (Int(UInt32.max), { return unsafeBitCast( UInt32($0), t) })___NEXT_LINE____    case sizeof( UInt64 ):___NEXT_LINE____        return (Int( Int.max-1), { return unsafeBitCast( UInt64($0), t) })___NEXT_LINE____    default:___NEXT_LINE____        return nil___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____func count<T:Hashable>(t:T.Type) -> Int {___NEXT_LINE____    if let (maximum, cast) = bitCast(T){___NEXT_LINE____        let flag = Int( 0 != cast(0).hashValue )___NEXT_LINE____        for i in 1...maximum {___NEXT_LINE____            if 0 == cast(i).hashValue {___NEXT_LINE____                return i + flag___NEXT_LINE____            }___NEXT_LINE____        }___NEXT_LINE____        return 1 + maximum + flag___NEXT_LINE____    }___NEXT_LINE____    return 0___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____func values<T:Hashable>(t:T.Type)->[T]{___NEXT_LINE____    if let (_, cast) = bitCast(t) {___NEXT_LINE____        return map(0..<count(t)), cast)___NEXT_LINE____    }___NEXT_LINE____    return [T]()___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____で使い方は___NEXT_LINE____```___NEXT_LINE____enum Test{___NEXT_LINE____    case One___NEXT_LINE____    case Two___NEXT_LINE____}___NEXT_LINE____println("count = \(count(Test))")___NEXT_LINE____for item in values(Test){___NEXT_LINE____    switch item {___NEXT_LINE____    case .One:___NEXT_LINE____        println("一")___NEXT_LINE____    case .Two:___NEXT_LINE____        println("二")___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____構造体でラップしてgetter経由にしてもええけど、使う時面倒くさい___NEXT_LINE_______NEXT_LINE____自前でenumの配列を作ってもええけど、変更があると面倒くさいテスト関数などで……というか標準でサポートしてほしい___NEXT_LINE_______NEXT_LINE____値付きenumはenumであってenumでないので これでは無理,jp,2,2015-05-22 16:07:48,2015-05-23 07:52:38,
292,Laravelでcookiesを消す方法,２つの方法がありまして、１つ目は`Cookie::forget`を使います。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____$co = Cookie::forget("mykey");___NEXT_LINE_______NEXT_LINE____$response = new Illuminate\Http\Response(View::make('index'));___NEXT_LINE____$response->withCookie($co);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____もう１つの方法は`Cookie::queue`を使います。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____Cookie::queue("mykey", null, -1);___NEXT_LINE____```,jp,1,2015-05-23 03:48:41,2015-05-23 03:48:41,
293,C言語でqueue,簡単な実装___NEXT_LINE____授業で扱ったから復習　これならクラスで実装したほうが楽そうですね___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____#include<malloc.h>___NEXT_LINE____#include<limits.h>___NEXT_LINE____#include<stdlib.h>___NEXT_LINE_______NEXT_LINE____#define SIZE 50___NEXT_LINE____//プロトタイプ宣言-----------------------------------------___NEXT_LINE____void init(void);___NEXT_LINE____void add(void);___NEXT_LINE____void delete_q(void);___NEXT_LINE____void display(void);___NEXT_LINE____void enqueue(int n);___NEXT_LINE____int dequeue(void);___NEXT_LINE____int isFull(void);___NEXT_LINE____int isEmpty(void);___NEXT_LINE____int get_integer_num(const int max, const int min);___NEXT_LINE____//----------------------------------------------------------___NEXT_LINE_______NEXT_LINE____//グローバル変数宣言----------------------------------------___NEXT_LINE____int queue[SIZE];___NEXT_LINE____int head, tail;___NEXT_LINE____//----------------------------------------------------------___NEXT_LINE_______NEXT_LINE____//main関数--------------------------------------------------___NEXT_LINE____int main(void){___NEXT_LINE____ int res;___NEXT_LINE____    init();___NEXT_LINE____ while (1){___NEXT_LINE____      printf("1--追加\t2--削除\t3--表示\t0--終了\n");___NEXT_LINE____     res=get_integer_num(INT_MAX, INT_MIN);___NEXT_LINE____      if (!res)break;___NEXT_LINE____     switch (res){___NEXT_LINE____       case 1:___NEXT_LINE____         add();___NEXT_LINE____          break;___NEXT_LINE____      case 2:___NEXT_LINE____         delete_q();___NEXT_LINE____         break;___NEXT_LINE____      case 3:___NEXT_LINE____         display();___NEXT_LINE____          break;___NEXT_LINE____      }___NEXT_LINE____   }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____//----------------------------------------------------------___NEXT_LINE_______NEXT_LINE____//関数------------------------------------------------------___NEXT_LINE____void init(void){___NEXT_LINE____    head = 0;___NEXT_LINE____   tail = 0;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void  display(void){___NEXT_LINE____  int i;___NEXT_LINE____  printf("---\n");___NEXT_LINE____    for (i = head%SIZE; i < tail%SIZE; i++){___NEXT_LINE____        printf("%d\n",queue[i]);___NEXT_LINE____    }___NEXT_LINE____   printf("---\n");___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void add(void){___NEXT_LINE____    int n;___NEXT_LINE____  if (isFull())return;___NEXT_LINE____    printf("整数を入力してください：");___NEXT_LINE____ n = get_integer_num(INT_MAX, INT_MIN);___NEXT_LINE____  enqueue(n);___NEXT_LINE____ printf("%dを追加しました。\n",n);___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void delete_q(void){___NEXT_LINE____  if (isEmpty())return;___NEXT_LINE____   printf("%dを取り出しました。\n",dequeue());___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void enqueue(int n){___NEXT_LINE____ queue[(tail++) % SIZE] = n;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int dequeue(void){___NEXT_LINE____  return queue[(head++) % SIZE];___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int isFull(void){___NEXT_LINE____    if (head%SIZE == (tail+1)%SIZE){___NEXT_LINE____        printf("キューは満杯です。\n");___NEXT_LINE____      return 1;___NEXT_LINE____   }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int isEmpty(void){___NEXT_LINE____    if (head%SIZE == tail%SIZE){___NEXT_LINE____        printf("キューは空です。\n");___NEXT_LINE____       return 1;___NEXT_LINE____   }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int get_integer_num(const int max, const int min){___NEXT_LINE____    //機能：標準入力を数字に変換する。___NEXT_LINE____  //引数：戻り値の最大値,戻り値の最小値___NEXT_LINE____    //戻り値：入力した数字、エラー時は-1,EOFのときはEOF___NEXT_LINE____ char s[100];___NEXT_LINE____    char *endptr;___NEXT_LINE_______NEXT_LINE____   if (NULL == fgets(s, 100, stdin)){___NEXT_LINE____      if (feof(stdin)){//エラーの原因がEOFか切り分け___NEXT_LINE____          return EOF;___NEXT_LINE____     }___NEXT_LINE____       return INT_MIN;___NEXT_LINE____ }___NEXT_LINE____   if ('\n' == s[0]) return INT_MIN;___NEXT_LINE____   errno = 0;___NEXT_LINE____  const long t = strtol(s, &endptr, 10);___NEXT_LINE____  if (0 != errno || '\n' != *endptr || t < min || max < t)___NEXT_LINE____        return INT_MIN;___NEXT_LINE____ return (int)t;___NEXT_LINE____}___NEXT_LINE____//---------------------------------------------------------___NEXT_LINE____```,jp,21,2015-05-26 02:36:22,2015-05-26 02:44:16,
294,SwiftでUIImageリサイズとかサムネイル化,決まったサイズのUImageがほしい時___NEXT_LINE____```___NEXT_LINE____protocol UIImageResize {___NEXT_LINE____    func resizedImage(#width:CGFloat, height : CGFloat) -> UIImage___NEXT_LINE____    func cropThumbnailImage(#width:Int, height : Int) -> UIImage___NEXT_LINE____}___NEXT_LINE____extension UIImage : UIImageResize{___NEXT_LINE____    func resizedImage(#width:CGFloat, height : CGFloat) -> UIImage {___NEXT_LINE____        UIGraphicsBeginImageContextWithOptions(CGSizeMake(width, height), false, UIScreen.mainScreen().scale)___NEXT_LINE____        let context = UIGraphicsGetCurrentContext()___NEXT_LINE____        //        CGContextSetInterpolationQuality(context, kCGInterpolationHigh)___NEXT_LINE____        self.drawInRect(CGRectMake(0.0, 0.0, width, height))___NEXT_LINE____        let resizedImage = UIGraphicsGetImageFromCurrentImageContext()___NEXT_LINE____        UIGraphicsEndImageContext()___NEXT_LINE____        return resizedImage;___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    func cropThumbnailImage(#width:Int, height : Int) -> UIImage {___NEXT_LINE____        // リサイズ処理___NEXT_LINE____        let origRef    = self.CGImage;___NEXT_LINE____        let origWidth  = Int(CGImageGetWidth(origRef))___NEXT_LINE____        let origHeight = Int(CGImageGetHeight(origRef))___NEXT_LINE____        var resizeWidth:Int = 0, resizeHeight:Int = 0___NEXT_LINE____        if (origWidth < origHeight) {___NEXT_LINE____            resizeWidth = width___NEXT_LINE____            resizeHeight = origHeight * resizeWidth / origWidth___NEXT_LINE____        } else {___NEXT_LINE____            resizeHeight = height___NEXT_LINE____            resizeWidth = origWidth * resizeHeight / origHeight___NEXT_LINE____        }___NEXT_LINE____        let resized = self.resizedImage(width: CGFloat(resizeWidth), height: CGFloat(resizeHeight))___NEXT_LINE____        // 切り抜き処理___NEXT_LINE____        let scale = UIScreen.mainScreen().scale___NEXT_LINE____        let cropRect  = CGRectMake(___NEXT_LINE____            scale*CGFloat((resizeWidth - width) / 2),___NEXT_LINE____            scale*CGFloat((resizeHeight - height) / 2),___NEXT_LINE____            scale*CGFloat(width),___NEXT_LINE____            scale*CGFloat(height)___NEXT_LINE____        )___NEXT_LINE____        let cropRef   = CGImageCreateWithImageInRect(resized.CGImage, cropRect)___NEXT_LINE____        let cropImage = UIImage(CGImage: cropRef, scale: scale, orientation: UIImageOrientation.Up)___NEXT_LINE____        return cropImage!___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```,jp,2,2015-05-26 06:19:46,2015-05-26 06:19:46,
295,SwiftのUIFont拡張,UIFontでDynamicTypeのフォントを使うときにFontTraitsの指定をするクラス拡張___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____protocol UIFontHelper {___NEXT_LINE____    static func preferredFontForTextStyle(style: String, symbolicTraits: UIFontDescriptorSymbolicTraits ) -> UIFont___NEXT_LINE____}___NEXT_LINE____extension UIFont : UIFontHelper{___NEXT_LINE____    static func preferredFontForTextStyle(style: String, symbolicTraits: UIFontDescriptorSymbolicTraits ) -> UIFont{___NEXT_LINE____        var descriptor = UIFontDescriptor.preferredFontDescriptorWithTextStyle(style)___NEXT_LINE____        descriptor = descriptor.fontDescriptorWithSymbolicTraits(symbolicTraits)!___NEXT_LINE____        return UIFont(descriptor: descriptor, size: 0.0)___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____なら、通常のpreferredFontForTextStyleも呼べるし、Traitsを追加したら入手できる。,jp,2,2015-05-26 06:22:01,2015-05-26 06:22:01,
296,scanf()の標準入力のエラー処理,すでに標準入力がある場合には正常な入力が行われません。___NEXT_LINE_______NEXT_LINE____fflush関数は処理系依存なので今回はパス___NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____int main(){___NEXT_LINE____ int iNum;___NEXT_LINE____   char* cErr;___NEXT_LINE____ int err;___NEXT_LINE____    while(1){___NEXT_LINE____       printf("整数を入力：");___NEXT_LINE____       err=scanf("%d",&iNum);___NEXT_LINE____      if(err){___NEXT_LINE____            printf("入力された値：%d\n",iNum);___NEXT_LINE____     }else{___NEXT_LINE____          scanf("%s",cErr);___NEXT_LINE____           printf("整数ではないです。入力された値：%s\n",cErr);___NEXT_LINE____        }___NEXT_LINE____   }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-26 07:50:27,2015-05-26 07:56:39,
297,HTMLテンプレート - basic,htmlファイルに最低限必要なテンプレート___NEXT_LINE____```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html lang="jp">___NEXT_LINE____<head>___NEXT_LINE____    <meta charset="utf-8">___NEXT_LINE____      <title></title>___NEXT_LINE____     <meta name="description" content="">___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE_______NEXT_LINE____   ___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,1,2015-05-26 15:29:54,2015-05-26 15:29:54,
298,<span>,<ul>,# spanタグ___NEXT_LINE_______NEXT_LINE____SPANタグはそれ自身は特に意味を持っていませんが、 SPAN～/SPANで囲んだ範囲をひとかたまりとして、スタイルシートを適用するのに用います。___NEXT_LINE_______NEXT_LINE____sampleソース___NEXT_LINE____```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title>tag_test</title>___NEXT_LINE____ <meta charset="utf-8">___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____ 絵の具の ___NEXT_LINE____   <span style="background-color: #0099FF">青色</span>と ___NEXT_LINE____ <span style="background-color: #FFFF00">黄色</span>を混ぜると ___NEXT_LINE____ <span style="background-color: #33CC33">緑色</span>になります。___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____# ULタグ___NEXT_LINE_______NEXT_LINE____ULタグはUnordered Listの略で、順序のないリストを表示する際に使用します。 リストの各項目はLIタグを用いて記述します。 また、順序のあるリスト表示にはOLタグを使用します。___NEXT_LINE_______NEXT_LINE____sampleソース___NEXT_LINE____```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____ <title>tag_test</title>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____    <h3>好きな動物</h3>___NEXT_LINE____  <ul type="disc">___NEXT_LINE____    <li>白くま</li>___NEXT_LINE____    <li>ライオン</li>___NEXT_LINE____   <li>クロヒョウ</li>___NEXT_LINE____  <li>チンパンジー</li>___NEXT_LINE____ <li>山猫</li>___NEXT_LINE____ </ul>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```,jp,21,2015-05-27 03:35:18,2015-05-27 03:37:29,
299,美しいバックグラウンドを設定する,`body {  ___NEXT_LINE____/* 画像ファイルの指定 */  ___NEXT_LINE____background-image: url(images/background-photo.jpg);  ___NEXT_LINE____/* 画像を常に天地左右の中央に配置 */  ___NEXT_LINE____background-position: center center;  ___NEXT_LINE____/* 画像をタイル状に繰り返し表示しない */  ___NEXT_LINE____background-repeat: no-repeat;  ___NEXT_LINE____/* コンテンツの高さが画像の高さより大きい時、動かないように固定   */background-attachment: fixed;  ___NEXT_LINE____/* 表示するコンテナの大きさに基づいて、背景画像を調整 */  ___NEXT_LINE____background-size: cover;  ___NEXT_LINE____/* 背景画像が読み込まれる前に表示される背景のカラー */  ___NEXT_LINE____  background-color: #464646;  ___NEXT_LINE____}`,jp,19,2015-05-27 09:54:40,2015-05-27 09:58:49,
300,vectorの簡単なソート,かんたーん　[C++の乱数](http://codegarage.edisonthk.com/snippet/285)___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____#include<random>___NEXT_LINE____#include<algorithm>___NEXT_LINE____#include<functional>___NEXT_LINE____int main(){___NEXT_LINE____    //変数定義-----------------------------___NEXT_LINE____ std::vector<int> iVec;___NEXT_LINE____  std::random_device rnd;___NEXT_LINE____ std::mt19937_64 mt;___NEXT_LINE____ //---------------------------------------------------------___NEXT_LINE_______NEXT_LINE____ //ソート前-------------------------------------------------___NEXT_LINE____ mt.seed(rnd());___NEXT_LINE____ std::uniform_int_distribution<>rand100(0, 99);___NEXT_LINE____  for (int i = 0; i < 10; i++){___NEXT_LINE____       iVec.push_back(rand100(mt));___NEXT_LINE____    }___NEXT_LINE____   std::cout << "ソート前" << std::endl;___NEXT_LINE____   for (auto x : iVec){___NEXT_LINE____        std::cout << x << " ";___NEXT_LINE____  }___NEXT_LINE____   std::cout << std::endl;___NEXT_LINE____ //-----------------------------------------------------------___NEXT_LINE____   ___NEXT_LINE____    //昇順------------------------------------------------------___NEXT_LINE____  std::sort(iVec.begin(), iVec.end());___NEXT_LINE_______NEXT_LINE____    std::cout << "ソート後(昇順）" << std::endl;___NEXT_LINE____   for (auto x : iVec){___NEXT_LINE____        std::cout << x << " ";___NEXT_LINE____  }___NEXT_LINE____   std::cout << std::endl;___NEXT_LINE____ //-----------------------------------------------------------___NEXT_LINE____   ___NEXT_LINE____    //降順-------------------------------------------------------___NEXT_LINE____ std::sort(iVec.begin(), iVec.end(),std::greater<int>());___NEXT_LINE____    std::cout << "ソート後(降順）" << std::endl;___NEXT_LINE____   for (auto x : iVec){___NEXT_LINE____        std::cout << x << " ";___NEXT_LINE____  }___NEXT_LINE____   std::cout << std::endl;___NEXT_LINE____ //-----------------------------------------------------------___NEXT_LINE_______NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-28 06:45:00,2015-05-28 06:48:57,
301,SwiftでmapMaybe,HaskellのmapMaybeを実装。___NEXT_LINE_______NEXT_LINE____Swiftのmap関数にOptionalValueを返す関数を渡すと、当たり前だけど要素数は変わらずnilも要素になる。___NEXT_LINE_______NEXT_LINE____勝手にnilを除く関数 mapMaybe___NEXT_LINE____```___NEXT_LINE____func mapMaybe<T: SequenceType, U> (source: T, transform: (T.Generator.Element)->U? ) -> [U] {___NEXT_LINE____    var result = [U]()___NEXT_LINE____    for x in source {___NEXT_LINE____        if let y = transform(x) {___NEXT_LINE____            result.append(y)___NEXT_LINE____        }___NEXT_LINE____    }___NEXT_LINE____    return result___NEXT_LINE____//    return reduce(source, [U]()){___NEXT_LINE____//        if let ok = transform($1){___NEXT_LINE____//            return $0 + [ok]___NEXT_LINE____//        }___NEXT_LINE____//        return $0___NEXT_LINE____//    }遅いけど宣言的に書くのはこっち___NEXT_LINE_______NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____extension Array {___NEXT_LINE____    func mapOptional<U>(transform: T->U?) -> [U]{___NEXT_LINE____        return mapMaybe(self, transform)___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____として(グローバル名前空間のエイリアスがないので関数名を別にしないといけない…)___NEXT_LINE____```___NEXT_LINE____let array = map(0...100){___NEXT_LINE____    String($0)___NEXT_LINE____}___NEXT_LINE____let result = array.mapOptional{___NEXT_LINE____    return ($0.hasPrefix("1")) ? $0 : nil___NEXT_LINE____} // [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 100]___NEXT_LINE____```___NEXT_LINE____で使う。Failable Initializerを使う時とかに…___NEXT_LINE_______NEXT_LINE____標準のSwiftで普通にやるなら".filter{ $0 != nil }.map{ $0! }"を付けて___NEXT_LINE____```___NEXT_LINE____let array = map(0...100){___NEXT_LINE____    String($0)___NEXT_LINE____}___NEXT_LINE____let result = array.map{ (str:String)->String? in___NEXT_LINE____    (str.hasPrefix("1")) ? str : nil___NEXT_LINE____    }.filter{ $0 != nil }.map{ $0! }___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____参考:___NEXT_LINE_______NEXT_LINE____[How to unwrap the elements of an Array in Swift?](http://stackoverflow.com/questions/25163741/how-to-unwrap-the-elements-of-an-array-in-swift-ie-arrayint-as-arrayint)___NEXT_LINE_______NEXT_LINE____[filter, String and ExtensibleCollectionType](http://airspeedvelocity.net/2014/08/22/filter-string-and-extensiblecollectiontype/),jp,2,2015-05-28 09:32:43,2015-05-28 09:57:48,
302,バブルソート(C++),#ソートもできない奴はプログラマじゃない！！___NEXT_LINE_______NEXT_LINE____ってどっかに書いてあったので勉強してみた___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____#include<random>___NEXT_LINE____#define ARRAY_MAX 15___NEXT_LINE____//バブルソート___NEXT_LINE____void bubble_sort(int iArray[],int num){___NEXT_LINE____  int temp;___NEXT_LINE____   for (int i=0; i < num; i++){___NEXT_LINE____        for (int j = num - 1; j > i; j--){___NEXT_LINE____          if (iArray[j - 1]>iArray[j]){___NEXT_LINE____               temp = iArray[j];___NEXT_LINE____               iArray[j] = iArray[j - 1];___NEXT_LINE____              iArray[j - 1] = temp;___NEXT_LINE____           }___NEXT_LINE____       }___NEXT_LINE____   }___NEXT_LINE____}___NEXT_LINE____int main(){___NEXT_LINE____   //配列を定義___NEXT_LINE____ int iArray[ARRAY_MAX];___NEXT_LINE____  //乱数生成の処理___NEXT_LINE____   std::random_device rnd;___NEXT_LINE____ std::mt19937_64 mt;___NEXT_LINE____ mt.seed(mt());___NEXT_LINE____  std::uniform_int_distribution<>rand100(0, 99);___NEXT_LINE_______NEXT_LINE____  //配列に乱数を代入___NEXT_LINE____  for (int i = 0; i < ARRAY_MAX; i++){___NEXT_LINE____        iArray[i] = rand100(mt);___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____   //ソート前___NEXT_LINE____  std::cout << "ソート前" << std::endl;___NEXT_LINE____   for (int i = 0; i < ARRAY_MAX; i++){___NEXT_LINE____        std::cout << iArray[i] << " ";___NEXT_LINE____  }___NEXT_LINE____   std::cout << std::endl;___NEXT_LINE____ bubble_sort(iArray, ARRAY_MAX);___NEXT_LINE_______NEXT_LINE____ //ソート後___NEXT_LINE____  std::cout << "ソート後" << std::endl;___NEXT_LINE____   for (int i = 0; i < ARRAY_MAX; i++){___NEXT_LINE____        std::cout << iArray[i] << " ";___NEXT_LINE____  }___NEXT_LINE____   std::cout << std::endl;___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-28 14:51:26,2015-05-28 14:59:37,
303,シーザー暗号(C++),英小文字のみです。めんどくさいので大文字対応させてません。いいよね___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____constexpr int LEN = 255;___NEXT_LINE____int main(){___NEXT_LINE____   //変数定義------------------------------------------------------------___NEXT_LINE____  char plain_text[LEN];___NEXT_LINE____   char encrypt_text[LEN];___NEXT_LINE____ char decrypt_text[LEN];___NEXT_LINE____ int key, number, i=0;___NEXT_LINE_______NEXT_LINE____   //平文と鍵を入力------------------------------------------------------___NEXT_LINE____ std::cout << "平文を入力(英小文字のみ）:";___NEXT_LINE____  std::cin >> plain_text;___NEXT_LINE____ std::cout << "ずらす数を入力：";___NEXT_LINE____    std::cin >> key;___NEXT_LINE_______NEXT_LINE____    //暗号文生成----------------------------------------------------------___NEXT_LINE____   while (plain_text[i] != '\0'){___NEXT_LINE____      number = (plain_text[i] - 'a' + key) % 26;___NEXT_LINE____      encrypt_text[i] = 'a' + number;___NEXT_LINE____     i++;___NEXT_LINE____    }___NEXT_LINE____   encrypt_text[i] = '\0';___NEXT_LINE____ std::cout << "暗号文：" << encrypt_text << std::endl;___NEXT_LINE_______NEXT_LINE____   //復号文生成----------------------------------------------------------___NEXT_LINE____   i = 0;___NEXT_LINE____  while (encrypt_text[i] != '\0'){___NEXT_LINE____        number = (encrypt_text[i] - 'a' - key);___NEXT_LINE____     if (number < 0){___NEXT_LINE____            number = 26 + number;___NEXT_LINE____       }___NEXT_LINE____       else{___NEXT_LINE____           number = number % 26;___NEXT_LINE____       }___NEXT_LINE____       decrypt_text[i] = 'a' + number;___NEXT_LINE____     i++;___NEXT_LINE____    }___NEXT_LINE____   decrypt_text[i] = '\0';___NEXT_LINE____ std::cout << "復号文：" << decrypt_text << std::endl;___NEXT_LINE____   ___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-29 05:37:56,2015-05-29 05:50:35,
304,フィボナッチ数列（C++）,f(n)=f(n-1)+f(n-2)   nは自然数___NEXT_LINE_______NEXT_LINE____っていう有名な数列___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____int main(){___NEXT_LINE____   //変数定義----------------------------------------------------------___NEXT_LINE____    int iNum;___NEXT_LINE____   int iFib_old = 0, iFib = 1;___NEXT_LINE____ int iFib_new;___NEXT_LINE_______NEXT_LINE____   //-------------------------------------------------------------------___NEXT_LINE_______NEXT_LINE____   std::cout << "フィボナッチ数列を表示する。" << std::endl;___NEXT_LINE____ std::cout << "何番目までの数値を表示しますか？" << std::endl;___NEXT_LINE____   std::cin >> iNum;___NEXT_LINE_______NEXT_LINE____   std::cout << "1番目：" << iFib_old << std::endl;___NEXT_LINE____   std::cout << "2番目：" << iFib << std::endl;___NEXT_LINE_______NEXT_LINE____   for (int i = 2; i <= iNum; i++){___NEXT_LINE____        iFib_new = iFib_old + iFib;___NEXT_LINE____     std::cout << i + 1 << "番目：" << iFib_new << std::endl;___NEXT_LINE____       iFib_old = iFib;___NEXT_LINE____        iFib = iFib_new;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-29 06:02:50,2015-05-29 07:56:50,
305,コラッツ問題（C++),コラッツの問題とは、ある自然数nに対し___NEXT_LINE_______NEXT_LINE____* nが偶数ならnを2で割る___NEXT_LINE____* nが奇数ならnを3倍して1を加える___NEXT_LINE_______NEXT_LINE____を繰り返すと最終的にnは1になるというものです。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____//コラッツ関数___NEXT_LINE____int collatz(int iNum){___NEXT_LINE____ int count = 0;___NEXT_LINE____  while (iNum != 1){___NEXT_LINE____      if (iNum % 2 == 0){___NEXT_LINE____         iNum /= 2;___NEXT_LINE____      }___NEXT_LINE____       else{___NEXT_LINE____           iNum = iNum * 3 + 1;___NEXT_LINE____        }___NEXT_LINE____       std::cout << iNum << "  " << std::endl;___NEXT_LINE____     count++;___NEXT_LINE____    }___NEXT_LINE____   return count;___NEXT_LINE____}___NEXT_LINE____int main(){___NEXT_LINE____   int iNum, count;___NEXT_LINE____    std::cout << "数値を入力：";___NEXT_LINE____  std::cin >> iNum;___NEXT_LINE____   count = collatz(iNum);___NEXT_LINE____  std::cout << "カウント数：" << count << std::endl;___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-29 07:48:51,2015-05-29 09:59:54,
306,べき剰余（C++),#解説(wikiより）___NEXT_LINE____[冪剰余のwiki](http://ja.wikipedia.org/wiki/冪剰余)___NEXT_LINE_______NEXT_LINE____正の整数 b （底）の e 乗（冪指数）を正の整数 m （法）で割った余りを、「m を法とした b の e 冪剰余」と呼ぶ。___NEXT_LINE_______NEXT_LINE____![べき剰余](http://upload.wikimedia.org/math/b/1/e/b1e2b35ef37da290df06431ae34cc79d.png)___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____例えば、b = 5, e = 3、m = 13 の場合、c は 5^3 を 13 で割った余りであるので、冪剰余は 8 となる。___NEXT_LINE_______NEXT_LINE____##途中で剰余を取る方法___NEXT_LINE_______NEXT_LINE____![](http://upload.wikimedia.org/math/3/f/2/3f29577ddf25f1a31a9889f534b3696b.png)___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE_______NEXT_LINE____typedef long long int Bignum;___NEXT_LINE_______NEXT_LINE____Bignum modpow(Bignum b, Bignum e, Bignum m){___NEXT_LINE____   Bignum result = 1;___NEXT_LINE____  while (e > 0){___NEXT_LINE____      if ((e & 1) == 1){___NEXT_LINE____          result = (result*b) % m;___NEXT_LINE____        }___NEXT_LINE____       e >>= 1;___NEXT_LINE____        b = (b*b) % m;___NEXT_LINE____  }___NEXT_LINE____   return result;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____  Bignum b,e,m,c;___NEXT_LINE____ std::cout << "正の整数："; std::cin >> b;___NEXT_LINE____    std::cout << "底の値："; std::cin >> e;___NEXT_LINE____ std::cout << "冪指数の値："; std::cin >> m;___NEXT_LINE____   c = modpow(b, e, m);___NEXT_LINE____    std::cout << "正の整数" << b << "（底）の " << e << " 乗（冪指数）を正の整数" << m << " （法）で割った余りは" << c << "である。" << std::endl;___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-29 07:53:04,2015-05-30 05:27:37,
307,私用,１．円の面積を入力すると半径を求めるプログラム___NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____#include<math.h>___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   double area,radius;___NEXT_LINE____ double pi = 3.1415926535;___NEXT_LINE____   printf("円の面積を入力：");___NEXT_LINE____ scanf("%lf",&area);___NEXT_LINE____ radius = sqrt(area/pi);___NEXT_LINE____ printf("半径=%lf\n",radius);___NEXT_LINE____  return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____2.箱数うんぬん___NEXT_LINE____```___NEXT_LINE____#include<stdio.h>___NEXT_LINE____int main(){___NEXT_LINE____    int num;___NEXT_LINE____    int box_num, fraction_num, sum_money;___NEXT_LINE____   printf("購入本数を入力：");___NEXT_LINE____ scanf("%d",&num);___NEXT_LINE____   box_num = num / 12;___NEXT_LINE____ fraction_num = num % 12;___NEXT_LINE____    if (box_num > 50){___NEXT_LINE____      printf("購入箱数%dより警告の上、システム終了\n",box_num);___NEXT_LINE____        return 0;___NEXT_LINE____   }___NEXT_LINE____   if (box_num > 10){___NEXT_LINE____      sum_money = box_num * 1080 + fraction_num * 108;___NEXT_LINE____    }___NEXT_LINE____   else{___NEXT_LINE____       sum_money = box_num * 1080 + fraction_num * 108 + 540;___NEXT_LINE____  }___NEXT_LINE____   printf("%d本購入の時,購入箱数%d,端数%d,代金%d,合計金額%d円\n",num,box_num,fraction_num,sum_money,sum_money);___NEXT_LINE____  return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-29 10:40:03,2015-05-29 10:56:10,
308,ラムダ式（C++),ラムダ式 (lambda expression, 無名関数(anonymous function, nameless function)、匿名関数)とは、関数を定義するための記法、文法です。___NEXT_LINE_______NEXT_LINE____構文なんだか気持ち悪いですね___NEXT_LINE_______NEXT_LINE____###　文法___NEXT_LINE____```___NEXT_LINE____int main(int argc, char *argv[]) {___NEXT_LINE____  []  // ラムダキャプチャー___NEXT_LINE____    ()  // パラメータ定義節___NEXT_LINE____ {}  // 複合ステートメント___NEXT_LINE____    ()  // 関数呼び出し式___NEXT_LINE____  ;___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____HelloWorldを表示させるサンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____    []{std::cout << "hello world!" << std::endl; }();___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____algorithm.hのfor_eachを使って偶数の数を表示してみた。___NEXT_LINE_______NEXT_LINE____for_eachと組み合わせるというのはポピュラーな使い方みたいですね。___NEXT_LINE____```___NEXT_LINE____#include <algorithm>___NEXT_LINE____#include <iostream>___NEXT_LINE____#include <vector>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____int main()___NEXT_LINE____{___NEXT_LINE____ vector<int> v;___NEXT_LINE____  for (int i = 1; i < 10; ++i) {___NEXT_LINE____      v.push_back(i);___NEXT_LINE____ }___NEXT_LINE____int evenCount = 0;___NEXT_LINE____ for_each(v.begin(), v.end(), [&evenCount](int n) {___NEXT_LINE____      cout << n;___NEXT_LINE____      if (n % 2 == 0) {___NEXT_LINE____           cout << " は偶数 " << endl;___NEXT_LINE____            ++evenCount;___NEXT_LINE____        }___NEXT_LINE____       else {___NEXT_LINE____          cout << " は奇数 " << endl;___NEXT_LINE____        }___NEXT_LINE____   });___NEXT_LINE____ cout << "偶数の数は " << evenCount << " 個です。" << endl;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____### ラムダ式の型類推機能___NEXT_LINE_______NEXT_LINE____ラムダ式の戻り値の型は、明示的に書かなくても、コンパイラによって推論される。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____//戻り値がある例___NEXT_LINE____auto f=[]{return 42;};___NEXT_LINE_______NEXT_LINE____//戻り値がvoidの例___NEXT_LINE____auto g = []{___NEXT_LINE____     for (int i = 0; i < 10; i++){___NEXT_LINE____           std::cout << i << std::endl;___NEXT_LINE____        }___NEXT_LINE____};___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____なお、複数のreturnがある場合には、それによって返される値の方が一致していない場合には、コンパイルエラーとなります。___NEXT_LINE_______NEXT_LINE____エラー例___NEXT_LINE____```___NEXT_LINE____auto f = [](double x){___NEXT_LINE____     if (x < 0){___NEXT_LINE____         return 0;___NEXT_LINE____       }___NEXT_LINE____       else{___NEXT_LINE____           //コンパイラに怒られる___NEXT_LINE____            return std::sqrt(x);___NEXT_LINE____        }___NEXT_LINE____   }___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____上記のコードは、0がint型である一方、sqrt(x)はdouble型なので、型類推に失敗してコンパイルエラーとなる。___NEXT_LINE_______NEXT_LINE____また、戻り値の型推論によって決定される型は、C++11でもC++14でも、参照やconstのつかない型になる。___NEXT_LINE____```___NEXT_LINE____auto deref = [] (int* p) { return *p; };  // 戻り値の型は int であって int& ではない___NEXT_LINE_______NEXT_LINE____```,jp,21,2015-05-30 07:32:05,2015-05-31 12:02:38,
309,僕のngメモ帳(ng-if),index.html___NEXT_LINE____```___NEXT_LINE____<!doctype html>___NEXT_LINE____<html ng-app="ngAnimate">___NEXT_LINE____  <head>___NEXT_LINE____    <link rel="stylesheet" type="text/css" href="animation.css">___NEXT_LINE____    <script src="http://code.angularjs.org/1.2.4/angular.min.js"></script>___NEXT_LINE____    <script src="http://code.angularjs.org/1.2.4/angular-animate.min.js"></script>___NEXT_LINE____  </head>___NEXT_LINE____  <body>___NEXT_LINE____    Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>___NEXT_LINE____    Show when checked:___NEXT_LINE____    <span ng-if="checked" class="animate-if">___NEXT_LINE____      I'm removed when the checkbox is unchecked.___NEXT_LINE____    </span>___NEXT_LINE____  </body>___NEXT_LINE____</html>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____animation.css___NEXT_LINE____```___NEXT_LINE____.animate-if {___NEXT_LINE____  background:white;___NEXT_LINE____  border:1px solid black;___NEXT_LINE____  padding:10px;___NEXT_LINE____}___NEXT_LINE____.animate-if.ng-enter, .animate-if.ng-leave {___NEXT_LINE____  -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;___NEXT_LINE____  transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;___NEXT_LINE____}___NEXT_LINE____.animate-if.ng-enter,___NEXT_LINE____.animate-if.ng-leave.ng-leave-active {___NEXT_LINE____  opacity:0;___NEXT_LINE____}___NEXT_LINE____.animate-if.ng-leave,___NEXT_LINE____.animate-if.ng-enter.ng-enter-active {___NEXT_LINE____  opacity:1;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-30 08:17:14,2015-05-30 08:17:14,
310,AngularJSのコントローラーテンプレート,AngularJSでControllerを使う場合のテンプレート___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____angular.module('controllerAsExample', [])___NEXT_LINE____  .controller('SettingsController1', [ '$scope',function($scope){___NEXT_LINE____       // begin code here___NEXT_LINE____}]);___NEXT_LINE____```,jp,1,2015-05-30 09:14:12,2015-05-30 09:14:12,
312,Intel Edison で音楽再生,音楽再生について___NEXT_LINE____EdisonでALSAのrepoの追加とインストール___NEXT_LINE____```___NEXT_LINE____echo -en "src/gz all http://repo.opkg.net/edison/repo/all\nsrc/gz edison http://repo.opkg.net/edison/repo/edison\nsrc/gz core2-32 http://repo.opkg.net/edison/repo/core2-32\n" >> /etc/opkg/base-feeds.conf___NEXT_LINE____opkg update && opkg install alsa-utils___NEXT_LINE____```___NEXT_LINE____したら___NEXT_LINE____```___NEXT_LINE____aplay -l___NEXT_LINE____```___NEXT_LINE____でサウンドデバイスを確認して___NEXT_LINE____```___NEXT_LINE____aplay /path/to/audio_file -D hw:[card number]___NEXT_LINE____```___NEXT_LINE____でOK___NEXT_LINE____※オーディオファイルは「SDカード経由」「OTGでEDISONをマウントしてコピーしてから、Edisonから内部ドライブをマウント」で渡す。___NEXT_LINE_______NEXT_LINE____もしくは___NEXT_LINE____```___NEXT_LINE____aplay -L___NEXT_LINE____aplay /path/to/audio/file -D sysdefault:CARD=DAC___NEXT_LINE____```___NEXT_LINE____※デバイスは使いたいものを___NEXT_LINE_______NEXT_LINE____※Yoctoイメージはedison-image-ww05-15、edison-image-ww18-15のどちらでも再生可能でした。,jp,2,2015-05-30 18:35:57,2015-06-01 14:10:28,
313,ジェネリックプログラミング～考察～,C++のジェネリックプログラミング定義：型を決定していないクラスや関数の断片を用意しておき、それらの組み合わせでプログラミグをする___NEXT_LINE_______NEXT_LINE____テンプレートを使って再利用可能なソースコードを書くことにより、記述量やコーディングの手間を省くことができる。___NEXT_LINE_______NEXT_LINE____例：とあるプログラムの中の型をi,クラスの数をj、アルゴリズムの数をkで表すとする。___NEXT_LINE_______NEXT_LINE____もしも、それら全てに対応するプログラムを書くとすると、i×j×k個の組み合わせに対応しないといけない。___NEXT_LINE_______NEXT_LINE____テンプレートを使って、___NEXT_LINE_______NEXT_LINE____* 型とコンテナ___NEXT_LINE____* 型とアルゴリズム___NEXT_LINE____* コンテナとアルゴリズム___NEXT_LINE_______NEXT_LINE____を分離すれば、それぞれ、型をiだけ、コンテナをjだけ、アルゴリズムをkだけ用意すればいい。___NEXT_LINE_______NEXT_LINE____つまりi+j+kで済む。,jp,21,2015-05-31 06:22:22,2015-05-31 06:22:22,
314,関数テンプレート(C++),関数テンプレート___NEXT_LINE_______NEXT_LINE____下記ソースコードの解説___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____template<calss T>___NEXT_LINE____```___NEXT_LINE____の部分は「Tは何らかの型」を示しており、intやSomeUserDefinedTypeなど、任意の型を指定することができる。___NEXT_LINE_______NEXT_LINE____このように、関数の型を明確にせず、差し替え可能な型として定義できるものが関数テンプレートである。___NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE_______NEXT_LINE____template <class T>___NEXT_LINE____T max(const T &x, const T &y){___NEXT_LINE____  return x < y ? y : x;___NEXT_LINE____}___NEXT_LINE____int main(){___NEXT_LINE____   double hoge, fuga;___NEXT_LINE____  double larger;___NEXT_LINE____  hoge = 3.1;___NEXT_LINE____ fuga = 2.2;___NEXT_LINE____ larger = max(hoge, fuga);___NEXT_LINE____   std::cout << "larger=" << larger << std::endl;___NEXT_LINE____  return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____引数の推論___NEXT_LINE_______NEXT_LINE____1.引数をキャストして、２つの引数の型を一致させる___NEXT_LINE____```___NEXT_LINE____max(static_cast<double>(4),2.2);___NEXT_LINE____```___NEXT_LINE____2.Tの型を指定する___NEXT_LINE____```___NEXT_LINE____max<double>(4,4.2);___NEXT_LINE____```,jp,21,2015-05-31 06:23:20,2015-06-12 08:56:33,
315,クラステンプレート（C＋＋）,## クラステンプレート___NEXT_LINE_______NEXT_LINE____特徴___NEXT_LINE_______NEXT_LINE____* 明示的な型指定: MyClass<int> myclass;___NEXT_LINE____* 関数テンプレートと違い、型推論は不可能.___NEXT_LINE____* structに対しても使える.___NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____template<class T>___NEXT_LINE____class Point{___NEXT_LINE____private:___NEXT_LINE____   T x_;___NEXT_LINE____   T y_;___NEXT_LINE____public:___NEXT_LINE____    Point(T x, T y) :x_(x), y_(y){}___NEXT_LINE____ Point(const Point &other) :x_(other.x_), y_(other.y_){}___NEXT_LINE____ void show(){___NEXT_LINE____        std::cout << "x=" << this->x_ << ",y=" << this->y_ << std::endl;___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE____int main(){___NEXT_LINE____  auto sum = 0.;___NEXT_LINE____  Point<double> p1(1.1,2.2),p2(3.3,4.4);___NEXT_LINE____  Point<double>p3(p2);___NEXT_LINE____    p1.show();___NEXT_LINE____  p3.show();___NEXT_LINE____  return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-31 06:23:44,2015-05-31 06:23:44,
316,メンバテンプレート(C++),## メンバテンプレート___NEXT_LINE_______NEXT_LINE____個別のメンバ関数をテンプレート化するもの。___NEXT_LINE_______NEXT_LINE____サンプルコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____class MyClass{___NEXT_LINE____  int _a;___NEXT_LINE____public:___NEXT_LINE____  MyClass(int a) :_a(a){}___NEXT_LINE____ template<class T>___NEXT_LINE____   void get(T &b)const{___NEXT_LINE____        b = _a;___NEXT_LINE____ }___NEXT_LINE____};___NEXT_LINE____int main(){___NEXT_LINE____  MyClass  myclass(12);___NEXT_LINE____   int getNum;___NEXT_LINE____ myclass.get(getNum);___NEXT_LINE____    std::cout << "getNum=" << getNum << std::endl;___NEXT_LINE____  return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-31 06:24:21,2015-05-31 06:24:21,
317,エアリアステンプレート(C++),## エアリアステンプレート___NEXT_LINE_______NEXT_LINE____辞書：エイリアスとは、偽名、別名、通称などの意味を持つ英単語。ITの分野では、ファイルなどの実体を別の名前で参照するためのシンボルといった意味で使われることが多い。___NEXT_LINE_______NEXT_LINE____テンプレートを使用して、型の別名を定義する機能。C++11から使用可能。(visual studio 2013 communityでは普通に使えた)___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE_______NEXT_LINE____template<class T>___NEXT_LINE____using Vec = std::vector < T > ;___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____ Vec<int> v;___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-31 06:25:58,2015-05-31 06:25:58,
318,素数の乱数を出すプログラム（C++）,2~99の素数２０個をvectorにいれて表示してみた___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<random>___NEXT_LINE____#include<vector>___NEXT_LINE____#include<cmath>___NEXT_LINE_______NEXT_LINE____bool isPrimeNumber(int rand){___NEXT_LINE____ int i,iLimit=sqrt(rand);___NEXT_LINE____    if (rand == 1)return false;___NEXT_LINE____ for (i=2; i <= iLimit; i++){___NEXT_LINE____        if (rand%i == 0)break;___NEXT_LINE____  }___NEXT_LINE____   if (i == iLimit + 1){___NEXT_LINE____       return true;___NEXT_LINE____    }___NEXT_LINE____   else{___NEXT_LINE____       return false;___NEXT_LINE____   }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   //変数------------------------------------------------------___NEXT_LINE____  int num=0;___NEXT_LINE____  std::vector<int>vec;___NEXT_LINE____    int temp;___NEXT_LINE____   //乱数生成機------------------------------------------------___NEXT_LINE____ std::random_device rnd;___NEXT_LINE____ std::mt19937 mt;___NEXT_LINE____    mt.seed(rnd());___NEXT_LINE____ std::uniform_int_distribution<>rand100(2, 99);___NEXT_LINE_______NEXT_LINE____  //乱数の中の素数をvectorに格納する--------------------------___NEXT_LINE____ while (num < 20){___NEXT_LINE____       temp = rand100(mt);___NEXT_LINE____     if (isPrimeNumber(temp)==true){___NEXT_LINE____         vec.push_back(temp);___NEXT_LINE____            num++;___NEXT_LINE____      }___NEXT_LINE____   }___NEXT_LINE____   //乱数を表示-------------------------------------------------___NEXT_LINE____    for (auto x : vec){___NEXT_LINE____     std::cout << x << std::endl;___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-05-31 11:28:26,2015-05-31 23:28:31,
320,可変長引数を取る関数,###Hello World!を表示するソースコード___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<stdarg.h>___NEXT_LINE____void DispLetters(int first, ...){___NEXT_LINE____   int letter = first;___NEXT_LINE____ va_list args;___NEXT_LINE____   va_start(args, first);___NEXT_LINE____  while (letter != 0){___NEXT_LINE____        putchar(letter);___NEXT_LINE____        letter = va_arg(args, int);___NEXT_LINE____ }___NEXT_LINE____   va_end(args);___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   DispLetters('H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\n', 0);___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____### 解説___NEXT_LINE_______NEXT_LINE____va_list という型の変数 args を宣言しています。これは可変個引数を使うために必要な変数です。この変数は次のマクロで初期化される。___NEXT_LINE____```___NEXT_LINE____va_start(args, first);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____表示に関しては___NEXT_LINE____```___NEXT_LINE____letter = va_arg(args, int);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____最後はargsの後始末___NEXT_LINE____```___NEXT_LINE____va_end(args);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____###要点___NEXT_LINE_______NEXT_LINE____仮引数はメモリ上に順番に並んでおり、直前の変数のアドレスがわかれば必然的にそのあとの引数のアドレスもわかる。___NEXT_LINE_______NEXT_LINE____va_listはポインタ型であり、va_startで初期化、va_argでポインタを進め、va_endでその変数をNULLにセットするという流れ。___NEXT_LINE_______NEXT_LINE____### 注意点___NEXT_LINE____引数はint型のサイズの倍数に拡張されて渡されている。signed charはsigned intに、unsigned charはunsigned intに拡張される。,jp,21,2015-05-31 12:59:30,2015-05-31 12:59:30,
321,Swiftで可変長引数,Swiftの可変長引数は配列で渡される。___NEXT_LINE_______NEXT_LINE____「配列が引数の関数」と「可変長引数の関数」の型は同じ。___NEXT_LINE____違いは呼び出し時の書き方___NEXT_LINE____```___NEXT_LINE____var variadic = { (nums:Int...)->Int in___NEXT_LINE____    var ret = 0;___NEXT_LINE____    for i in 0..<nums.count{___NEXT_LINE____        ret += nums[i]___NEXT_LINE____    }___NEXT_LINE____    return ret___NEXT_LINE____}___NEXT_LINE____var array = { (nums:[Int])->Int in___NEXT_LINE____    var ret = 0;___NEXT_LINE____    for i in 0..<nums.count{___NEXT_LINE____        ret += nums[i]___NEXT_LINE____    }___NEXT_LINE____    return ret___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____println("Variadic:\(variadic.dynamicType)") //Variadic:(Swift.Int, Swift.Array<Swift.Int>) -> Swift.Int___NEXT_LINE____let vsum = variadic(1,2,3,4)___NEXT_LINE____println(" Array  :\(array.dynamicType)") //Array  :(Swift.Int, Swift.Array<Swift.Int>) -> Swift.Int___NEXT_LINE____let asum = array([1,2,3,4])___NEXT_LINE____```___NEXT_LINE____[Swiftの関数の引数は、常に一つ](http://qiita.com/dankogai/items/46fedc447dd93d1e0fbc)___NEXT_LINE____の通り可変引数は同じ型が入った1つのタプルとして渡され、配列へ変換される。___NEXT_LINE____```___NEXT_LINE____func call<A,R>(f:A->R, a:A)->R {___NEXT_LINE____    return f(a)___NEXT_LINE____}___NEXT_LINE____call(array, [1,2,3,4])___NEXT_LINE____call(variadic, (1,2,3,4))___NEXT_LINE____// call(variadic, 1,2,3,4) // Error:不可。callを可変長引数に対応させても配列にしてしまうので不可___NEXT_LINE____```___NEXT_LINE____でも呼び出せる。___NEXT_LINE_______NEXT_LINE____可変長のタプルは作れないが、宣言時に要素数が決まれば任意の要素数のタプルは作れる___NEXT_LINE____```___NEXT_LINE____let items = (1,2,3,4)___NEXT_LINE____let fail :(Int...) = (1,2,3,4) //error: cannot create a variadic tuple___NEXT_LINE____```,jp,2,2015-06-01 09:44:02,2015-06-01 09:44:02,
323,C++の自作クラスstream流し,入門の本とか、プログラミングの授業とかでは自作クラスをpretty printするときにshow関数とか作るけど、C++の機能を使おう。___NEXT_LINE____```___NEXT_LINE____#include <ostream>___NEXT_LINE____friend std::ostream& operator << (std::ostream& os, const Any& obj)___NEXT_LINE____```___NEXT_LINE____を参考に、ostreamを受け流すfriend関数___NEXT_LINE____```___NEXT_LINE____#include <ostream>___NEXT_LINE____class TestClass{___NEXT_LINE____public:___NEXT_LINE____    friend std::ostream& operator << (std::ostream& os, const TestClass& obj){___NEXT_LINE____        return os << __TIME__;___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE____```___NEXT_LINE____としておけば___NEXT_LINE____```___NEXT_LINE____int main(int argc, char *argv[]){___NEXT_LINE____    cout << TestClass() << endl;___NEXT_LINE____    return EXIT_SUCCESS;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____とcoutにも出せるし、fstreamファイルにも出せる___NEXT_LINE____```___NEXT_LINE____#include <iostream>___NEXT_LINE____class Silly{___NEXT_LINE____public:___NEXT_LINE____    void show(){___NEXT_LINE____        std::cout << __TIME__ << std::endl;___NEXT_LINE____    }___NEXT_LINE____};___NEXT_LINE____```___NEXT_LINE____とかは なるべく使いたくない。___NEXT_LINE____返り値をstringにして、何種類かの出力形式に対応させれば使いやすい。,jp,2,2015-06-01 10:49:41,2015-06-01 10:57:14,
324,【効率化】git push origin,```___NEXT_LINE____git push origin___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____上記のように、pushする時にブランチ名を記入しない場合は今のブランチをpushするよう、次のコマンドで設定しましょう。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____git config --global push.default current___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____参照リンクは___NEXT_LINE____[http://stackoverflow.com/a/948397/1799322](http://stackoverflow.com/a/948397/1799322),jp,1,2015-06-02 03:10:41,2015-06-02 03:10:41,
325,データ構造「リスト」をC++で実装してみた,##STLのstringは偉大！！！！！___NEXT_LINE____```___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<string>___NEXT_LINE____#define person_____NEXT_LINE_______NEXT_LINE____class person{___NEXT_LINE____private:___NEXT_LINE____    std::string name;___NEXT_LINE____   std::string phone;___NEXT_LINE____  person* next;___NEXT_LINE____   person* head;___NEXT_LINE____public:___NEXT_LINE____    person(void);___NEXT_LINE____   person::person(std::string, std::string);___NEXT_LINE____   void person__ insert(void);___NEXT_LINE____ void person__ search(void);___NEXT_LINE____ void person__ delete_(void);___NEXT_LINE____    void person__ display(void);___NEXT_LINE____    void person__ release(void);___NEXT_LINE____};___NEXT_LINE_______NEXT_LINE____person::person(){___NEXT_LINE____ head = nullptr;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____person::person(std::string inputName, std::string inputPhone){___NEXT_LINE____  this->name = inputName;___NEXT_LINE____ this->phone = inputPhone;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void person__ person::insert(void){___NEXT_LINE____   std::string inputName, inputPhone;___NEXT_LINE____  std::cout << "氏名を入力してください。" << std::endl;___NEXT_LINE____   std::cin >> inputName;___NEXT_LINE____  std::cout << "電話番号を入力してください。" << std::endl;___NEXT_LINE____ std::cin >> inputPhone;___NEXT_LINE____ person* hoge_p = new person(inputName, inputPhone);___NEXT_LINE____ hoge_p->next = head;___NEXT_LINE____    head = hoge_p;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void person__ person::search(void){___NEXT_LINE____  std::string name;___NEXT_LINE____   person* p;___NEXT_LINE____  std::cout << "氏名を入力してください。" << std::endl;___NEXT_LINE____   std::cin >> name;___NEXT_LINE____   p = head;___NEXT_LINE____   while (p != nullptr){___NEXT_LINE____       if (p->name == name){___NEXT_LINE____           std::cout << "見つかりました。" << std::endl;___NEXT_LINE____           std::cout << "氏名：" << p->name << "電話番号:" << p->phone << std::endl;___NEXT_LINE____          return;___NEXT_LINE____     }___NEXT_LINE____       p = p->next;___NEXT_LINE____    }___NEXT_LINE____   std::cout << "見つかりませんでした" << std::endl;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void person__ person::delete_(void){___NEXT_LINE____    std::string name;___NEXT_LINE____   person *p, *prev;___NEXT_LINE____   std::cout << "氏名を入力してください。\n" << std::endl;___NEXT_LINE____ std::cin >> name;___NEXT_LINE____   ___NEXT_LINE____    prev = head;___NEXT_LINE____    p = head;___NEXT_LINE_______NEXT_LINE____   while (p != nullptr){___NEXT_LINE____       if (p->name == name){___NEXT_LINE____           if (p == head){___NEXT_LINE____             head = p->next;___NEXT_LINE____         }___NEXT_LINE____           else{___NEXT_LINE____               prev->next = p->next;___NEXT_LINE____           }___NEXT_LINE____           std::cout << "削除しました" << std::endl;___NEXT_LINE____         delete(p);___NEXT_LINE____          return;___NEXT_LINE____     }___NEXT_LINE____       prev = p;___NEXT_LINE____       p = p->next;___NEXT_LINE____    }___NEXT_LINE____   std::cout << "見つかりませんでした" << std::endl;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void person__ person::display(void){___NEXT_LINE____    person* p;___NEXT_LINE____  p = head;___NEXT_LINE____   while (p != NULL){___NEXT_LINE____      std::cout << "氏名:" << p->name << "\t電話：" << p->phone << std::endl;___NEXT_LINE____      p = p->next;___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void person__ person::release(void){___NEXT_LINE____  person *p, *temp;___NEXT_LINE____   p = head;___NEXT_LINE____   temp = head;___NEXT_LINE____    while (p != nullptr){___NEXT_LINE____       temp = p->next;___NEXT_LINE____     delete(p);___NEXT_LINE____      p = temp;___NEXT_LINE____   }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(void){___NEXT_LINE____   int res;___NEXT_LINE____    person p;___NEXT_LINE____   while (1){___NEXT_LINE____      std::cout << "1--追加\t2--削除\t3--探索\t4--表示\t0--終了" << std::endl;___NEXT_LINE____      std::cin >> res;___NEXT_LINE____        if (!res){___NEXT_LINE____          break;___NEXT_LINE____      }___NEXT_LINE____       switch (res)___NEXT_LINE____        {___NEXT_LINE____       case 1:___NEXT_LINE____         p.insert();___NEXT_LINE____         break;___NEXT_LINE____      case 2:___NEXT_LINE____         p.delete_();___NEXT_LINE____            break;___NEXT_LINE____      case 3:___NEXT_LINE____         p.search();___NEXT_LINE____         break;___NEXT_LINE____      case 4:___NEXT_LINE____         p.display();___NEXT_LINE____            break;___NEXT_LINE____      default:___NEXT_LINE____            break;___NEXT_LINE____      }___NEXT_LINE____   }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-06-02 04:36:44,2015-06-02 06:20:50,
326,iOSでStoryBoardを使わない時,TargetのMainInterfaceを指定してないで(今後Main.storyboardを使わないなら消して)___NEXT_LINE____```___NEXT_LINE____        window = UIWindow(frame: UIScreen.mainScreen().bounds)___NEXT_LINE____        window?.backgroundColor = .whiteColor()___NEXT_LINE____        window?.rootViewController = ViewController()___NEXT_LINE____        window?.makeKeyAndVisible()___NEXT_LINE____```___NEXT_LINE____を___NEXT_LINE____```___NEXT_LINE____func application(application: UIApplication, willFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -> Bool___NEXT_LINE____```___NEXT_LINE____内で実行,jp,2,2015-06-04 09:40:36,2015-06-04 09:40:36,
327,Swiftのassert,Swiftのassert系関数まとめ___NEXT_LINE____```___NEXT_LINE____//# -Onone                  Compile without any optimization___NEXT_LINE____//  fatalError,precondition,assert [Xcode Debug,PlayGround]___NEXT_LINE_______NEXT_LINE____//# -Ounchecked             Compile with optimizations and remove runtime safety checks___NEXT_LINE____//  fatalError,precondition [Xcode Release]___NEXT_LINE_______NEXT_LINE____//# -O                      Compile with optimizations___NEXT_LINE____//  fatalError___NEXT_LINE_______NEXT_LINE____var isTrue = true___NEXT_LINE____assert(isTrue, "#assert") //関数の仕様を明言、デバッグ時のみ判定が必要___NEXT_LINE____precondition(isTrue, "#precondition") // 通常使用範囲外、リリース時にも判定したい___NEXT_LINE____if !isTrue {___NEXT_LINE____    assertionFailure("#assertionFailure")___NEXT_LINE____    preconditionFailure("#preconditionFailure")___NEXT_LINE____    fatalError("#fatalError") // 未実装、呼び出し想定外、異常インデックスなど___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____実際には```fatalError ```と```assert ```を主に使うと思う。___NEXT_LINE____```___NEXT_LINE____/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc --help | grep optimization___NEXT_LINE____```___NEXT_LINE____で確認できる。___NEXT_LINE____Yosemiteから/usr/bin/swiftがあり パスも通ってる,jp,2,2015-06-04 21:22:15,2015-06-04 21:22:15,
328,forEachとは,forEachとはangularJSの標準APIに内にあるメソッドである。  ___NEXT_LINE____自動的に引数内のリスト、オブジェクトを指定し処理を書けば勝手に回してくれる便利なやつ。for文みたいなもんです。___NEXT_LINE____  ___NEXT_LINE____`angular.forEach("listもしくはオブジェクト名", function(hoge1, hoge2) {___NEXT_LINE____  // ...___NEXT_LINE____});___NEXT_LINE____`,jp,19,2015-06-06 11:11:04,2015-06-06 11:11:04,
329,ng-repeat,ng-repeatのポイントはループされるものはブロック単位でループされる___NEXT_LINE_______NEXT_LINE____index.html___NEXT_LINE____```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html ng-app="fadeInOut">___NEXT_LINE____<head>___NEXT_LINE____  <meta charset="UTF-8">___NEXT_LINE____  <link rel="stylesheet" type="text/css" href="style.css">___NEXT_LINE____    <script src="../angular.js"></script>___NEXT_LINE____   <script src="mains.js"></script> ___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____  <div ng-controller="fadeInOutController" >___NEXT_LINE____      <input type="text" size="30" ng-model="textBox" />___NEXT_LINE____      <br />___NEXT_LINE____      <div style="display:inline-block"  ng-repeat="loop in hogeArray">___NEXT_LINE____           <div class="box blue myimg show"></div>___NEXT_LINE____     </div>___NEXT_LINE____  </div>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____main.js___NEXT_LINE____```___NEXT_LINE____angular.module('fadeInOut', [])___NEXT_LINE____  .controller('fadeInOutController', ['$scope',function($scope){___NEXT_LINE____    $scope.textBox="3";___NEXT_LINE_______NEXT_LINE____    $scope.$watch("textBox",function(){___NEXT_LINE____      var loop=0;___NEXT_LINE____      $scope.hogeArray=[];___NEXT_LINE____      loop=parseInt($scope.textBox,10);___NEXT_LINE____      for(var i=0;i<loop;i++){___NEXT_LINE____        $scope.hogeArray.push(i);___NEXT_LINE____      }___NEXT_LINE____    });___NEXT_LINE____}]);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____style.css___NEXT_LINE____```___NEXT_LINE____.myimg  {___NEXT_LINE____  transform:translateY(20px);___NEXT_LINE____  -o-transform:translateY(20px);___NEXT_LINE____  -moz-transform:translateY(20px);___NEXT_LINE____  -webkit-transform:translateY(20px);___NEXT_LINE____  opacity: 0;___NEXT_LINE____  transition: all 1s ease ;___NEXT_LINE____  -o-transition: all 1s ease ;___NEXT_LINE____  -moz-transition: all 1s ease ;___NEXT_LINE____  -webkit-transition: all 1s ease ;___NEXT_LINE____}___NEXT_LINE____.myimg.show {___NEXT_LINE____  opacity: 1;___NEXT_LINE____  transform:translateY(0);___NEXT_LINE____  -o-transform:translateY(0);___NEXT_LINE____  -moz-transform:translateY(0);___NEXT_LINE____  -webkit-transform:translateY(0);___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____.box {___NEXT_LINE____    width:50px; height:50px;___NEXT_LINE____    margin:5px; padding:10px; border:1px solid black;___NEXT_LINE____    display: inline-block;___NEXT_LINE____} ___NEXT_LINE_______NEXT_LINE____.blue{___NEXT_LINE____ background-color:blue;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____.green{___NEXT_LINE____  background-color:green;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-06-07 08:22:48,2015-06-07 08:24:04,
330,C言語でディレクトリの取得,C言語でHome/Currentディレクトリやパスの取得方法メモ___NEXT_LINE____```___NEXT_LINE____#include <stdio.h> // printf___NEXT_LINE____#include <limits.h> //PATH_MAX___NEXT_LINE____#include <stdlib.h> // getenv___NEXT_LINE____#include <unistd.h> // getcwd___NEXT_LINE____#include <fcntl.h> // fcntl___NEXT_LINE_______NEXT_LINE____int main(int argc,char *argv[]){___NEXT_LINE____    char *c;___NEXT_LINE____    ___NEXT_LINE____    const char *name = "HOME";___NEXT_LINE____    c = getenv(name);___NEXT_LINE____    printf("HomeDirectory:%s\r\n",c);___NEXT_LINE____    ___NEXT_LINE____    char buff[PATH_MAX];___NEXT_LINE____    c = getcwd(buff, sizeof(buff)/sizeof(*buff)); // getcwd(nullptr, 0);___NEXT_LINE____    printf("CurrentDirectory:%s\r\n",c);___NEXT_LINE____    ___NEXT_LINE____    if( -1 != fcntl(stdout->_file, F_GETPATH, buff) ){___NEXT_LINE____        printf("File path:%s\r\n",buff);___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```,jp,2,2015-06-07 15:37:24,2015-06-07 15:37:24,
331,ケルビン⇔華氏,こんな感じかな___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____//ヘッダー-------------------------------------------------------------___NEXT_LINE____#include<stdio.h>___NEXT_LINE____#include<limits.h>___NEXT_LINE____#include<stdlib.h>___NEXT_LINE____#include<float.h>___NEXT_LINE____//関数-----------------------------------------------------------------___NEXT_LINE____//int型の入力___NEXT_LINE____int get_integer_num(const int max, const int min){___NEXT_LINE____ //機能：標準入力をint型に変換する。___NEXT_LINE____    //引数：戻り値の最大値,戻り値の最小値___NEXT_LINE____    //戻り値：入力した数字、エラー時は-1,EOFのときはEOF___NEXT_LINE____ char s[100];___NEXT_LINE____    char *endptr;___NEXT_LINE_______NEXT_LINE____   if (NULL == fgets(s, 100, stdin)){___NEXT_LINE____      if (feof(stdin)){//エラーの原因がEOFか切り分け___NEXT_LINE____          return EOF;___NEXT_LINE____     }___NEXT_LINE____       return INT_MIN;___NEXT_LINE____ }___NEXT_LINE____   if ('\n' == s[0]) return INT_MIN;___NEXT_LINE____   errno = 0;___NEXT_LINE____  const long t = strtol(s, &endptr, 10);___NEXT_LINE____  if (0 != errno || '\n' != *endptr || t < min || max < t)___NEXT_LINE____        return INT_MIN;___NEXT_LINE____ return (int)t;___NEXT_LINE____}___NEXT_LINE____//double型の入力___NEXT_LINE____double get_double_num(const double max, const double min){___NEXT_LINE____   //機能：標準入力をdouble型に変換する。___NEXT_LINE____ //引数：戻り値の最大値,戻り値の最小値___NEXT_LINE____    //戻り値：入力した数字、エラー時は-1,EOFのときはEOF___NEXT_LINE____ char s[100];___NEXT_LINE____    char *endptr;___NEXT_LINE_______NEXT_LINE____   if (NULL == fgets(s, 100, stdin)){___NEXT_LINE____      if (feof(stdin)){//エラーの原因がEOFか切り分け___NEXT_LINE____          return EOF;___NEXT_LINE____     }___NEXT_LINE____       return DBL_MAX;___NEXT_LINE____ }___NEXT_LINE____   if ('\n' == s[0]) return DBL_MIN;___NEXT_LINE____   errno = 0;___NEXT_LINE____  const double t = strtod(s, &endptr);___NEXT_LINE____    if (0 != errno || '\n' != *endptr || t < min || max < t)___NEXT_LINE____        return DBL_MIN;___NEXT_LINE____ return t;___NEXT_LINE____}___NEXT_LINE____//----------------------------------------------------------------------___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____   int hoge;___NEXT_LINE____   double kelvin, Fahrenheit;___NEXT_LINE____  printf("K（ケルビン）から華氏に変換したい場合は1を、華氏からKに変換したい場合は2を入力してください\n");___NEXT_LINE____    hoge = get_integer_num(INT_MAX, INT_MIN);___NEXT_LINE_______NEXT_LINE____   //ケルビン→華氏___NEXT_LINE____   if (hoge == 1){___NEXT_LINE____     printf("ケルビンを入力してください。\n");___NEXT_LINE____     kelvin = get_double_num(DBL_MAX, DBL_MIN);___NEXT_LINE____      Fahrenheit = (kelvin - 273.15)*1.8 + 32.0;___NEXT_LINE____      printf("%lfK→%lf°Fに変換されました\n",kelvin,Fahrenheit);___NEXT_LINE____   }___NEXT_LINE____   //華氏→ケルビン___NEXT_LINE____   else if (hoge == 2){___NEXT_LINE____        printf("華氏を入力してください。\n");___NEXT_LINE____       Fahrenheit = get_double_num(DBL_MAX, DBL_MIN);___NEXT_LINE____      kelvin = 5 / 9 * (Fahrenheit - 32) + 273.15;___NEXT_LINE____        printf("%lf°F→%lfKに変換されました\n",Fahrenheit,kelvin);___NEXT_LINE____   }___NEXT_LINE____   //その他___NEXT_LINE____   else{___NEXT_LINE____       printf("エラーが発生しました。終了します\n");___NEXT_LINE____   }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-06-08 13:08:16,2015-06-08 13:08:16,
332,C言語縛りで合計と分散と標準偏差と,某所でデーター入力を特定の文字で終了させたいとのご要望があったので実現しつつ、  ___NEXT_LINE____ありきたりなC言語縛りで合計と分散と標準偏差を求めるプログラムを書く。___NEXT_LINE_______NEXT_LINE____##オーバーフロー・アンダーフロー対策___NEXT_LINE____合計を求めるようなプログラムでは、その変数の型の最大値、最小値を超えるようなことが起こりうるので、対策が必要である。  ___NEXT_LINE____今回はちょっと手抜きでバッファの配列サイズで``int``型の最大最小値を割ったものを入力時の制限に使用している。___NEXT_LINE_______NEXT_LINE____10行目___NEXT_LINE____```___NEXT_LINE____#define INPUT_BUF_ARRAY_SIZE 512___NEXT_LINE____#define INPUT_NUM_LIM_MAX INT_MAX / INPUT_BUF_ARRAY_SIZE___NEXT_LINE____#define INPUT_NUM_LIM_MIN INT_MIN / INPUT_BUF_ARRAY_SIZE___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____58行目___NEXT_LINE____```___NEXT_LINE____for (i = 0; (i < arr_size) && (EOF != (buf = get_integer_num2('q', INPUT_NUM_LIM_MAX, INPUT_NUM_LIM_MIN))); i++) {___NEXT_LINE____```___NEXT_LINE____これなら全部足してもオーバーフローしない・・・はず。___NEXT_LINE_______NEXT_LINE____##特定の文字の入力でループ終了___NEXT_LINE____30行目の___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____if (exit_char == s[0]) return EOF;//qという文字が入力されたらEOFを返す___NEXT_LINE____```___NEXT_LINE____および58行目の___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____for (i = 0; (i < arr_size) && (EOF != (buf = get_integer_num2('q', INPUT_NUM_LIM_MAX, INPUT_NUM_LIM_MIN))); i++) {___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____が  ___NEXT_LINE____「特定の文字で終了させたい」  ___NEXT_LINE____という要望を満たすためにできた部分である。  ___NEXT_LINE____特定文字が入力されたらEOFを返すように``get_integer_num2``関数を作り、EOFが戻り値ではないことをループの継続条件にすれば要望は達成できる。___NEXT_LINE_______NEXT_LINE____どういうことか。仮に___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____q___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____と入力した時を考えよう。30行目の時点では、fgetsによって標準入力から文字列として入力を受け、配列sにかきこんである。つまり``s``は___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____s[0] : q___NEXT_LINE____s[1] : \n___NEXT_LINE____s[2] : \0___NEXT_LINE____```___NEXT_LINE____となっている。したがって入力が終了条件かを調べるには___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____exit_char == s[0]___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____とすれば良い。___NEXT_LINE_______NEXT_LINE____##数値入力___NEXT_LINE____数値入力に``scanf``系の関数を用いるのは型に格納できない入力があった時に対応できないので論外です。  ___NEXT_LINE____[http://codegarage.edisonthk.com/snippet/39](http://codegarage.edisonthk.com/snippet/39)  ___NEXT_LINE____参照のこと。___NEXT_LINE_______NEXT_LINE____##配列の合計___NEXT_LINE____配列の合計を求めるには___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____int calc_sum(const int* arr, const size_t arr_num) {___NEXT_LINE____    int sum = 0;___NEXT_LINE____    for (size_t i = 0; i < arr_num; i++) {___NEXT_LINE____      sum += arr[i];___NEXT_LINE____  }___NEXT_LINE____   return sum;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____のような関数を作れば良い。___NEXT_LINE_______NEXT_LINE____##平均差と分散の導出___NEXT_LINE____平均差と分散の導出は___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____double calc_mean_diff_variance(double* mean_diff_arr, size_t mean_diff_size, const int* input_arr, size_t input_arr_size, const double average) {___NEXT_LINE____   const size_t loop_lim = (mean_diff_size > input_arr_size) ? input_arr_size : mean_diff_size;___NEXT_LINE____    double re = 0;___NEXT_LINE____  for (size_t i = 0; i < loop_lim; i++) {___NEXT_LINE____     mean_diff_arr[i] = input_arr[i] - average;___NEXT_LINE____      re += mean_diff_arr[i] * mean_diff_arr[i];___NEXT_LINE____  }___NEXT_LINE____   return re;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____のようにすればいいだろう。___NEXT_LINE_______NEXT_LINE____##サンプルコード___NEXT_LINE____で、main関数をつけた実験コード。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____#include <stdio.h>___NEXT_LINE____#include <stdlib.h>___NEXT_LINE____#include <limits.h>//in gcc___NEXT_LINE____#include <errno.h>//in gcc___NEXT_LINE____#include <math.h>___NEXT_LINE_______NEXT_LINE____#ifndef __cplusplus___NEXT_LINE____#define nullptr NULL___NEXT_LINE____#endif___NEXT_LINE____#define INPUT_BUF_ARRAY_SIZE 512___NEXT_LINE____#define INPUT_NUM_LIM_MAX INT_MAX / INPUT_BUF_ARRAY_SIZE___NEXT_LINE____#define INPUT_NUM_LIM_MIN INT_MIN / INPUT_BUF_ARRAY_SIZE___NEXT_LINE____#ifndef _countof___NEXT_LINE____#define _countof(_Array) (sizeof(_Array) / sizeof(_Array[0]))___NEXT_LINE____#endif //_countof___NEXT_LINE____int get_integer_num2(const char exit_char, const int max, const int min) {___NEXT_LINE____   //機能：標準入力を数字に変換する。___NEXT_LINE____  //引数：戻り値の最大値,戻り値の最小値___NEXT_LINE____    //戻り値：入力した数字、エラー時はINT_MIN, EOF or qが入力されたときはEOF___NEXT_LINE____ char s[100];___NEXT_LINE____    char *endptr;___NEXT_LINE_______NEXT_LINE____   if (nullptr == fgets(s, 100, stdin)) {___NEXT_LINE____      if (feof(stdin)) {//エラーの原因がEOFか切り分け___NEXT_LINE____         return EOF;//EOF(Ctrl + Dとかが割り当てられてるはず)が入力されたらEOFを返す___NEXT_LINE____        }___NEXT_LINE____       return INT_MIN;___NEXT_LINE____ }___NEXT_LINE____   if ('\n' == s[0]) return INT_MIN;___NEXT_LINE____   if (exit_char == s[0]) return EOF;//qという文字が入力されたらEOFを返す___NEXT_LINE____ errno = 0;___NEXT_LINE____  const long t = strtol(s, &endptr, 10);___NEXT_LINE____  if (0 != errno || '\n' != *endptr || t < min || max < t)___NEXT_LINE____        return INT_MIN;___NEXT_LINE____ return (int)t;___NEXT_LINE____}___NEXT_LINE____int calc_sum(const int* arr, const size_t arr_num) {___NEXT_LINE____ int sum = 0;___NEXT_LINE____    for (size_t i = 0; i < arr_num; i++) {___NEXT_LINE____      sum += arr[i];___NEXT_LINE____  }___NEXT_LINE____   return sum;___NEXT_LINE____}___NEXT_LINE____double calc_mean_diff_variance(double* mean_diff_arr, size_t mean_diff_size, const int* input_arr, size_t input_arr_size, const double average) {___NEXT_LINE____   const size_t loop_lim = (mean_diff_size > input_arr_size) ? input_arr_size : mean_diff_size;___NEXT_LINE____    double re = 0;___NEXT_LINE____  for (size_t i = 0; i < loop_lim; i++) {___NEXT_LINE____     mean_diff_arr[i] = input_arr[i] - average;___NEXT_LINE____      re += mean_diff_arr[i] * mean_diff_arr[i];___NEXT_LINE____  }___NEXT_LINE____   return re;___NEXT_LINE____}___NEXT_LINE____size_t input(int* arr, size_t arr_size) {___NEXT_LINE____    size_t i;//データの個数___NEXT_LINE____   puts("データを入力してください。qを入力すると終了します");___NEXT_LINE____  int buf;___NEXT_LINE____    //配列の要素数を超えないか、get_integer_num2の戻り値がEOFでない間入力を受ける___NEXT_LINE____   for (i = 0; (i < arr_size) && (EOF != (buf = get_integer_num2('q', INPUT_NUM_LIM_MAX, INPUT_NUM_LIM_MIN))); i++) {___NEXT_LINE____      arr[i] = buf;___NEXT_LINE____   }___NEXT_LINE____   return i;___NEXT_LINE____}___NEXT_LINE____int main(void) {___NEXT_LINE____  int input_buf[INPUT_BUF_ARRAY_SIZE] = { 0 };___NEXT_LINE____    const size_t arr_size = input(input_buf, _countof(input_buf));___NEXT_LINE____  const int sum = calc_sum(input_buf, arr_size);___NEXT_LINE____  const double average = (double)sum / arr_size;___NEXT_LINE____  double mean_diff[INPUT_BUF_ARRAY_SIZE] = { 0 };___NEXT_LINE____ double variance = calc_mean_diff_variance(mean_diff, _countof(mean_diff), input_buf, arr_size, average) / arr_size;___NEXT_LINE____ double standard_deviation = sqrt(variance);___NEXT_LINE_______NEXT_LINE____ printf(___NEXT_LINE____     "合計 : %d\n"___NEXT_LINE____     "平均 : %f\n"___NEXT_LINE____     "データの個数: %ld"___NEXT_LINE____       "分散 : %f\n"___NEXT_LINE____     "標準偏差 : %f\n",___NEXT_LINE____      sum,___NEXT_LINE____        average,___NEXT_LINE____        arr_size,___NEXT_LINE____       variance,___NEXT_LINE____       standard_deviation___NEXT_LINE____      );___NEXT_LINE____  return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,7,2015-06-08 16:50:50,2015-06-09 03:06:36,
333,線型探索(C++),特にコメントすることがない___NEXT_LINE____```___NEXT_LINE____//線型探索___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____//検索したい値___NEXT_LINE____constexpr auto FIGURE=7;___NEXT_LINE____int main(){___NEXT_LINE____   std::vector<int>vec = { 3, 10, 4, 5, 6, 1, 8, 7, 9, 2 };___NEXT_LINE____    for (auto x : vec){___NEXT_LINE____     if (FIGURE == x){___NEXT_LINE____           std::cout << "見つかりました" << std::endl;___NEXT_LINE____            return 0;___NEXT_LINE____       }___NEXT_LINE____   }___NEXT_LINE____   std::cout << "見つかりませんでした" << std::endl;___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-06-09 01:55:32,2015-06-09 01:55:32,
334,二分探索(C++),ソースコードはいつもどおりテキトー___NEXT_LINE_______NEXT_LINE____関数として作ったほうが良かったけどめんｄ・・・ていうかalgorithmのfindとか使えば簡単なんじゃないかな（ぉぃ___NEXT_LINE____```___NEXT_LINE____//2分探索___NEXT_LINE____#include<iostream>___NEXT_LINE____#include<vector>___NEXT_LINE____#include<algorithm>___NEXT_LINE____//検索したい値___NEXT_LINE____constexpr auto FIGURE=7;___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____ std::vector<int>iVec = { 3, 10, 4, 5, 6, 1, 8, 7, 9, 2 };___NEXT_LINE____   auto isFind = false;___NEXT_LINE____    int lowId, midId, highId;___NEXT_LINE____   std::sort(iVec.begin(),iVec.end());___NEXT_LINE____ std::cout << "探索対象の値：";___NEXT_LINE____ for (auto x : iVec){___NEXT_LINE____        std::cout << x << " ";___NEXT_LINE____  }___NEXT_LINE____   std::cout << std::endl;___NEXT_LINE____ lowId = 0;___NEXT_LINE____  highId = iVec.size();___NEXT_LINE____   while (lowId<=highId){___NEXT_LINE____      midId = (lowId + highId) / 2;___NEXT_LINE____       std::cout << "lowId=" << lowId << ",midId=" << midId << ",highId=" << highId << std::endl;___NEXT_LINE____      if (iVec[midId] == FIGURE){___NEXT_LINE____         std::cout << "見つかりました" << std::endl;___NEXT_LINE____            isFind = true;___NEXT_LINE____          break;___NEXT_LINE____      }___NEXT_LINE____       else if (iVec[midId] < FIGURE){___NEXT_LINE____         lowId = midId + 1;___NEXT_LINE____      }___NEXT_LINE____       else{___NEXT_LINE____           highId = midId - 1;___NEXT_LINE____     }___NEXT_LINE____   }___NEXT_LINE_______NEXT_LINE____   if (isFind){___NEXT_LINE____        std::cout << "値" << FIGURE << "は" << midId+1 << "番目に見つかりました" << std::endl;___NEXT_LINE____  }___NEXT_LINE____   else{___NEXT_LINE____       std::cout << "値" << FIGURE << "は見つかりませんでした" << std::endl;___NEXT_LINE____   }___NEXT_LINE____   return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-06-09 02:13:58,2015-06-09 02:36:03,
335,ハッシュ法考察,ハッシュ法について___NEXT_LINE____ハッシュ法とは、キー値からハッシュ関数によって「ハッシュ値」を求め、ハッシュ値をバケット（bucket：ハッシュテーブルの各要素）に結びつけるデータ構造を生成し、高速な探索を実現する手法です。ハッシュ法を用いることで、データの数に関わらず挿入・探索・削除の操作を実質的に「O(1)」で行うことができます。___NEXT_LINE_______NEXT_LINE____ハッシュ関連の用語は以下の通りです。___NEXT_LINE_______NEXT_LINE____* ハッシュ値(hash value)：ハッシュ関数の返す値。キーを格納する配列の添え字。___NEXT_LINE_______NEXT_LINE____* ハッシュ表(hash table)：データを格納する配列。___NEXT_LINE_______NEXT_LINE____* バケット(bucket)：ハッシュ表の各要素。___NEXT_LINE_______NEXT_LINE____* 衝突(collision)：異なったキーの値から同じハッシュ値が得られること。___NEXT_LINE_______NEXT_LINE____オープンアドレス法とチェイン法がある。,jp,21,2015-06-09 02:17:06,2015-06-09 16:57:18,
336,クイックソート,```___NEXT_LINE____#include<iostream>___NEXT_LINE____using namespace std;___NEXT_LINE_______NEXT_LINE____void swap(int x[], int i, int j){___NEXT_LINE____  int temp;___NEXT_LINE____   temp = x[i];___NEXT_LINE____    x[i] = x[j];___NEXT_LINE____    x[j] = temp;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void showData(int x[], int n){___NEXT_LINE____ for (auto i = 0; i < n; i++){___NEXT_LINE____       cout << x[i] << " ";___NEXT_LINE____    }___NEXT_LINE____   cout << endl;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____void qSort(int x[], int left, int right){___NEXT_LINE____ int i, j;___NEXT_LINE____   int pivot;___NEXT_LINE_______NEXT_LINE____  i = left;//ソートする配列の一番小さな要素の添字___NEXT_LINE____   j = right;//ソートする配列の一番大きい要素の添字___NEXT_LINE____  pivot = x[(left + right) / 2];//基準値を配列の中央付近に取る___NEXT_LINE_______NEXT_LINE____  while (1){___NEXT_LINE____      while (x[i] < pivot)//pivotより大きい値が出るまでiを増加させる___NEXT_LINE____           i++;___NEXT_LINE____        while (pivot < x[j])//pivotより小さい値が出るまでjを減少させる___NEXT_LINE____           j--;___NEXT_LINE____        if (i >= j)//i>=jならループを抜ける___NEXT_LINE____          break;___NEXT_LINE____      swap(x, i, j);//i番目とj番目を交換___NEXT_LINE____      i++; //次のデータ___NEXT_LINE____        j--;___NEXT_LINE____    }___NEXT_LINE____   if (left < i - 1)___NEXT_LINE____       qSort(x, left, i - 1);___NEXT_LINE____  if (j + 1 < right)___NEXT_LINE____      qSort(x, j + 1, right);___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(){___NEXT_LINE____ int x[] = { 6, 3, 1, 7, 0, 4, 8, 5, 2, 9 };___NEXT_LINE____ auto n = sizeof(x) / sizeof(x[0]);___NEXT_LINE____  cout << "ソート前" << endl;___NEXT_LINE____ showData(x, n);___NEXT_LINE_______NEXT_LINE____ qSort(x, 0, n - 1);___NEXT_LINE_______NEXT_LINE____ cout << "ソート後" << endl;___NEXT_LINE____ showData(x, n);___NEXT_LINE____ return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-06-09 03:44:43,2015-06-09 03:44:43,
337,いろいろなPHPUnitテスト,参照リンク [https://phpunit.de/manual/current/en/appendixes.assertions.html](https://phpunit.de/manual/current/en/appendixes.assertions.html)___NEXT_LINE_______NEXT_LINE____* assertArrayHasKey('foo', array('bar' => 'baz'))___NEXT_LINE____* assertContains(4, array(1, 2, 3))___NEXT_LINE____* assertCount(0, array('foo'))___NEXT_LINE____* assertEmpty(array('foo'))___NEXT_LINE____* assertObjectHasAttribute('someAttr',$obj);,jp,1,2015-06-09 03:44:48,2015-06-09 03:45:19,
338,MySQLでコラムの追加、変更、削除のコマンド,新しいコラムを追加___NEXT_LINE____```___NEXT_LINE____ALTER TABLE table_name___NEXT_LINE____  ADD (column_1 column-definition,___NEXT_LINE____       column_2 column-definition,___NEXT_LINE____       ...___NEXT_LINE____       column_n column_definition);___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____既存のコラムを編集___NEXT_LINE____```___NEXT_LINE____ALTER TABLE table_name___NEXT_LINE____  MODIFY column_name column_type;___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____コラムを削除___NEXT_LINE____```___NEXT_LINE____ALTER TABLE table_name___NEXT_LINE____  DROP COLUMN column_name;___NEXT_LINE____```,jp,1,2015-06-09 04:16:19,2015-06-09 04:16:19,
339,jQueryのajaxサンプル,jQueryのajaxサンプルコード。___NEXT_LINE____```___NEXT_LINE____$.ajax({___NEXT_LINE____    url: "/json/product/search?name="+encodeURIComponent(productName),___NEXT_LINE____    method: 'GET',___NEXT_LINE____    success: function(data) {___NEXT_LINE____        cb(true, data);___NEXT_LINE____    },___NEXT_LINE____    error: function(xhr, status, err) {___NEXT_LINE____        cb(false);  ___NEXT_LINE____    }___NEXT_LINE____})___NEXT_LINE____```,jp,1,2015-06-09 08:12:08,2015-06-09 08:12:08,
340,canvasで円を描く,```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title>test</title>___NEXT_LINE____</head>___NEXT_LINE____<body>___NEXT_LINE____<canvas id="cv" width="360" height="240"></canvas>___NEXT_LINE____<script type="text/javascript">___NEXT_LINE____    var ctx=document.getElementById("cv").getContext("2d");___NEXT_LINE____    ctx.beginPath();___NEXT_LINE____    ctx.arc(120,120,100,0,Math.PI*2,true);___NEXT_LINE____    ctx.fillStyle='rgb(255,0,0)';___NEXT_LINE____    ctx.fill();___NEXT_LINE____    ctx.stroke();___NEXT_LINE____</script>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____円や円弧を描くためには、arcメソッドを使います。___NEXT_LINE____```___NEXT_LINE____ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)___NEXT_LINE____```___NEXT_LINE____引数は以下のとおり___NEXT_LINE_______NEXT_LINE____* x:円の中心のx座標___NEXT_LINE_______NEXT_LINE____* y:円の中心のy座標___NEXT_LINE_______NEXT_LINE____* radius:円の半径___NEXT_LINE_______NEXT_LINE____* startAngle:円弧を描き始める角度。x軸の向き（右方向）からみて右回りの角度をラジアンで指定。___NEXT_LINE_______NEXT_LINE____* endAngle:円弧を描き終える角度。x軸の向き（右方向）からみて右回りの角度ラジアンで指定。___NEXT_LINE_______NEXT_LINE____* anticlockwise:円弧を描く向きを真偽値で指定。trueを指定すると反時計回り（左回り）に、falseを指定すると時計回り（右回り）で円弧を描きます。,jp,21,2015-06-10 03:11:16,2015-06-10 03:16:02,
341,canvasの色を指定する,枠線の色を指定する場合___NEXT_LINE____```___NEXT_LINE____ctx.strokeStyle = color___NEXT_LINE____```___NEXT_LINE____塗りつぶす場合___NEXT_LINE____```___NEXT_LINE____ctx.fillStyle = color___NEXT_LINE____```___NEXT_LINE____colorに指定する色はCSSで指定するフォーマットに対応しています。___NEXT_LINE_______NEXT_LINE____例___NEXT_LINE____```___NEXT_LINE____ctx.fillStyle = 'rgba(155, 187, 89, 0.7)'; // 緑___NEXT_LINE____```___NEXT_LINE____第４引数は透過度,jp,21,2015-06-10 03:21:19,2015-06-10 03:21:19,
342,Canvasのタッチイベント,canvasのtouchイベントです。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____<!DOCTYPE html>___NEXT_LINE____<html>___NEXT_LINE____<meta charset="utf-8">___NEXT_LINE____<body>___NEXT_LINE____    <canvas style="margin-top: 400px;" width="400" height="400" id="cvs"></canvas>___NEXT_LINE____<script type="text/javascript">___NEXT_LINE____    var canvas = document.getElementById("cvs");___NEXT_LINE_______NEXT_LINE____    var ctx = canvas.getContext("2d");___NEXT_LINE____    ctx.fillStyle = "red";___NEXT_LINE____    ctx.fillRect(0,0,canvas.width, canvas.height);___NEXT_LINE_______NEXT_LINE____    console.log(canvas.width);___NEXT_LINE_______NEXT_LINE____    canvas.addEventListener("touchstart", function(e) {___NEXT_LINE____        e.preventDefault();___NEXT_LINE____        var canvas_x = e.targetTouches[0].pageX;___NEXT_LINE____        var canvas_y = e.targetTouches[0].pageY;___NEXT_LINE_______NEXT_LINE____        console.log("START: "+canvas_x + " , "+canvas_y);___NEXT_LINE____    },false);___NEXT_LINE_______NEXT_LINE____    canvas.addEventListener("touchmove", function(e) {___NEXT_LINE____        e.preventDefault();___NEXT_LINE____        var canvas_x = e.targetTouches[0].pageX;___NEXT_LINE____        var canvas_y = e.targetTouches[0].pageY;___NEXT_LINE_______NEXT_LINE____        console.log("MOVE: "+canvas_x + " , "+canvas_y);___NEXT_LINE____    },false);___NEXT_LINE_______NEXT_LINE____    canvas.addEventListener("touchend", function(e) {___NEXT_LINE____        e.preventDefault();___NEXT_LINE____        console.log("END: "+canvas_x + " , "+canvas_y);___NEXT_LINE____    },false);___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____</script>___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____</body>___NEXT_LINE____```,jp,1,2015-06-10 13:39:54,2015-06-10 13:39:54,
343,AngularJSの$watch,AngularJS の強力なデータバインドを支える仕組みの１つ___NEXT_LINE_______NEXT_LINE____$watch を使えば、監視（Observe）したいオブジェクトやプロパティが変化したときに実行する処理（リスナー）を容易に記述できる。___NEXT_LINE_______NEXT_LINE____$watch による変更検知処理は、ポーリング的（一定間隔で頻繁）に実施されるのではなく、以下のイベントが生じたときに $digest サイクル（または $digest ループ）と呼ばれる処理が実行され、その中で実行される。___NEXT_LINE_______NEXT_LINE____* ナビゲーション   :ブラウザの location 変更時___NEXT_LINE_______NEXT_LINE____* ネットワーク:$http, $resource レスポンス受信時___NEXT_LINE_______NEXT_LINE____* DOM イベント:ng-click, ng-mouseover などの実行時___NEXT_LINE_______NEXT_LINE____* タイマー:$timeout によるタイマー処理の実行時___NEXT_LINE_______NEXT_LINE____構文___NEXT_LINE____```___NEXT_LINE____$watch(watchExpression, listener, objectEquality)___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____第１引数のwatchExpressionは監視したいオブジェクトや値（を返す function）___NEXT_LINE_______NEXT_LINE____第２引数のlistenerはwatchExpression で監視しているオブジェクトや値が変化したときに実行するリスナー function ___NEXT_LINE_______NEXT_LINE____第３引数のobjectEqualityは注意が必要だ。watchExpressionが文字列であった場合、変更が常に検知される。しかし、watchExpressionがオブジェクトの場合は、この第３引数を省略（false）にしている場合はreference(同じオブジェクトを参照しているか）で比較されることになり、オブジェクトのプロパティ値が変わろうと配列の中身が変わろうと、変化とは扱われない。第３引数をtrueにすると、オブジェクトのプロパティまで比較できるが、性能面っやメモリ消費の点で不利になる。,jp,21,2015-06-11 00:51:13,2015-06-11 02:34:58,
344,AngularJSの$apply,# データバインドが使えない！？___NEXT_LINE____$watch処理を使ってる時、そのような場合があります。___NEXT_LINE_______NEXT_LINE____###[$watchについての記事](http://codegarage.edisonthk.com/snippet/343)___NEXT_LINE_______NEXT_LINE____$digest（$watch）処理が始まるきっかけは以下のとおりである___NEXT_LINE_______NEXT_LINE____* ナビゲーション :ブラウザの location 変更時___NEXT_LINE_______NEXT_LINE____* ネットワーク:$http, $resource レスポンス受信時___NEXT_LINE_______NEXT_LINE____* DOM イベント:ng-click, ng-mouseover などの実行時___NEXT_LINE_______NEXT_LINE____* タイマー:$timeout によるタイマー処理の実行時___NEXT_LINE_______NEXT_LINE____AngularJS組み込みのservice（＄httpや$timeoutなど）やdirectives(ng-clickなど）を使わない（使えない）とき、$applyを自分で記述する必要がある。___NEXT_LINE_______NEXT_LINE____AngularJS と無関係なところ（jQuery など）で XHR 通信して受け取ったデータをモデルに反映した場合や、あるいは datepicker などのプラグインからモデルに値を反映した場合は、そのモデルと UI が ng-model や ng-bind などでバインドされていたとしても、それだけでは即時には反映されない。反映されるのを、次の $digest サイクルが起こるまでただ待つことになる。___NEXT_LINE_______NEXT_LINE____$digestサイクルを起こす役割が$applyである。,jp,21,2015-06-11 00:52:07,2015-06-11 02:35:13,
345,setIntervalと$intervalの違い,参考記事___NEXT_LINE_______NEXT_LINE____* [$applyについての記事](http://codegarage.edisonthk.com/snippet/344)___NEXT_LINE_______NEXT_LINE____* [$watchについての記事](http://codegarage.edisonthk.com/snippet/343)___NEXT_LINE_______NEXT_LINE____AngularJS標準APIの$intervalを使用してる例___NEXT_LINE____```___NEXT_LINE____var update = function() {___NEXT_LINE____  $scope.now = new Date();//時間を更新___NEXT_LINE____};___NEXT_LINE____update();___NEXT_LINE____$interval(update, 1000);___NEXT_LINE____```___NEXT_LINE____この場合、１秒毎に日時が更新される___NEXT_LINE_______NEXT_LINE____次にsetIntervalを利用した場合___NEXT_LINE____```___NEXT_LINE____var update = function() {___NEXT_LINE____  $scope.now = new Date();//時間を更新___NEXT_LINE____};___NEXT_LINE____update();___NEXT_LINE____setInterval(update, 1000);___NEXT_LINE____```___NEXT_LINE____$digestループが起こらない限り、反映されない。___NEXT_LINE_______NEXT_LINE____$digestサイクルを起こす役割が$applyであるため、___NEXT_LINE____```___NEXT_LINE____var update = function() {___NEXT_LINE____  $scope.now = new Date();//時間を更新___NEXT_LINE____};___NEXT_LINE____update();___NEXT_LINE____setInterval(function() {___NEXT_LINE____  $scope.$apply(update);___NEXT_LINE____}, 1000);___NEXT_LINE____```___NEXT_LINE____setIntervalに$applyを付ければ、１秒ごとに反映されるようになる。,jp,21,2015-06-11 02:32:42,2015-06-11 02:33:36,
346,javaScript関連の専門用語,###**JavaScript**___NEXT_LINE____プログラミング言語のひとつである。オブジェクト指向のスクリプト言語。行環境が主にウェブブラウザに実装され、動的なウェブサイト構築や、リッチインターネットアプリケーションなど高度なユーザインタフェースの開発に用いられる。___NEXT_LINE_______NEXT_LINE____###**XML**___NEXT_LINE____Extensible Markup Language（エクステンシブル マークアップ ランゲージ）は、個別の目的に応じたマークアップ言語作成のため、汎用的に使うことができる仕様、および仕様により策定される言語の名称である。一般的にXML（エックスエムエル）と略称で呼ばれる。JISによる訳語は「拡張可能なマーク付け言語」。(wikiより)___NEXT_LINE_______NEXT_LINE____XMLにより統一的な記法を用いながら独自の意味や構造を持ったマークアップ言語を作成することができるため、ソフトウェア間の通信・情報交換に用いるデータ形式や、様々な種類のデータを保存するためのファイルフォーマットなどの定義に使われている。___NEXT_LINE_______NEXT_LINE____* htmlとxmlの違い___NEXT_LINE_______NEXT_LINE____htmlの利点：固定的で変化のない処理に向いてる。___NEXT_LINE_______NEXT_LINE____xmlの利点：論理的な構造・内容・属性を表現するのに便利、柔軟性が高い。___NEXT_LINE_______NEXT_LINE____![html](http://www.cybertech.co.jp/xml/images/xmlxmldb/serial_xmlbeginner4.bmp)___NEXT_LINE_______NEXT_LINE____###**JSON**___NEXT_LINE____「JavaScript Object Notation」の略で「ジェイソン」。テキストフォーマットの一種です。シンプルで軽量です。___NEXT_LINE_______NEXT_LINE____その名前の由来の通りJSONはJavaScriptのオブジェクト表記構文のサブセットとなっており、XMLと比べると簡潔に構造化されたデータを記述することができるため、記述が容易で人間が理解しやすいデータフォーマットと言えます。___NEXT_LINE_______NEXT_LINE____※サブセット：全体に対する一部分のことである。例えば、システム全体に対するインターフェース部分や、本来の規格に関する限定部分、あるいはソフトウエアの機能を限定して使えるようにしたものなどのことを指す。___NEXT_LINE_______NEXT_LINE____###**AJAX**___NEXT_LINE____正式名称は「Asynchronous JavaScript ＋ XML」、Asynchronousとは「非同期」という意味。Webブラウザに実装されているJavaScriptのHTTP通信機能を使って、Webページのリロードを伴わずにサーバとXML形式のデータのやり取りを行って処理を進めていく対話型Webアプリケーションの実装形態。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE_______NEXT_LINE____普通の同期処理もできるみたいですね。___NEXT_LINE_______NEXT_LINE____クライアントとサーバーとの通信には２種類、「非同期処理」と「同期処理」があります。___NEXT_LINE_______NEXT_LINE____* 同期処理___NEXT_LINE_______NEXT_LINE____同期処理とは以下の図のとおり、クライアントからサーバにリクエスト送り、サーバからデータが返ってくるまで、クライアントは何もできません。___NEXT_LINE_______NEXT_LINE____![](http://image.itmedia.co.jp/ait/articles/0708/23/r20imasara03_05.gif)___NEXT_LINE_______NEXT_LINE____* 非同期処理___NEXT_LINE_______NEXT_LINE____非同期処理とは以下の図のとおり、クライアントからサーバにリクエストを送り、サーバからリクエストが返ってくるのを待たずに、動くことができます。___NEXT_LINE_______NEXT_LINE____![](http://image.itmedia.co.jp/ait/articles/0708/23/r20imasara03_06.gif)___NEXT_LINE_______NEXT_LINE____マウスで地図を動かすと画像が動く、テキストボックスに郵便番号を入力すると自動的に住所が表示される、検索エンジンの欄に単語を入力すると自動的にサジェストされる……。ページの更新や「送信ボタン」などを押さなくても、Webページをダイナミックに更新できるのが「非同期通信」の特徴。,jp,21,2015-06-11 03:56:42,2015-06-11 04:37:11,
347,サーバー関連の専門用語,とりあえず用語の解説___NEXT_LINE____### **リクエスト**___NEXT_LINE____リクエストとは、コンピュータシステム上で一方から他方へ送信される、何らかの要求、あるいは、メッセージのことである。多くの場合、クライアントからサーバーに対して送信される、データの提供や所定の処理などを要求するためのメッセージのことである。___NEXT_LINE_______NEXT_LINE____### **レスポンス**___NEXT_LINE____レスポンスとは、反応、返答、返信などの意味を持つ英単語。ネットワーク通信で、通信相手にデータを送信した後、相手から送られてくる返信やその内容のことをレスポンスという。___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____### **クライアント**___NEXT_LINE____クライアントとは、コンピュータネットワークにおいて、サーバコンピュータの提供する機能やデータを利用するコンピュータのこと。家庭でインターネットを利用する際のパソコンなどが該当するクライアントとは、コンピュータネットワークにおいて、サーバコンピュータの提供する機能やデータを利用するコンピュータのこと。家庭でインターネットを利用する際のパソコンなどが該当する___NEXT_LINE_______NEXT_LINE____### **サーバー**___NEXT_LINE____サーバとは、コンピュータネットワークにおいて、他のコンピュータに対し、自身の持っている機能やサービス、データなどを提供するコンピュータのこと。また、そのような機能を持ったソフトウェア。,jp,21,2015-06-11 05:37:37,2015-06-15 14:25:57,
349,配列内連想配列の全Key取得,Javascriptで配列内の連想配列のキーを重複なしの配列で取り出す。___NEXT_LINE_______NEXT_LINE____arrayにたいして___NEXT_LINE____```___NEXT_LINE____var push = Array.prototype.push;___NEXT_LINE____var keys = array.map(function(e){return Object.keys(e);}).reduce(function(t,r){push.apply(r,t.filter(function(x){return -1===r.indexOf(x);}));return r;});___NEXT_LINE____```___NEXT_LINE____すべてのキー配列の配列に対して、(最初の配列に)重複していない要素配列を加え(apply)ていく。___NEXT_LINE_______NEXT_LINE____もしくは___NEXT_LINE____```___NEXT_LINE____var keys = array.map(function(e){return Object.keys(e);}).reduce(function(t,A){return A.concat(t.filter(function(x){return -1===A.indexOf(x);}));});___NEXT_LINE____```___NEXT_LINE____すべてのキー配列の配列に対して、(最初の配列から)重複していない要素の配列とつなげ(concat)ていく。___NEXT_LINE_______NEXT_LINE____見やすくしたテストコード___NEXT_LINE____```___NEXT_LINE____var c = console.log.bind(console);___NEXT_LINE____var array = [___NEXT_LINE____  {___NEXT_LINE____    firstName:'Tanaka',___NEXT_LINE____    lastName:'Taro',___NEXT_LINE____    money:100___NEXT_LINE____  },{___NEXT_LINE____    name:'Hanako',___NEXT_LINE____    lastName:'Ultimate',___NEXT_LINE____    children:['Ichiro','Jiro','Saburo']___NEXT_LINE____  },{___NEXT_LINE____    name:'Dummy',___NEXT_LINE____    children:10___NEXT_LINE____  }___NEXT_LINE____];//keys = ["name", "children", "lastName", "firstName", "money"]___NEXT_LINE_______NEXT_LINE____var keys;___NEXT_LINE_______NEXT_LINE____var push = Array.prototype.push;___NEXT_LINE____keys = array.map(function(e){___NEXT_LINE____  return Object.keys(e);___NEXT_LINE____}).reduce(function(t,r){___NEXT_LINE____  push.apply(___NEXT_LINE____    r,___NEXT_LINE____    t.filter(function(x){___NEXT_LINE____      return -1===r.indexOf(x);___NEXT_LINE____    })___NEXT_LINE____  );___NEXT_LINE____  return r;___NEXT_LINE____});___NEXT_LINE____c('apply',keys);___NEXT_LINE_______NEXT_LINE____keys = array.map(function(e){___NEXT_LINE____  return Object.keys(e);___NEXT_LINE____}).reduce(function(t,A){___NEXT_LINE____  return A.concat(t.filter(function(x){___NEXT_LINE____    return -1===A.indexOf(x);___NEXT_LINE____  }));___NEXT_LINE____});___NEXT_LINE____c('concat',keys);___NEXT_LINE____```___NEXT_LINE____配列内に連想配列以外があっても大丈夫。,jp,2,2015-06-12 12:29:27,2015-06-12 14:15:45,
350,Javascript配列操作,Javascriptで条件に一致するインデックス、要素を取得するPolyfill___NEXT_LINE_______NEXT_LINE____標準のfilterは配列が返ってくるのでめんどくさい。___NEXT_LINE____```___NEXT_LINE____if (!Array.prototype.findIndex) {___NEXT_LINE____  Array.prototype.findIndex = function(predicate) {___NEXT_LINE____    if(this == null)___NEXT_LINE____      throw new TypeError('Array.prototype.findIndex called on null or undefined');___NEXT_LINE____    if(typeof predicate !== 'function')___NEXT_LINE____      throw new TypeError('predicate must be a function');___NEXT_LINE____    var list = Object(this);___NEXT_LINE____    var length = list.length >>> 0;___NEXT_LINE____    var thisArg = arguments[1];___NEXT_LINE____    var value;___NEXT_LINE____    for (var i = 0; i < length; i++) {___NEXT_LINE____      value = list[i];___NEXT_LINE____      if (predicate.call(thisArg, value, i, list))___NEXT_LINE____        return i;___NEXT_LINE____    }___NEXT_LINE____    return -1;___NEXT_LINE____  };___NEXT_LINE____}___NEXT_LINE____if (!Array.prototype.find) {___NEXT_LINE____  Array.prototype.find = function(predicate) {___NEXT_LINE____    if (this == null)___NEXT_LINE____      throw new TypeError('Array.prototype.find called on null or undefined');___NEXT_LINE____    if (typeof predicate !== 'function')___NEXT_LINE____      throw new TypeError('predicate must be a function');___NEXT_LINE____    var list = Object(this);___NEXT_LINE____    var length = list.length >>> 0;___NEXT_LINE____    var thisArg = arguments[1];___NEXT_LINE____    var value;___NEXT_LINE____    for (var i = 0; i < length; i++) {___NEXT_LINE____      value = list[i];___NEXT_LINE____      if (predicate.call(thisArg, value, i, list))___NEXT_LINE____        return value;___NEXT_LINE____    }___NEXT_LINE____    return undefined;___NEXT_LINE____  };___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____FireFox、Safariがサポートしてるみたい(詳細は以下)___NEXT_LINE_______NEXT_LINE____[findIndex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)___NEXT_LINE____は成功した最初のインデックス、すべて失敗したら-1___NEXT_LINE_______NEXT_LINE____[find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)___NEXT_LINE____は成功した最初の要素、すべて失敗したらundefined___NEXT_LINE_______NEXT_LINE____以下はObject.definePropertyによる実装の省略版___NEXT_LINE____```___NEXT_LINE____Array.prototype.findIndex||Object.defineProperty(Array.prototype,"findIndex",{value:function(r){if(null==this)throw new TypeError("Array.prototype.findIndex called on null or undefined");if("function"!=typeof r)throw new TypeError("p must be a function");for(var e,n=Object(this),t=n.length>>>0,o=arguments[1],i=0;t>i;i++)if(e=n[i],r.call(o,e,i,n))return i;return-1}}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(r){if(null==this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof r)throw new TypeError("p must be a function");for(var e,n=Object(this),t=n.length>>>0,o=arguments[1],i=0;t>i;i++)if(e=n[i],r.call(o,e,i,n))return e;return void 0}});___NEXT_LINE____```___NEXT_LINE____Object.definePropertyを使わないでArray.prototype.findに代入すると普通の配列のfor inがうまく回らなくなる,jp,2,2015-06-12 13:14:42,2015-06-15 08:46:34,
351,cabal sandboxとLTS HaskellでDependency Hellからの脱却,Haskellでいろいろ遊んでるとDependency Hellに陥るので、___NEXT_LINE_______NEXT_LINE____[LTS Haskell](http://www.stackage.org/lts)のバージョンは2015年6月13日で2.14___NEXT_LINE____```___NEXT_LINE____mkdir -p ~/.ltshs/2.14/___NEXT_LINE____cd ~/.ltshs/2.14/___NEXT_LINE____cabal sandbox init --sandbox .___NEXT_LINE____curl -O http://www.stackage.org/lts/2.14/cabal.config___NEXT_LINE____```___NEXT_LINE____して___NEXT_LINE____cabalしたいディレクトリで___NEXT_LINE____```___NEXT_LINE____cabal sandbox init --sandbox ~/.ltshs/2.14/___NEXT_LINE____```___NEXT_LINE____でOK___NEXT_LINE____```___NEXT_LINE____ln -s ~/.ltshs/2.14 ~/.ltshs/current___NEXT_LINE____```___NEXT_LINE____しておけば___NEXT_LINE____sandboxの参照を~/.ltshs/current/にしてもいい,jp,2,2015-06-15 09:20:42,2015-06-15 11:47:44,
352,黒魔術 「Hello world!」,これが、現時点における平均的なC++のHelloWorldである。(アンサイクロペディアC++記事より）___NEXT_LINE____```___NEXT_LINE____#include <iostream>___NEXT_LINE_______NEXT_LINE____template<char O, bool = O == 'h' ? '-' : O == 'w' ? '=' : 0>class _;___NEXT_LINE_______NEXT_LINE____template<char O>std::ostream&operator<<(std::ostream&lhs, _<O, 0>*) {___NEXT_LINE____  return lhs << O;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template<char O>std::ostream&operator<<(std::ostream&lhs, _<(O), 'o'>*) {___NEXT_LINE____  return lhs << (char)(O - '!' + '.' - '-');___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____template<> std::ostream&operator<<<'~'>(std::ostream& m9, _<'~', 'o'>*) {___NEXT_LINE____    return m9 << ('m');___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____int main(int orz = 3) {___NEXT_LINE____ std::cout << (_<'h'>*)0 << (_<'e'>*)0 << (_<'l'>*)0 << (_<'l'>*)0 << (_<'o'>*)0 << (_<'w', 0>*)0 << (_<' '>*)0 << (_<'w'>*)0 << (_<'o'>*)0 << (_<'r'>*)0 << (_<'l'>*)0 << (_<'d'>*)0 << (_<'!'>*)0 << std::endl;___NEXT_LINE____    return 0;___NEXT_LINE____}___NEXT_LINE____```,jp,21,2015-06-15 15:47:05,2015-06-15 15:54:19,