id,title,content,lang,account_id,created_at,updated_at,snippet_id
14,CentOSのバージョンチェック,```___NEXT_LINE____cat /etc/redhat-release___NEXT_LINE____```,jp,1,2015-04-05 10:25:36,2015-04-05 10:25:36,141
15,ngAnimateを部分的に打ち消す,ngAnimateとfontAwesomeのアニメーションを競合しないように次のcss3コードを使います。___NEXT_LINE_______NEXT_LINE____`.fa`クラスが付いている要素だけのアニメーションが消したいので、使われるアクションによって、消す方法が異なります。___NEXT_LINE_______NEXT_LINE____### ng-if___NEXT_LINE____```___NEXT_LINE____.fa.ng-enter, .fa.ng-leave{___NEXT_LINE____  animation:0s linear all;___NEXT_LINE____  -webkit-animation: 0s linear all;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____### ng-class___NEXT_LINE____```___NEXT_LINE____.fa.ng-add, .fa.ng-remove{___NEXT_LINE____  animation:0s linear all;___NEXT_LINE____  -webkit-animation: 0s linear all;___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____詳細はこちらにて___NEXT_LINE____[https://docs.angularjs.org/api/ngAnimate](https://docs.angularjs.org/api/ngAnimate),jp,1,2015-04-05 11:22:23,2015-04-05 11:22:23,155
21,list-style-typeの正しい使い方,以下の条件が揃わないと、リストが表示されない。___NEXT_LINE____```___NEXT_LINE____ul {___NEXT_LINE____     list-style-type: disc;___NEXT_LINE____     padding-left: 1em;___NEXT_LINE____}___NEXT_LINE____ul li {___NEXT_LINE____     display: list-item;___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-04-12 09:38:00,2015-04-12 09:38:00,154
23,Knockout.jsのbootstrap alertサンプルコード,ViewModel.js___NEXT_LINE____```___NEXT_LINE____self.alertMessage ={___NEXT_LINE____    show: ko.observable(false),___NEXT_LINE____    messages: ko.observableArray([]),___NEXT_LINE____    priority: ko.observable("")___NEXT_LINE____} ___NEXT_LINE____self.showMessage = function() {___NEXT_LINE____       self.alertMessage.show(true);___NEXT_LINE____       self.alertMessage.messages(["first message", "second message"]);___NEXT_LINE____       self.alertMessage.priority('danger');___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____View___NEXT_LINE____```___NEXT_LINE____<div data-bind="visible: alertMessage.show" class="form-group row">___NEXT_LINE____    <div class="col-lg-12">___NEXT_LINE____        <div data-bind="css: 'alert alert-'+alertMessage.priority()">___NEXT_LINE____            <ul data-bind="foreach: alertMessage.messages">___NEXT_LINE____                <li data-bind="text: $data"></li>___NEXT_LINE____            </ul>___NEXT_LINE____        </div>___NEXT_LINE____    </div>___NEXT_LINE____</div>___NEXT_LINE____```,jp,1,2015-04-15 11:52:40,2015-04-15 11:52:40,194
24,Gitのログ表示,`git log`に関する機能___NEXT_LINE_______NEXT_LINE____編集したファイル名を表示___NEXT_LINE____```___NEXT_LINE____git log --name-only___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____commit ffs3fssdffffffffff___NEXT_LINE____Author: edisonthk-mac <edisonthk@gmail.com>___NEXT_LINE____Date:   Tue Apr 14 18:52:33 2015 +0900___NEXT_LINE_______NEXT_LINE____    注文ページを編集___NEXT_LINE_______NEXT_LINE____app/controllers/OrderController.php___NEXT_LINE____public/js/plugins/typeahead/typeahead.bundle.js___NEXT_LINE____```,jp,1,2015-04-15 11:54:03,2015-04-15 11:54:03,193
25,CSSでボックスを作る,簡単な青いボックスを作る___NEXT_LINE____```___NEXT_LINE____<html>___NEXT_LINE____<head>___NEXT_LINE____    <title></title>___NEXT_LINE____    <style>___NEXT_LINE____        div.sample {___NEXT_LINE____            width:200px; height:100px;___NEXT_LINE____            margin:5px; padding:10px; border:1px solid black;___NEXT_LINE____            background-color:blue;___NEXT_LINE____        } ___NEXT_LINE____    </style>___NEXT_LINE____</head>___NEXT_LINE_______NEXT_LINE____<body>___NEXT_LINE____    <div class=" sample"></div>___NEXT_LINE____</body>___NEXT_LINE____</html>___NEXT_LINE_______NEXT_LINE_______NEXT_LINE____```___NEXT_LINE_______NEXT_LINE____marginは外側余白、borderは境界線、paddingは内側余白です。___NEXT_LINE____background-colorで背景色を変えることができます。,jp,21,2015-04-15 12:07:54,2015-04-15 12:07:54,190
30,z-indexによる重なりの制御,図形や画像の重なりを制御する際に用いると便利なのがz-indexである。___NEXT_LINE____0を基準とし、値が大きいものほど上に重なる。<br>___NEXT_LINE____**positionプロパティで必ず指定すること**___NEXT_LINE_______NEXT_LINE____以下の例の場合、sample1が上側に描画される。___NEXT_LINE_______NEXT_LINE____```___NEXT_LINE____.sample1{___NEXT_LINE____color: #000000;___NEXT_LINE____background-color: #99cc00;___NEXT_LINE____position: relative; ___NEXT_LINE____top: 50px; ___NEXT_LINE____z-index: 2;___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____.sample2 {___NEXT_LINE____position: relative;___NEXT_LINE____top: -50px;___NEXT_LINE____z-index: 1;___NEXT_LINE____}___NEXT_LINE____```,jp,19,2015-04-22 12:50:09,2015-04-22 12:50:09,204
35,TCPソケット（シングルスレッド）,シンプルtcpソケットの受信スニペット。しかし、UIと同じスレッドで処理を行うので、ボタンなどのUIが機能しません。___NEXT_LINE____```___NEXT_LINE____//___NEXT_LINE____//  ViewController.swift___NEXT_LINE____//  Swift TCP___NEXT_LINE____//___NEXT_LINE____//  Created by Edisonthk on 2015/05/03.___NEXT_LINE____//  Copyright (c) 2015年 test. All rights reserved.___NEXT_LINE____//___NEXT_LINE____import CoreFoundation;___NEXT_LINE____import UIKit___NEXT_LINE_______NEXT_LINE____class ViewController: UIViewController,NSStreamDelegate {___NEXT_LINE_______NEXT_LINE____    var inputstream: NSInputStream?;___NEXT_LINE____    var outputstream: NSOutputStream?;___NEXT_LINE_______NEXT_LINE____    override func viewDidLoad() {___NEXT_LINE____        super.viewDidLoad()___NEXT_LINE____        initTcpNetwork();___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    func initTcpNetwork() {___NEXT_LINE____        ___NEXT_LINE____        NSStream.getStreamsToHostWithName("127.0.0.1", port: 5000, inputStream: &inputstream, outputStream: &outputstream)___NEXT_LINE____        ___NEXT_LINE____        inputstream?.delegate=self;___NEXT_LINE____        outputstream?.delegate=self;___NEXT_LINE____        ___NEXT_LINE____        //Set streams into run loops___NEXT_LINE____        inputstream?.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode)___NEXT_LINE____        outputstream?.scheduleInRunLoop(NSRunLoop.currentRunLoop(), forMode: NSDefaultRunLoopMode)___NEXT_LINE____        ___NEXT_LINE____        //Open Streams___NEXT_LINE____        inputstream?.open()___NEXT_LINE____        outputstream?.open()___NEXT_LINE____        ___NEXT_LINE____    }___NEXT_LINE_______NEXT_LINE____    func stream(aStream: NSStream, handleEvent eventCode: NSStreamEvent) {___NEXT_LINE____        ___NEXT_LINE____        switch (eventCode){___NEXT_LINE____        case NSStreamEvent.OpenCompleted:___NEXT_LINE____            NSLog("Stream opened");___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.HasBytesAvailable:___NEXT_LINE____            if (aStream == inputstream) {___NEXT_LINE____                var buffer = [UInt8](count: 4096, repeatedValue: 0);___NEXT_LINE____                while ((inputstream?.hasBytesAvailable) != nil) {___NEXT_LINE____                    var len = inputstream?.read(&buffer, maxLength: 4096);___NEXT_LINE____                    if (len > 0) {___NEXT_LINE____                        var output: NSString = NSString(bytes:&buffer, length:len!, encoding:NSASCIIStringEncoding)!;___NEXT_LINE____                        recv(output);___NEXT_LINE____                    }___NEXT_LINE____                }___NEXT_LINE____            }___NEXT_LINE____            ___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.ErrorOccurred:___NEXT_LINE____            NSLog("ErrorOccurred")___NEXT_LINE____            break___NEXT_LINE____        case NSStreamEvent.EndEncountered:___NEXT_LINE____            NSLog("EndEncountered")___NEXT_LINE____            break___NEXT_LINE____        default:___NEXT_LINE____            NSLog("unknown.")___NEXT_LINE____        }___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____    func recv(recv: NSString) {___NEXT_LINE____        // ここで受信処理を行います___NEXT_LINE____        print(recv);___NEXT_LINE____    }___NEXT_LINE____    ___NEXT_LINE____}___NEXT_LINE____```,jp,1,2015-05-03 16:39:03,2015-05-03 16:39:03,232
105,Swiftのenumをenumerateする,Swiftのenumにはjavaのvaluesみたいなものがない___NEXT_LINE____```___NEXT_LINE____private func bitCast<T:Hashable>( t: T.Type ) -> ( Int,(Int)->T )? {___NEXT_LINE____    switch sizeof(t){___NEXT_LINE____    case sizeof(  UInt8 ):___NEXT_LINE____        return (Int( UInt8.max), { return unsafeBitCast(  UInt8($0), t) })___NEXT_LINE____    case sizeof( UInt16 ):___NEXT_LINE____        return (Int(UInt16.max), { return unsafeBitCast( UInt16($0), t) })___NEXT_LINE____    case sizeof( UInt32 ):___NEXT_LINE____        return (Int(UInt32.max), { return unsafeBitCast( UInt32($0), t) })___NEXT_LINE____    case sizeof( UInt64 ):___NEXT_LINE____        return (Int( Int.max-1), { return unsafeBitCast( UInt64($0), t) })___NEXT_LINE____    default:___NEXT_LINE____        return nil___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____func count<T:Hashable>(t:T.Type) -> Int {___NEXT_LINE____    if let (maximum, cast) = bitCast(T){___NEXT_LINE____        let flag = Int( 0 != cast(0).hashValue )___NEXT_LINE____        for i in 1...maximum {___NEXT_LINE____            if 0 == cast(i).hashValue {___NEXT_LINE____                return i + flag___NEXT_LINE____            }___NEXT_LINE____        }___NEXT_LINE____        return 1 + maximum + flag___NEXT_LINE____    }___NEXT_LINE____    return 0___NEXT_LINE____}___NEXT_LINE_______NEXT_LINE____func values<T:Hashable>(t:T.Type)->[T]{___NEXT_LINE____    if let (_, cast) = bitCast(t) {___NEXT_LINE____        return map(0..<count(t), cast)___NEXT_LINE____    }___NEXT_LINE____    return [T]()___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____で使い方は___NEXT_LINE____```___NEXT_LINE____enum Test{___NEXT_LINE____    case One___NEXT_LINE____    case Two___NEXT_LINE____}___NEXT_LINE____println("count = \(count(Test))")___NEXT_LINE____for item in values(Test){___NEXT_LINE____    switch item {___NEXT_LINE____    case .One:___NEXT_LINE____        println("一")___NEXT_LINE____    case .Two:___NEXT_LINE____        println("二")___NEXT_LINE____    }___NEXT_LINE____}___NEXT_LINE____```___NEXT_LINE____構造体でラップしてgetter経由にしてもええけど、使う時面倒くさい___NEXT_LINE_______NEXT_LINE____自前でenumの配列を作ってもええけど、変更があると面倒くさいテスト関数などで……というか標準でサポートしてほしい___NEXT_LINE_______NEXT_LINE____値付きenumはenumであってenumでないので これでは無理,jp,2,2015-05-23 07:52:55,2015-05-23 07:54:37,291